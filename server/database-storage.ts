import { db } from "./db";
import { blogPosts, users, categories, products, orders, orderItems, cartItems, chatMessages } from "@shared/schema";
import { eq, like, or, desc } from "drizzle-orm";
import { randomUUID } from "crypto";
import type { IStorage } from "./storage";
import type { 
  User, InsertUser, Category, InsertCategory, Product, InsertProduct, 
  Order, InsertOrder, OrderItem, InsertOrderItem, CartItem, InsertCartItem, 
  BlogPost, InsertBlogPost, ChatMessage, InsertChatMessage 
} from "@shared/schema";

export class DatabaseStorage implements IStorage {
  // Blog Posts - PostgreSQL dan foydalanish
  async getBlogPosts(): Promise<BlogPost[]> {
    try {
      const posts = await db.select().from(blogPosts)
        .where(eq(blogPosts.isPublished, true))
        .orderBy(desc(blogPosts.createdAt));
      return posts;
    } catch (error) {
      console.error('Blog postlarni olishda xatolik:', error);
      return [];
    }
  }

  async getBlogPost(id: string): Promise<BlogPost | undefined> {
    try {
      const post = await db.select().from(blogPosts)
        .where(eq(blogPosts.id, id))
        .limit(1);
      return post[0];
    } catch (error) {
      console.error('Blog postni olishda xatolik:', error);
      return undefined;
    }
  }

  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {
    try {
      const post = await db.select().from(blogPosts)
        .where(eq(blogPosts.slug, slug))
        .limit(1);
      return post[0];
    } catch (error) {
      console.error('Blog postni slug orqali olishda xatolik:', error);
      return undefined;
    }
  }

  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {
    try {
      const id = randomUUID();
      const newPost = {
        id,
        title: insertPost.title,
        content: insertPost.content,
        excerpt: insertPost.excerpt || null,
        imageUrl: insertPost.imageUrl || null,
        slug: insertPost.slug,
        tags: insertPost.tags || null,
        language: insertPost.language || 'uz',
        isPublished: insertPost.isPublished ?? true,
        isAutoGenerated: insertPost.isAutoGenerated ?? false,
        source: insertPost.source || 'admin',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      await db.insert(blogPosts).values(newPost);
      console.log(`‚úÖ Blog post PostgreSQL ga saqlandi: ${newPost.title}`);
      return newPost;
    } catch (error) {
      console.error('Blog post yaratishda xatolik:', error);
      throw error;
    }
  }

  async updateBlogPost(id: string, updates: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {
    try {
      const updatedPost = {
        ...updates,
        updatedAt: new Date()
      };

      await db.update(blogPosts)
        .set(updatedPost)
        .where(eq(blogPosts.id, id));

      return this.getBlogPost(id);
    } catch (error) {
      console.error('Blog postni yangilashda xatolik:', error);
      return undefined;
    }
  }

  async deleteBlogPost(id: string): Promise<boolean> {
    try {
      await db.delete(blogPosts).where(eq(blogPosts.id, id));
      return true;
    } catch (error) {
      console.error('Blog postni o\'chirishda xatolik:', error);
      return false;
    }
  }

  // Boshqa metodlar uchun MemStorage fallback
  private memStorage: any;
  
  constructor() {
    // MemStorage ni async yuklash
    this.initMemStorage();
  }
  
  private async initMemStorage() {
    const { MemStorage } = await import('./storage');
    this.memStorage = new MemStorage();
  }

  async getUser(id: string): Promise<User | undefined> {
    if (!this.memStorage) {
      await this.initMemStorage();
    }
    return this.memStorage.getUser(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return this.memStorage.getUserByUsername(username);
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    return this.memStorage.getUserByEmail(email);
  }

  async createUser(user: InsertUser): Promise<User> {
    return this.memStorage.createUser(user);
  }

  async getCategories(): Promise<Category[]> {
    return this.memStorage.getCategories();
  }

  async getCategory(id: string): Promise<Category | undefined> {
    return this.memStorage.getCategory(id);
  }

  async getCategoryBySlug(slug: string): Promise<Category | undefined> {
    return this.memStorage.getCategoryBySlug(slug);
  }

  async createCategory(category: InsertCategory): Promise<Category> {
    return this.memStorage.createCategory(category);
  }

  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined> {
    return this.memStorage.updateCategory(id, category);
  }

  async deleteCategory(id: string): Promise<boolean> {
    return this.memStorage.deleteCategory(id);
  }

  async getProducts(categoryId?: string, featured?: boolean): Promise<Product[]> {
    return this.memStorage.getProducts(categoryId, featured);
  }

  async getProduct(id: string): Promise<Product | undefined> {
    return this.memStorage.getProduct(id);
  }

  async getProductBySlug(slug: string): Promise<Product | undefined> {
    return this.memStorage.getProductBySlug(slug);
  }

  async createProduct(product: InsertProduct): Promise<Product> {
    return this.memStorage.createProduct(product);
  }

  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {
    return this.memStorage.updateProduct(id, product);
  }

  async deleteProduct(id: string): Promise<boolean> {
    return this.memStorage.deleteProduct(id);
  }

  async searchProducts(query: string): Promise<Product[]> {
    return this.memStorage.searchProducts(query);
  }

  async getCartItems(sessionId: string): Promise<CartItem[]> {
    return this.memStorage.getCartItems(sessionId);
  }

  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {
    return this.memStorage.addToCart(cartItem);
  }

  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {
    return this.memStorage.updateCartItem(id, quantity);
  }

  async removeFromCart(id: string): Promise<boolean> {
    return this.memStorage.removeFromCart(id);
  }

  async clearCart(sessionId: string): Promise<boolean> {
    return this.memStorage.clearCart(sessionId);
  }

  async getOrders(userId?: string): Promise<Order[]> {
    return this.memStorage.getOrders(userId);
  }

  async getAllOrders(): Promise<Order[]> {
    return this.memStorage.getAllOrders();
  }

  async getOrder(id: string): Promise<Order | undefined> {
    return this.memStorage.getOrder(id);
  }

  async createOrder(order: InsertOrder): Promise<Order> {
    return this.memStorage.createOrder(order);
  }

  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {
    return this.memStorage.updateOrder(id, updates);
  }

  async getOrderItems(orderId: string): Promise<OrderItem[]> {
    return this.memStorage.getOrderItems(orderId);
  }

  async addOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {
    return this.memStorage.addOrderItem(orderItem);
  }

  async searchAll(query: string): Promise<{ products: Product[]; blogPosts: BlogPost[] }> {
    try {
      console.log('üîç DatabaseStorage searchAll called with:', query);
      
      if (!this.memStorage) {
        console.log('‚è≥ Initializing memStorage...');
        await this.initMemStorage();
      }
      
      console.log('üìû Calling memStorage.searchProducts');
      const products = await this.memStorage.searchProducts(query);
      console.log('üì¶ Products found:', products.length);
      
      // Blog postlarni PostgreSQL dan qidirish
      const searchQuery = query.toLowerCase().trim();
      let posts = [];
      try {
        posts = await db.select().from(blogPosts)
          .where(
            or(
              like(blogPosts.title, `%${searchQuery}%`),
              like(blogPosts.content, `%${searchQuery}%`)
            )
          );
        console.log('üìù Blog posts found:', posts.length);
      } catch (dbError) {
        console.log('‚ö†Ô∏è Blog posts search failed, using empty array:', dbError);
        posts = [];
      }

      console.log('üìä DatabaseStorage final results:', { productsFound: products.length, blogPostsFound: posts.length });
      return { products, blogPosts: posts };
    } catch (error) {
      console.error('üí• DatabaseStorage search error:', error);
      return { products: [], blogPosts: [] };
    }
  }

  async getChatHistory(sessionId: string): Promise<ChatMessage[]> {
    return this.memStorage.getChatHistory(sessionId);
  }

  async saveChatMessage(chatMessage: InsertChatMessage): Promise<ChatMessage> {
    return this.memStorage.saveChatMessage(chatMessage);
  }

  async updateChatResponse(messageId: string, response: string): Promise<ChatMessage | undefined> {
    return this.memStorage.updateChatResponse(messageId, response);
  }

  // Favorites methods
  async getFavorites(userId: string): Promise<import("@shared/schema").Favorite[]> {
    if (!this.memStorage) {
      await this.initMemStorage();
    }
    return this.memStorage.getFavorites(userId);
  }

  async addToFavorites(favorite: import("@shared/schema").InsertFavorite): Promise<import("@shared/schema").Favorite> {
    if (!this.memStorage) {
      await this.initMemStorage();
    }
    return this.memStorage.addToFavorites(favorite);
  }

  async removeFromFavorites(userId: string, productId: string): Promise<boolean> {
    if (!this.memStorage) {
      await this.initMemStorage();
    }
    return this.memStorage.removeFromFavorites(userId, productId);
  }

  async isFavorite(userId: string, productId: string): Promise<boolean> {
    if (!this.memStorage) {
      await this.initMemStorage();
    }
    return this.memStorage.isFavorite(userId, productId);
  }
}