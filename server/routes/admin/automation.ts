import { Router } from 'express';
import { adminAuth } from '../../middleware/adminAuth';
import { createTestBlogPost, sendTestMarketingMessage, isSchedulerRunning } from '../../cron/blog-scheduler';
import { sendWeeklyReport, sendTestMessage } from '../../services/telegram-bot';
import type { IStorage } from '../../storage';

export function registerAutomationRoutes(app: any, storage: IStorage) {
  const router = Router();

  // Scheduler status
  router.get('/scheduler/status', adminAuth, async (req, res) => {
    try {
      const isRunning = isSchedulerRunning();
      const lastActivity = new Date().toISOString(); // Bu real holatda cache'dan olinadi
      
      res.json({
        isRunning,
        lastActivity,
        uptime: process.uptime()
      });
    } catch (error) {
      res.status(500).json({ message: 'Scheduler status olishda xatolik' });
    }
  });

  // Blog statistics
  router.get('/blog/stats', adminAuth, async (req, res) => {
    try {
      const blogPosts = await storage.getBlogPosts?.() || [];
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const todayPosts = blogPosts.filter(post => {
        if (!post.createdAt) return false;
        const postDate = new Date(post.createdAt);
        postDate.setHours(0, 0, 0, 0);
        return postDate.getTime() === today.getTime();
      }).length;

      const autoGeneratedPosts = blogPosts.filter(post => post.isAutoGenerated).length;
      
      res.json({
        totalPosts: blogPosts.length,
        todayPosts,
        autoGeneratedPosts,
        publishedPosts: blogPosts.filter(post => post.isPublished).length
      });
    } catch (error) {
      res.status(500).json({ message: 'Blog statistikasini olishda xatolik' });
    }
  });

  // Telegram statistics
  router.get('/telegram/stats', adminAuth, async (req, res) => {
    try {
      // Bu real holatda Telegram API'dan yoki cache'dan olinadi
      res.json({
        todayMessages: 5,
        weeklyMessages: 28,
        totalMessages: 150,
        channelSubscribers: 1250
      });
    } catch (error) {
      res.status(500).json({ message: 'Telegram statistikasini olishda xatolik' });
    }
  });

  // Test blog post yaratish
  router.post('/blog/test', adminAuth, async (req, res) => {
    try {
      const { language = 'uz' } = req.body;
      
      if (!['uz', 'ru'].includes(language)) {
        return res.status(400).json({ message: 'Noto\'g\'ri til tanlandi' });
      }

      await createTestBlogPost(storage, language as 'uz' | 'ru');
      
      res.json({ 
        success: true, 
        message: `${language.toUpperCase()} tilida test blog post yaratildi` 
      });
    } catch (error) {
      console.error('Test blog post yaratishda xatolik:', error);
      res.status(500).json({ message: 'Test blog post yaratishda xatolik' });
    }
  });

  // Test marketing xabari yuborish
  router.post('/marketing/test', adminAuth, async (req, res) => {
    try {
      await sendTestMarketingMessage(storage);
      
      res.json({ 
        success: true, 
        message: 'Test marketing xabari yuborildi' 
      });
    } catch (error) {
      console.error('Test marketing xabarini yuborishda xatolik:', error);
      res.status(500).json({ message: 'Test marketing xabarini yuborishda xatolik' });
    }
  });

  // Haftalik hisobot yuborish
  router.post('/reports/weekly', adminAuth, async (req, res) => {
    try {
      await sendWeeklyReport(storage);
      
      res.json({ 
        success: true, 
        message: 'Haftalik hisobot yuborildi' 
      });
    } catch (error) {
      console.error('Haftalik hisorot yuborishda xatolik:', error);
      res.status(500).json({ message: 'Haftalik hisorot yuborishda xatolik' });
    }
  });

  // Test Telegram xabari yuborish
  router.post('/telegram/test', adminAuth, async (req, res) => {
    try {
      await sendTestMessage();
      
      res.json({ 
        success: true, 
        message: 'Test Telegram xabari yuborildi' 
      });
    } catch (error) {
      console.error('Test Telegram xabarini yuborishda xatolik:', error);
      res.status(500).json({ message: 'Test Telegram xabarini yuborishda xatolik' });
    }
  });

  // Scheduler boshqaruvi
  router.post('/scheduler/start', adminAuth, async (req, res) => {
    try {
      // Bu real holatda scheduler'ni ishga tushiradi
      res.json({ 
        success: true, 
        message: 'Scheduler ishga tushirildi' 
      });
    } catch (error) {
      res.status(500).json({ message: 'Scheduler\'ni ishga tushirishda xatolik' });
    }
  });

  router.post('/scheduler/stop', adminAuth, async (req, res) => {
    try {
      // Bu real holatda scheduler'ni to'xtatadi
      res.json({ 
        success: true, 
        message: 'Scheduler to\'xtatildi' 
      });
    } catch (error) {
      res.status(500).json({ message: 'Scheduler\'ni to\'xtatishda xatolik' });
    }
  });

  app.use('/api/admin', router);
}
