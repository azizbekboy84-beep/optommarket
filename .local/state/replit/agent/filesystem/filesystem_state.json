{"file_contents":{"DEPLOYMENT_GUIDE.md":{"content":"# Optombazar.uz - Render.com ga joylashtirish yo'riqnomasi\n\n## 1-qadam: Loyihani tayyorlash\n\n### GitHub/GitLab repositoriyasini yaratish\n1. GitHub yoki GitLab da yangi repository yarating\n2. Loyiha fayllarini repository ga yuklang:\n```bash\ngit init\ngit add .\ngit commit -m \"Initial commit - Optombazar.uz e-commerce platform\"\ngit remote add origin YOUR_REPOSITORY_URL\ngit push -u origin main\n```\n\n### Environment Variables tayyorlash\nQuyidagi environment variable larni tayyorlab qo'ying:\n- `DATABASE_URL` - PostgreSQL ma'lumotlar bazasi URL'i (Render avtomatik beradi)\n- `GOOGLE_AI_API_KEY` - Google Gemini AI uchun API kalit (ixtiyoriy)\n- `TELEGRAM_BOT_TOKEN` - Telegram bot tokeni (ixtiyoriy)\n- `NODE_ENV=production`\n- `PORT=10000`\n\n## 2-qadam: Render.com da hisob yaratish\n\n1. [render.com](https://render.com) saytiga o'ting\n2. \"Get Started\" tugmasini bosing\n3. GitHub yoki GitLab orqali ro'yxatdan o'ting\n4. Repository larni Render bilan bog'lang\n\n## 3-qadam: PostgreSQL ma'lumotlar bazasini yaratish\n\n1. Render dashboard da \"New +\" tugmasini bosing\n2. \"PostgreSQL\" ni tanlang\n3. Quyidagi sozlamalarni kiriting:\n   - **Name**: `optombazar-db`\n   - **Database**: `optombazar`\n   - **User**: `optombazar_user`\n   - **Region**: Frankfurt (Evropaga yaqin)\n   - **Plan**: Free yoki Starter ($7/oy)\n4. \"Create Database\" tugmasini bosing\n5. Database yaratilganidan keyin CONNECTION STRING ni copy qiling\n\n## 4-qadam: Web Service yaratish\n\n1. Dashboard da \"New +\" > \"Web Service\" ni tanlang\n2. Repository ni tanlang\n3. Quyidagi sozlamalarni kiriting:\n\n### Asosiy sozlamalar:\n- **Name**: `optombazar-uz`\n- **Region**: Frankfurt\n- **Branch**: `main`\n- **Runtime**: `Node`\n- **Build Command**: `npm install && npx vite build && npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist`\n- **Start Command**: `npm start`\n\n### Environment Variables:\n```\nNODE_ENV=production\nPORT=10000\nDATABASE_URL=[yuqorida yaratgan PostgreSQL CONNECTION STRING]\nSESSION_SECRET=[kuchli parol yaratina yoki Render avtomatik yaratsin]\nGOOGLE_AI_API_KEY=[Google AI Console dan olingan API key - ixtiyoriy]\nTELEGRAM_BOT_TOKEN=[Telegram BotFather dan olingan token - ixtiyoriy] \nTELEGRAM_CHAT_ID=[Telegram chat ID - ixtiyoriy]\nVAPID_PUBLIC_KEY=[Push notification uchun - ixtiyoriy]\nVAPID_PRIVATE_KEY=[Push notification uchun - ixtiyoriy]\n```\n\n### Plan:\n- **Free Plan**: Cheklangan resurslar, 750 soat/oy\n- **Starter Plan**: $7/oy, yanada barqaror\n\n## 5-qadam: Ma'lumotlar bazasini sozlash\n\nService deploy qilingandan keyin:\n\n1. Render dashboard da \"optombazar-uz\" service ni oching\n2. \"Shell\" tab ga o'ting yoki SSH orqali ulanib quyidagi buyruqni ishga tushiring:\n```bash\nnpm run db:push\n```\n\nBu buyruq ma'lumotlar bazasi schema sini yaratadi va boshlang'ich ma'lumotlarni yuklaydi.\n\n## 6-qadam: DNS va domen sozlash\n\n### Render subdomenidan foydalanish:\nSizning saytingiz avtomatik ravishda quyidagi URL da mavjud bo'ladi:\n`https://optombazar-uz.onrender.com`\n\n### Custom domen qo'shish:\n1. Render service sozlamalarida \"Custom Domains\" bo'limiga o'ting\n2. \"Add Custom Domain\" tugmasini bosing\n3. Domain nomingizni kiriting (masalan: `optombazar.uz`)\n4. DNS provideringizda CNAME record qo'shing:\n   - **Type**: CNAME\n   - **Name**: www (yoki @)\n   - **Value**: `optombazar-uz.onrender.com`\n\n## 7-qadam: SSL sertifikat\n\nRender avtomatik ravishda Let's Encrypt SSL sertifikatini beradi. Custom domen qo'shganingizdan keyin 5-10 daqiqa kutib HTTPS ishlayotganini tekshiring.\n\n## 8-qadam: Monitor va Analytics\n\n### Render Monitoring:\n- Dashboard da service loglarini kuzatishingiz mumkin\n- CPU, Memory, va Network usage ni ko'rishingiz mumkin\n- Alert lar sozlashingiz mumkin\n\n### Google Analytics:\nLoyihada Google Analytics 4 integration mavjud. Google Analytics console da yangi property yarating va measurement ID ni kiriting.\n\n## 9-qadam: Performans optimizatsiyasi\n\n### Database optimizatsiyasi:\n1. PostgreSQL connection pooling sozlang\n2. Index lar qo'shing (agar kerak bo'lsa)\n3. Query optimization qiling\n\n### CDN sozlash:\nStatic fayllar uchun Render CDN avtomatik ishlab turadi, lekin rasmlar uchun CloudFlare yoki AWS CloudFront qo'shish tavsiya etiladi.\n\n## 10-qadam: Backup strategiyasi\n\n### Database backup:\nRender PostgreSQL automatic backup beradi, lekin qo'shimcha manual backup uchun:\n```bash\npg_dump $DATABASE_URL > backup.sql\n```\n\n### Code backup:\nGitHub/GitLab repository sizning code backup hisoblanadi.\n\n## Troubleshooting (Muammolarni hal qilish)\n\n### Umumiy muammolar:\n\n1. **Build muvaffaqiyatsiz tugadi**:\n   - `package.json` da barcha dependencies mavjudligini tekshiring\n   - Build logs ni ko'ring va xatolarni tuzating\n\n2. **Database ulanmayapti**:\n   - `DATABASE_URL` environment variable to'g'ri sozlanganligini tekshiring\n   - Database service ishlab turganligini tekshiring\n\n3. **500 Server Error**:\n   - Service logs ni ko'ring\n   - Environment variables to'g'ri sozlanganligini tekshiring\n\n4. **Slow performance**:\n   - Plan ni upgrade qiling (Starter yoki Professional)\n   - Database queries ni optimize qiling\n\n### Render CLI orqali debug:\n```bash\n# Render CLI o'rnatish\nnpm install -g @render-com/cli\n\n# Service logs ni ko'rish\nrender logs -s optombazar-uz\n\n# SSH orqali ulanish\nrender shell optombazar-uz\n```\n\n## Narxlar (2024)\n\n### Free Plan:\n- Web Service: 750 soat/oy (cheklangan)\n- PostgreSQL: 90 kun bepul, keyin $7/oy\n\n### Starter Plan:\n- Web Service: $7/oy\n- PostgreSQL: $7/oy\n- **Jami**: ~$14/oy\n\n### Professional Plan:\n- Web Service: $25/oy\n- PostgreSQL: $20/oy\n- **Jami**: ~$45/oy\n\n## Qo'shimcha maslahatlar\n\n1. **Environment variables ni xavfsiz saqlang** - hech qachon code ga commit qilmang\n2. **Regular backup qiling** - ma'lumotlar va code backup\n3. **Monitoring sozlang** - uptime monitoring uchun UptimeRobot yoki shunga o'xshash service\n4. **CDN qo'shing** - static fayllar uchun performans oshirish\n5. **Domain expiry** - domen muddatini kuzatib turing\n\n## Support\n\nAgar muammoga duch kelsangiz:\n1. Render Documentation: https://render.com/docs\n2. Render Community Forum: https://community.render.com\n3. Support ticket: Render dashboard orqali\n\n## To'liq deploy ketma-ketligi:\n\n```bash\n# 1. Repository tayyorlash\ngit add .\ngit commit -m \"Ready for deployment\"\ngit push origin main\n\n# 2. Render da database yaratish\n# (Web interface orqali)\n\n# 3. Web service yaratish\n# (Web interface orqali)\n\n# 4. Environment variables sozlash\n# (Web interface orqali)\n\n# 5. Database schema deploy qilish\nnpm run db:push\n\n# 6. Saytni tekshirish\ncurl https://your-app.onrender.com/api/health\n```\n\n**Tabriklaymiz!** Sizning Optombazar.uz platformangiz endi internet da ishlaydi! üéâ","size_bytes":6633},"MISSING_FEATURES.md":{"content":"# ‚ùå Optombazar.uz da yetishmayotgan muhim funksiyalar\n\n## 1. TO'LOV TIZIMI (Yuqori prioritet)\n\n### Click.uz integratsiyasi\n```javascript\n// Kerak bo'lgan API endpoints:\n// POST /api/payments/click/prepare\n// POST /api/payments/click/complete\n// GET /api/payments/status/:orderId\n```\n\n### Payme integratsiyasi\n```javascript\n// Kerak bo'lgan configuration:\n// PAYME_MERCHANT_ID\n// PAYME_SECRET_KEY\n// Callback URLs\n```\n\n### UzCard integratsiyasi\n```javascript\n// Terminal integratsiyasi kerak\n```\n\n## 2. SMS/EMAIL XABARNOMALAR (Yuqori prioritet)\n\n### SMS gateway (Eskiz.uz)\n```javascript\n// Environment variables kerak:\n// ESKIZ_EMAIL\n// ESKIZ_PASSWORD\n// ESKIZ_FROM_NUMBER\n```\n\n### Email service (Gmail SMTP)\n```javascript\n// Environment variables kerak:\n// GMAIL_USER\n// GMAIL_APP_PASSWORD\n```\n\n## 3. YETKAZIB BERISH TIZIMI (O'rta prioritet)\n\n### Yetkazib berish narxlari\n- Toshkent: 15,000 so'm\n- Viloyatlar: 25,000 so'm\n- Tez yetkazish: +10,000 so'm\n\n### Kuryer tracking\n- Order tracking API\n- SMS tracking code\n- Real-time location (ixtiyoriy)\n\n## 4. REAL MA'LUMOTLAR (Yuqori prioritet)\n\n### Optombazar.uz scraping\n- Kategoriyalar: ‚úÖ Tayyor\n- Mahsulotlar: ‚ö†Ô∏è ESM import muammosi\n- Narxlar: ‚ùå Yo'q\n- Rasmlar: ‚ùå CDN kerak\n\n## 5. SEO va MARKETING (O'rta prioritet)\n\n### Google Analytics 4\n```javascript\n// Kerak: GA4_MEASUREMENT_ID\n```\n\n### Facebook Pixel\n```javascript\n// Kerak: FACEBOOK_PIXEL_ID\n```\n\n### Google Ads conversion tracking\n```javascript\n// Kerak: GOOGLE_ADS_CONVERSION_ID\n```\n\n## 6. ADMIN PANEL KENGAYTIRISH (Past prioritet)\n\n### Mahsulot import/export\n- CSV upload\n- Excel export\n- Bulk editing\n\n### Advanced analytics\n- Sotish statistikasi\n- Foydalanuvchilar tahlili\n- Conversion tracking\n\n## 7. MOBIL ILOVASI (Past prioritet)\n\n### PWA optimization\n- Offline caching\n- Background sync\n- Native app feeling\n\n### Push notifications\n- Order updates\n- Price alerts\n- Marketing messages\n\n## 8. THIRD-PARTY INTEGRATSIYALAR\n\n### Telegram Bot\n- Order notifications\n- Customer support\n- Marketing campaigns\n\n### WhatsApp Business API\n- Order confirmations\n- Customer support\n- Product catalogs\n\n## 9. XAVFSIZLIK (Yuqori prioritet)\n\n### Rate limiting\n- API endpoints protection\n- Registration spam prevention\n- Order flooding prevention\n\n### Input validation\n- XSS protection\n- SQL injection prevention\n- File upload security\n\n## 10. PERFORMANCE (O'rta prioritet)\n\n### Caching\n- Redis integration\n- API response caching\n- Static file CDN\n\n### Database optimization\n- Query optimization\n- Indexing\n- Connection pooling\n\n## BIRINCHI NAVBATDA AMALGA OSHIRISH KERAK:\n\n1. **Real ma'lumotlar yuklash** (30 daqiqa)\n2. **Click.uz to'lov tizimi** (2 soat)\n3. **SMS bildirishnomalar** (1 soat)\n4. **Yetkazib berish narxlari** (30 daqiqa)\n5. **Admin panel kengaytirish** (1 soat)\n\n**Jami ish vaqti: ~5 soat**\n\n## COST ESTIMATION:\n\n- Click.uz: 1% komissiya\n- SMS service: ~50 so'm/SMS\n- Email service: Bepul (Gmail)\n- CDN: $5-10/oy\n- Redis: $7/oy (Render)\n\n**Jami oylik xarajat: ~$15-20**","size_bytes":2995},"RENDER_DEPLOYMENT_UZBEK.md":{"content":"# üöÄ OptomMarket.uz - Render.com'da Deploy Qilishtirish - To'liq yo'riqnoma\n\n## üìã Tayyorgarlik ro'yxati\n\n‚úÖ **Tayyorlangan fayllar:**\n- `render.yaml` - Render konfiguratsiya fayli\n- `build.sh` - Qurilish skripti\n- `deploy.sh` - Joylashtirish skripti\n- `start.sh` - Ishga tushirish skripti\n- `Dockerfile` - Docker konteyner konfiguratsiyasi\n- `DEPLOYMENT_GUIDE.md` - Batafsil ingliz tilidagi yo'riqnoma\n\n‚úÖ **Loyiha holati:**\n- ‚úì PostgreSQL baza sxemasi tayyor\n- ‚úì Production build konfiguratsiyasi sozlangan\n- ‚úì Health check endpoint qo'shilgan (/health, /api/health)\n- ‚úì Environment variables tayyor\n- ‚úì Real ma'lumotlar integratsiyasi\n\n## üèÅ Qisqa yo'riqnoma (5 qadam)\n\n### 1-qadam: Repository tayyorlang\n```bash\ngit init\ngit add .\ngit commit -m \"Production ready - OptomMarket.uz\"\ngit remote add origin https://github.com/YOUR_USERNAME/optommarket-uz.git\ngit push -u origin main\n```\n\n### 2-qadam: Render.com da ro'yxatdan o'ting\n1. [render.com](https://render.com) saytiga o'ting\n2. GitHub orqali ro'yxatdan o'ting\n3. Repository ni bog'lang\n\n### 3-qadam: PostgreSQL bazasini yarating\n1. Render dashboard: \"New +\" ‚Üí \"PostgreSQL\"\n2. Sozlamalar:\n   - **Name**: `optommarket-db`\n   - **Database**: `optommarket`\n   - **User**: `optommarket_user`\n   - **Region**: Frankfurt\n   - **Plan**: Starter ($7/oy)\n\n### 4-qadam: Web Service yarating\n1. Dashboard: \"New +\" ‚Üí \"Web Service\"\n2. Sozlamalar:\n   - **Name**: `optommarket-uz`\n   - **Build Command**: `./build.sh`\n   - **Start Command**: `./start.sh`\n\n### 5-qadam: Environment Variables qo'shing\n```\nNODE_ENV=production\nPORT=10000\nDATABASE_URL=[PostgreSQL connection string]\nGOOGLE_AI_API_KEY=[ixtiyoriy - AI chat uchun]\nTELEGRAM_BOT_TOKEN=[ixtiyoriy - Telegram bot uchun]\n```\n\n## üí∞ Narxlar (oylik)\n\n| Plan | Web Service | PostgreSQL | Jami |\n|------|-------------|------------|------|\n| **Free** | $0 (750 soat) | $0 (90 kun) | **Bepul** |\n| **Starter** | $7 | $7 | **$14** |\n| **Professional** | $25 | $20 | **$45** |\n\n## üîó Foydali linklar\n\n- **Saytingiz URL'i**: `https://optommarket-uz.onrender.com`\n- **Health check**: `https://optommarket-uz.onrender.com/health`\n- **API health**: `https://optommarket-uz.onrender.com/api/health`\n\n## üõ†Ô∏è Deploy qilish buyruqlari\n\nRender avtomatik deploy qiladi, lekin manual ishga tushirish uchun:\n\n```bash\n# Local test\nnpm ci\nnpm run build\nnpm start\n\n# Production deploy (Render avtomatik)\ngit push origin main\n```\n\n## üìû Support\n\n**Muammo bo'lsa:**\n1. Render logs ni tekshiring: Dashboard ‚Üí Your Service ‚Üí Logs\n2. Environment variables to'g'ri ekanligini tekshiring\n3. Database connection ishlayotganini tekshiring\n\n**Telefon support**: +998 99 644 84 44 (OptomMarket admin)\n\n## ‚úÖ Deploy muvaffaqiyatli bo'lgandan keyin\n\n1. **Saytni tekshiring**: `https://optommarket-uz.onrender.com`\n2. **Admin panel**: `/admin` yo'li orqali (admin@example.com / admin123)\n3. **API test**: `/api/health` endpoint orqali\n4. **Ma'lumotlar**: Kategoriyalar va mahsulotlar ko'rinishi kerak\n\n## üîí Xavfsizlik maslahalari\n\n- API kalitlarni hech qachon code ga commit qilmang\n- Environment variables ni faqat Render dashboard orqali qo'shing\n- Database backup ni muntazam oling\n- SSL sertifikat avtomatik ishlaydi (Let's Encrypt)\n\n## üö® Tez-tez uchraydigan muammolar\n\n### Build muvaffaqiyatsiz\n**Sabab**: Dependencies yetishmayapti\n**Yechim**: `package.json` ni tekshiring\n\n### Database ulanmayapti\n**Sabab**: `DATABASE_URL` noto'g'ri\n**Yechim**: PostgreSQL connection string ni qayta copy qiling\n\n### 500 Server Error\n**Sabab**: Environment variables noto'g'ri\n**Yechim**: Render logs ni ko'ring va variables ni tekshiring\n\n---\n\n**üéâ Tabriklaymiz! Optombazar.uz platformangiz endi internetda!**\n\nDeploy qilish jarayonida savollar bo'lsa, DEPLOYMENT_GUIDE.md faylida batafsil ma'lumot mavjud.","size_bytes":3805},"build.js":{"content":"#!/usr/bin/env node\nimport { build } from 'esbuild';\nimport { execSync } from 'child_process';\n\n// Frontend ni build qilish\nconsole.log('Building frontend...');\nexecSync('npm run vite:build', { stdio: 'inherit' });\n\n// Backend ni vite dependencies larni exclud qilib build qilish\nconsole.log('Building backend...');\nawait build({\n  entryPoints: ['server/index.ts'],\n  bundle: true,\n  platform: 'node',\n  format: 'esm',\n  outdir: 'dist',\n  external: [\n    'vite',\n    '@vitejs/plugin-react', \n    '@replit/vite-plugin-cartographer',\n    '@replit/vite-plugin-runtime-error-modal'\n  ],\n  packages: 'external'\n});\n\nconsole.log('Build completed successfully!');","size_bytes":656},"build.sh":{"content":"#!/bin/bash\n# Render.com build script\n\n# Install dependencies\necho \"üöÄ Dependencielarni o'rnatish...\"\nnpm ci\n\n# Client qismini build qilish\necho \"üõ†Ô∏è Client qismini build qilish...\"\nnpm run build:client\n\n# Server qismini build qilish\necho \"üñ•Ô∏è Server qismini build qilish...\"\nnpm run build:server\n\n# Public papkasini yaratish va nusxalash\necho \"üìÇ Public fayllarini tayyorlash...\"\nmkdir -p dist/public\nif [ -d \"client/dist\" ]; then\n  cp -r client/dist/* dist/public/\nfi\n\n# .env faylini nusxalash\nif [ -f .env ]; then\n  echo \"‚öôÔ∏è .env faylini nusxalash...\"\n  cp .env dist/\nfi\n\necho \"‚úÖ Build muvaffaqiyatli yakunlandi!\"","size_bytes":634},"deploy.sh":{"content":"#!/bin/bash\n# Deployment script for Render.com - VITE-FREE VERSION\n\necho \"üöÄ Starting Vite-free deployment process...\"\n\n# Install dependencies\necho \"üì¶ Installing dependencies...\"\nnpm ci\n\n# Build the application using Vite-free build process\necho \"üî® Building application (Vite-free)...\"\n# Frontend build\necho \"Building frontend...\"\nnpx vite build\n\n# Backend build using production-specific entry point (NO VITE IMPORTS)\necho \"Building backend...\"\nnpx esbuild server/index.production.ts \\\n  --platform=node \\\n  --packages=external \\\n  --bundle \\\n  --format=esm \\\n  --outfile=dist/index.js\n\n# Database setup\necho \"üóÑÔ∏è Setting up database...\"\nif [ \"$NODE_ENV\" = \"production\" ]; then\n    echo \"Running database migrations...\"\n    npm run db:push\nfi\n\necho \"‚úÖ Vite-free deployment completed successfully!\"\necho \"üåê Application will be available at your Render URL\"\necho \"‚ÑπÔ∏è  This build is completely free of Vite dependencies in production\"","size_bytes":953},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"generate-vapid-keys.js":{"content":"import webpush from 'web-push';\n\n// Generate VAPID keys\nconst vapidKeys = webpush.generateVAPIDKeys();\n\nconsole.log('VAPID Keys Generated:');\nconsole.log('Public Key:', vapidKeys.publicKey);\nconsole.log('Private Key:', vapidKeys.privateKey);\nconsole.log('\\nAdd these to your Replit Secrets:');\nconsole.log('VAPID_PUBLIC_KEY =', vapidKeys.publicKey);\nconsole.log('VAPID_PRIVATE_KEY =', vapidKeys.privateKey);","size_bytes":407},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render-build.sh":{"content":"#!/bin/bash\nset -e\n\necho \"üöÄ Starting Render deployment with Vite-free build...\"\n\n# Install all dependencies\necho \"üì¶ Installing dependencies...\"\nnpm ci\n\n# Build frontend\necho \"üé® Building frontend...\"\nnpx vite build\n\n# Build backend using production entry point (NO VITE DEPENDENCIES)\necho \"‚öôÔ∏è  Building backend (Vite-free)...\"\nnpx esbuild server/index.production.ts \\\n  --platform=node \\\n  --packages=external \\\n  --bundle \\\n  --format=esm \\\n  --outfile=dist/index.js\n\necho \"‚úÖ Vite-free build completed for Render!\"\necho \"üìÅ Files ready in dist/ directory\"\n\n# List what was built\nls -la dist/\necho \"üìä Backend bundle size:\"\ndu -h dist/index.js","size_bytes":661},"render.yaml":{"content":"services:\n  - type: web\n    name: optombazar-uz\n    env: node\n    plan: starter\n    buildCommand: npm install && npx vite build && npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\n    startCommand: npm start\n    healthCheckPath: /health\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        fromDatabase:\n          name: optombazar-db\n          property: connectionString\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: GOOGLE_AI_API_KEY\n        sync: false\n      - key: TELEGRAM_BOT_TOKEN\n        sync: false\n      - key: VAPID_PUBLIC_KEY\n        sync: false\n      - key: VAPID_PRIVATE_KEY\n        sync: false\n      - key: PORT\n        value: 10000\n\ndatabases:\n  - name: optombazar-db\n    databaseName: optombazar\n    user: optombazar_user\n    plan: starter","size_bytes":871},"replit.md":{"content":"# Overview\n\nThis is a full-stack e-commerce marketplace application called Optombazar.uz, designed as a wholesale trading platform for Uzbekistan. The application provides a bilingual (Uzbek and Russian) interface for browsing categories, products, and facilitating wholesale transactions. It's built with a modern React frontend, Express.js backend, and uses PostgreSQL for data persistence through Drizzle ORM.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes (August 21, 2025)\n\n## Related Products System Implementation Completed\n- ‚úì Created `/api/products/:productId/related` endpoint for fetching similar products\n- ‚úì Implemented useRelatedProducts custom hook for frontend integration\n- ‚úì Added \"O'xshash mahsulotlar\" section to ProductDetailsPage\n- ‚úì Related products are filtered by same category and exclude main product\n- ‚úì Randomized selection limited to 4 products per request\n- ‚úì Added bilingual support (Uzbek/Russian) for related products section\n- ‚úì Successfully tested with actual product data from database\n- ‚úì Integrated with existing ProductCard component for consistent UI\n\n## Featured Products System Implementation Completed\n- ‚úì Added \"Bosh sahifada ko'rsatish\" checkbox to admin panel for marking products as featured\n- ‚úì Created dedicated `/api/products/featured` endpoint for home page\n- ‚úì Implemented \"Ommabop Mahsulotlar\" (Popular Products) section on home page\n- ‚úì Removed duplicate \"Afzalliklarimiz\" (Advantages) sections for cleaner design\n- ‚úì Added bilingual support for featured products display (Uzbek/Russian)\n- ‚úì Successfully tested with 3 featured products from database\n- ‚úì Improved home page layout with better content organization\n\n## AI Chatbot 2.0 Enhancement Completed\n- ‚úì Enhanced AI chatbot with intelligent contact form collection (name/phone)\n- ‚úì Integrated Telegram bot notifications for new conversations and messages\n- ‚úì Implemented intelligent responses using business context and product data\n- ‚úì Added complete dark mode support for chat widget interface\n- ‚úì Enhanced database schema with userName and userPhone fields\n- ‚úì Successfully tested Telegram integration with live notifications\n- ‚úì Improved chat UI with bilingual support and responsive design\n\n## Migration to Replit Environment Completed\n- ‚úì Successfully migrated project from Replit Agent to Replit environment\n- ‚úì All packages installed and configured properly\n- ‚úì Workflow restarted and running smoothly on port 5000\n- ‚úì Fixed language localization issues (removed English text from UI)\n- ‚úì Updated contact information throughout the application:\n  - Phone: +998996448444 (updated in header, footer, contact page)\n  - Email: akramjon2504@gmail.com (updated in header, footer, contact page)\n  - Address: Toshkent shahri, Uchtepa tumani, O'rikzor bozori\n- ‚úì Fixed language switcher display (changed \"uz Uz\" to \"üá∫üáø O'z\")\n- ‚úì Localized app store download buttons in footer\n\n## Migration Status\n- **Successfully completed migration to Replit**\n- **Application running on port 5000 with full functionality**\n- **All bilingual features (Uzbek/Russian) working correctly**\n- **Ready for further development and enhancements**\n\n## Previous Deployment Preparation\n- ‚úì Created comprehensive deployment configuration for Render.com\n- ‚úì Added health check endpoints (/health, /api/health) for monitoring\n- ‚úì Created production-ready Docker configuration\n- ‚úì Fixed seed data loading issues for production environment\n- ‚úì Generated deployment scripts (build.sh, deploy.sh, start.sh)\n- ‚úì Created bilingual deployment guide (English + Uzbek)\n- ‚úì Configured render.yaml for automatic deployment\n- ‚úì Added real data from actual Optombazar.uz website\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side application is built with **React 18** using TypeScript and follows a component-based architecture. Key architectural decisions include:\n\n- **State Management**: Uses TanStack Query (React Query) for server state management, providing automatic caching, background refetching, and optimistic updates\n- **Routing**: Implements client-side routing with Wouter, a lightweight alternative to React Router\n- **UI Framework**: Built on shadcn/ui components with Radix UI primitives, providing accessible and customizable components\n- **Styling**: Uses Tailwind CSS with CSS variables for theming, supporting a consistent design system\n- **Internationalization**: Custom language provider supporting Uzbek and Russian with localStorage persistence\n\n## Backend Architecture\nThe server uses **Express.js** with TypeScript in ESM format:\n\n- **API Design**: RESTful API endpoints organized under `/api` prefix with proper error handling and request logging\n- **Storage Layer**: Abstract storage interface (IStorage) with in-memory implementation for development, designed to be easily replaceable with database implementations\n- **Development Environment**: Vite integration for hot module replacement and development tooling\n\n## Data Storage Solutions\nThe application uses **PostgreSQL** as the primary database with **Drizzle ORM** for type-safe database operations:\n\n- **Schema Design**: Comprehensive schema supporting users, categories, products, orders, order items, blog posts, and chat messages with proper relationships\n- **Multilingual Support**: Database schema includes separate fields for Uzbek and Russian content (nameUz, nameRu, etc.)\n- **AI Chat Storage**: Chat messages are stored with session tracking for conversation history\n- **Migration Management**: Uses Drizzle Kit for schema migrations with configuration pointing to `./migrations` directory\n\n## Authentication and Authorization\nWhile authentication infrastructure is defined in the schema, the current implementation uses a basic role-based system:\n\n- **User Roles**: Supports customer, seller, and admin roles\n- **Session Management**: Prepared for PostgreSQL session storage using connect-pg-simple\n- **Security**: Framework in place for expanding authentication features\n\n## Key Features\n- **Multilingual Support**: Full Uzbek/Russian localization throughout the application\n- **Product Management**: Comprehensive product catalog with categories, pricing tiers (retail/wholesale), and inventory tracking\n- **Search Functionality**: Product search capabilities across multiple criteria\n- **AI Chat Assistant 2.0**: Google Gemini-powered intelligent chat widget with contact form collection, Telegram integration, and contextual business responses in Uzbek language\n- **Push Notifications**: Web push notification system with VAPID keys for user engagement\n- **SEO & Analytics**: Google Analytics 4 integration with comprehensive SEO monitoring dashboard\n- **Admin Analytics**: Real-time analytics dashboard with SEO metrics, Google Analytics data, and Search Console integration\n- **Marketing Tracking**: Google Tag Manager (GTM) integration with Facebook Pixel, UTM parameter tracking, and conversion monitoring\n- **Digital Marketing**: Complete advertising campaign tracking for Google Ads, Facebook, and Instagram with ROAS monitoring\n- **Responsive Design**: Mobile-first approach with responsive layouts\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini API**: Powers the AI chat assistant with natural language processing and contextual responses in Uzbek language\n\n## Database Services\n- **Neon Database**: Uses `@neondatabase/serverless` for PostgreSQL hosting, configured via DATABASE_URL environment variable\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n\n## Development Tools\n- **Vite**: Frontend build tool and development server with React plugin\n- **ESBuild**: Backend bundling for production deployment\n- **Replit Integration**: Development environment optimizations with runtime error handling and cartographer plugin\n\n## UI and Styling\n- **Radix UI**: Comprehensive collection of accessible UI primitives for complex components\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **shadcn/ui**: Pre-built component library built on Radix UI primitives\n- **Lucide React**: Icon library for consistent iconography\n\n## Utility Libraries\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation support via `@hookform/resolvers`\n- **Zod**: Runtime type validation integrated with Drizzle for schema validation\n- **date-fns**: Date manipulation and formatting utilities\n- **clsx & class-variance-authority**: Conditional CSS class management\n\n## Session and Storage\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **Drizzle-Zod**: Integration between Drizzle ORM and Zod for validation\n\nThe architecture is designed for scalability and maintainability, with clear separation of concerns between frontend and backend, and a flexible storage layer that can accommodate future growth and feature additions.","size_bytes":8966},"seed.ts":{"content":"import { db } from './server/db.js';\nimport { categories, products, users, blogPosts } from './shared/schema.js';\nimport bcrypt from 'bcrypt';\n\nasync function seedDatabase() {\n  console.log('üå± Ma\\'lumotlar bazasini to\\'ldirish boshlandi...');\n\n  try {\n    // Clear existing data\n    console.log('üóëÔ∏è Eski ma\\'lumotlarni tozalash...');\n    await db.delete(products);\n    await db.delete(categories);  \n    await db.delete(blogPosts);\n    await db.delete(users);\n\n    // Insert categories\n    console.log('üìÇ Kategoriyalarni qo\\'shish...');\n    const categoryData = [\n      {\n        id: 'polietilen-paketlar',\n        nameUz: 'Plastik paketlar',\n        nameRu: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã', \n        descriptionUz: 'Turli xil plastik paketlar: xarid uchun, oziq-ovqat uchun va boshqalar',\n        descriptionRu: '–†–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã: –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–µ',\n        slug: 'polietilen-paketlar',\n        imageUrl: 'https://optombazar.uz/image/cache/catalog/categories/polietilen-paketlar-500x500.jpg',\n        isActive: true\n      },\n      {\n        id: 'bir-martali-idishlar', \n        nameUz: 'Bir martali idishlar',\n        nameRu: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞',\n        descriptionUz: 'Plastik stakanchalar, likopchalar, vilka-qoshiqlar',\n        descriptionRu: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —Å—Ç–∞–∫–∞–Ω—ã, —Ç–∞—Ä–µ–ª–∫–∏, –≤–∏–ª–∫–∏-–ª–æ–∂–∫–∏',\n        slug: 'bir-martali-idishlar',\n        imageUrl: 'https://optombazar.uz/image/cache/catalog/categories/bir-martali-idishlar-500x500.jpg',\n        isActive: true\n      },\n      {\n        id: 'oziq-ovqat-konteynerlar',\n        nameUz: 'Oziq-ovqat konteynerlar', \n        nameRu: '–ü–∏—â–µ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã',\n        descriptionUz: 'Oziq-ovqat saqlash uchun konteynerlar',\n        descriptionRu: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤',\n        slug: 'oziq-ovqat-konteynerlar',\n        imageUrl: 'https://optombazar.uz/image/cache/catalog/categories/konteynerlar-500x500.jpg',\n        isActive: true\n      },\n      {\n        id: 'qogoz-mahsulotlar',\n        nameUz: 'Qog\\'oz mahsulotlar',\n        nameRu: '–ë—É–º–∞–∂–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è', \n        descriptionUz: 'Qog\\'oz paketlar, salfetka, rulon qog\\'ozlar',\n        descriptionRu: '–ë—É–º–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã, —Å–∞–ª—Ñ–µ—Ç–∫–∏, —Ä—É–ª–æ–Ω–Ω–∞—è –±—É–º–∞–≥–∞',\n        slug: 'qogoz-mahsulotlar',\n        imageUrl: 'https://optombazar.uz/image/cache/catalog/categories/qogoz-500x500.jpg',\n        isActive: true\n      },\n      {\n        id: 'tozalash-vositalari',\n        nameUz: 'Tozalash vositalari',\n        nameRu: '–ú–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞',\n        descriptionUz: 'Idish yuvish, kir yuvish va uy tozalash vositalari',\n        descriptionRu: '–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –º—ã—Ç—å—è –ø–æ—Å—É–¥—ã, —Å—Ç–∏—Ä–∫–∏ –∏ —É–±–æ—Ä–∫–∏ –¥–æ–º–∞',\n        slug: 'tozalash-vositalari',\n        imageUrl: 'https://optombazar.uz/image/cache/catalog/categories/tozalash-500x500.jpg',\n        isActive: true\n      }\n    ];\n\n    await db.insert(categories).values(categoryData);\n\n    // Insert admin user\n    console.log('üë§ Admin foydalanuvchisini qo\\'shish...');\n    const hashedPassword = await bcrypt.hash('admin123', 10);\n    await db.insert(users).values([\n      {\n        id: 'admin-user-1',\n        username: 'admin',\n        password: hashedPassword,\n        email: 'admin@optombazar.uz',\n        role: 'admin'\n      }\n    ]);\n\n    // Insert products\n    console.log('üõçÔ∏è Mahsulotlarni qo\\'shish...');\n    const productData = [\n      {\n        id: 'prod-real-1',\n        nameUz: '\"Louis Vuitton\" tasvirli paket 40x50 sm',\n        nameRu: '–ü–∞–∫–µ—Ç—ã —Å –≤—ã—Ä—É–±–Ω–æ–π —Ä—É—á–∫–æ–π Louis Vuitton 40-50 —Å–º',\n        descriptionUz: 'Yuqori sifatli polietilen paket, 50 mikron qalinlikda, 100 dona blokda',\n        descriptionRu: '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç, —Ç–æ–ª—â–∏–Ω–∞ 50 –º–∏–∫—Ä–æ–Ω, –≤ –±–ª–æ–∫–µ 100 —à—Ç—É–∫',\n        slug: 'pakety-s-vyrubnoy-ruchkoy-louis-vuitton-40-50-sm',\n        price: '1000.00',\n        wholesalePrice: '900.00',\n        categoryId: 'polietilen-paketlar',\n        sellerId: 'admin-user-1',\n        images: ['https://optombazar.uz/image/cache/catalog/products/2023/10/26/photo_2023-10-26_16-08-31-500x500.jpg'],\n        stockQuantity: 500,\n        minQuantity: 100,\n        unit: 'dona',\n        specifications: JSON.stringify({\n          \"O'lchami\": \"40x50 sm\",\n          \"Qalinligi\": \"50 mikron\", \n          \"Material\": \"Yuqori bosimli polietilen (LDPE)\",\n          \"Soni (blokda)\": \"100 dona\",\n          \"Ishlab chiqaruvchi\": \"O'zbekiston\"\n        }),\n        isActive: true,\n        isFeatured: true\n      },\n      {\n        id: 'prod-real-2',\n        nameUz: 'Oziq-ovqat uchun streych plyonka Casper 300 m',\n        nameRu: '–°—Ç—Ä–µ–π—á-–ø–ª–µ–Ω–∫–∞ Casper 300 –º',\n        descriptionUz: 'Oziq-ovqat mahsulotlarini saqlash uchun Casper brendi streych plyonka',\n        descriptionRu: '–°—Ç—Ä–µ–π—á-–ø–ª–µ–Ω–∫–∞ –±—Ä–µ–Ω–¥–∞ Casper –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',\n        slug: 'streych-plenka-casper-300-m',\n        price: '45000.00',\n        wholesalePrice: '42000.00',\n        categoryId: 'polietilen-paketlar',\n        sellerId: 'admin-user-1',\n        images: ['https://optombazar.uz/image/cache/catalog/products/2023/11/01/photo_2023-11-01_12-25-10-500x500.jpg'],\n        stockQuantity: 50,\n        minQuantity: 1,\n        unit: 'rulon',\n        specifications: JSON.stringify({\n          \"Uzunligi\": \"300 m\",\n          \"Eni\": \"29 sm\",\n          \"Qalinligi\": \"8 mikron\",\n          \"Brend\": \"Casper\",\n          \"Ishlab chiqaruvchi\": \"O'zbekiston\"\n        }),\n        isActive: true,\n        isFeatured: true\n      },\n      {\n        id: 'prod-real-3',\n        nameUz: 'Plastik bir martali stakan 200ml',\n        nameRu: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω 200–º–ª',\n        descriptionUz: 'Shaffof plastik stakan, 200ml hajmda, 100 dona paketda',\n        descriptionRu: '–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω, –æ–±—ä–µ–º 200–º–ª, –≤ —É–ø–∞–∫–æ–≤–∫–µ 100 —à—Ç—É–∫',\n        slug: 'plastik-bir-martali-stakan-200ml',\n        price: '25000.00',\n        wholesalePrice: '22000.00',\n        categoryId: 'bir-martali-idishlar',\n        sellerId: 'admin-user-1',\n        images: ['https://optombazar.uz/image/cache/catalog/products/2023/09/15/stakan-200ml-500x500.jpg'],\n        stockQuantity: 200,\n        minQuantity: 50,\n        unit: 'paket',\n        specifications: JSON.stringify({\n          \"Hajmi\": \"200 ml\",\n          \"Material\": \"PP (Polipropilen)\",\n          \"Rangi\": \"Shaffof\",\n          \"Soni\": \"100 dona/paket\",\n          \"Ishlab chiqaruvchi\": \"Turkiya\"\n        }),\n        isActive: true,\n        isFeatured: false\n      }\n    ];\n\n    await db.insert(products).values(productData);\n\n    console.log('üìù Blog postlari hozircha qo\\'shilmayapti - schema muammosi tufayli');\n\n    console.log('‚úÖ Ma\\'lumotlar bazasi muvaffaqiyatli to\\'ldirildi!');\n    console.log('üìä Qo\\'shildi:');\n    console.log(`   - ${categoryData.length} ta kategoriya`);\n    console.log(`   - ${productData.length} ta mahsulot`);  \n    console.log(`   - 1 ta admin foydalanuvchisi`);\n\n  } catch (error) {\n    console.error('‚ùå Xato:', error);\n    throw error;\n  }\n}\n\nseedDatabase()\n  .then(() => {\n    console.log('üéâ Seed jarayoni yakunlandi!');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('üí• Seed jarayonida xato:', error);\n    process.exit(1);\n  });","size_bytes":7588},"start.sh":{"content":"#!/bin/bash\n# Production start script\n\necho \"üöÄ Optombazar.uz production server ishga tushmoqda...\"\n\n# Kerakli environment variable'lar tekshiriladi\nif [ -z \"$DATABASE_URL\" ]; then\n    echo \"‚ùå XATOLIK: DATABASE_URL muhit o'zgaruvchisi kiritilmagan\"\n    exit 1\nfi\n\n# Portni sozlash\nexport PORT=${PORT:-10000}\n\n# Joriy muhit haqida ma'lumot\necho \"üåê Server $PORT portida ishga tushmoqda\"\necho \"üìä Muhit: $NODE_ENV\"\n\n# Dastur ishga tushirish\necho \"‚ö° Dastur ishga tushirilmoqda...\"\n\n# Fayl mavjudligini tekshirish\nif [ ! -f \"dist/index.js\" ]; then\n    echo \"‚ùå XATOLIK: dist/index.js fayli topilmadi. Iltimos, avval 'npm run build' ni ishga tushiring.\"\n    exit 1\nfi\n\n# Node.js orqali dasturni ishga tushirish\nnode --experimental-specifier-resolution=node dist/index.js","size_bytes":776},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom colors from the design\n        blue: {\n          50: \"#eff6ff\",\n          100: \"#dbeafe\", \n          200: \"#bfdbfe\",\n          300: \"#93c5fd\",\n          400: \"#60a5fa\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n          700: \"#1d4ed8\",\n          800: \"#1e40af\",\n          900: \"#1e3a8a\",\n        },\n        success: \"#059669\",\n        warning: \"#d97706\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3285},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":635},"scripts/build-production.sh":{"content":"#!/bin/bash\nset -e\n\necho \"Starting production build...\"\n\n# Frontend build\necho \"Building frontend...\"\nnpx vite build\n\n# Backend build using production-specific entry point\necho \"Building backend...\"\nnpx esbuild server/index.production.ts \\\n  --platform=node \\\n  --packages=external \\\n  --bundle \\\n  --format=esm \\\n  --outfile=dist/index.js\n\necho \"Production build completed successfully!\"","size_bytes":388},"server/database-storage.ts":{"content":"import { db } from \"./db\";\nimport { blogPosts, users, categories, products, orders, orderItems, cartItems, chatMessages } from \"@shared/schema\";\nimport { eq, like, or, desc } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport type { IStorage } from \"./storage\";\nimport type { \n  User, InsertUser, Category, InsertCategory, Product, InsertProduct, \n  Order, InsertOrder, OrderItem, InsertOrderItem, CartItem, InsertCartItem, \n  BlogPost, InsertBlogPost, ChatMessage, InsertChatMessage \n} from \"@shared/schema\";\n\nexport class DatabaseStorage implements IStorage {\n  // Blog Posts - PostgreSQL dan foydalanish\n  async getBlogPosts(): Promise<BlogPost[]> {\n    try {\n      const posts = await db.select().from(blogPosts)\n        .where(eq(blogPosts.isPublished, true))\n        .orderBy(desc(blogPosts.createdAt));\n      return posts;\n    } catch (error) {\n      console.error('Blog postlarni olishda xatolik:', error);\n      return [];\n    }\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    try {\n      const post = await db.select().from(blogPosts)\n        .where(eq(blogPosts.id, id))\n        .limit(1);\n      return post[0];\n    } catch (error) {\n      console.error('Blog postni olishda xatolik:', error);\n      return undefined;\n    }\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    try {\n      const post = await db.select().from(blogPosts)\n        .where(eq(blogPosts.slug, slug))\n        .limit(1);\n      return post[0];\n    } catch (error) {\n      console.error('Blog postni slug orqali olishda xatolik:', error);\n      return undefined;\n    }\n  }\n\n  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {\n    try {\n      const id = randomUUID();\n      const newPost = {\n        id,\n        title: insertPost.title,\n        content: insertPost.content,\n        excerpt: insertPost.excerpt || null,\n        imageUrl: insertPost.imageUrl || null,\n        slug: insertPost.slug,\n        tags: insertPost.tags || null,\n        language: insertPost.language || 'uz',\n        isPublished: insertPost.isPublished ?? true,\n        isAutoGenerated: insertPost.isAutoGenerated ?? false,\n        source: insertPost.source || 'admin',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(blogPosts).values(newPost);\n      console.log(`‚úÖ Blog post PostgreSQL ga saqlandi: ${newPost.title}`);\n      return newPost;\n    } catch (error) {\n      console.error('Blog post yaratishda xatolik:', error);\n      throw error;\n    }\n  }\n\n  async updateBlogPost(id: string, updates: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {\n    try {\n      const updatedPost = {\n        ...updates,\n        updatedAt: new Date()\n      };\n\n      await db.update(blogPosts)\n        .set(updatedPost)\n        .where(eq(blogPosts.id, id));\n\n      return this.getBlogPost(id);\n    } catch (error) {\n      console.error('Blog postni yangilashda xatolik:', error);\n      return undefined;\n    }\n  }\n\n  async deleteBlogPost(id: string): Promise<boolean> {\n    try {\n      await db.delete(blogPosts).where(eq(blogPosts.id, id));\n      return true;\n    } catch (error) {\n      console.error('Blog postni o\\'chirishda xatolik:', error);\n      return false;\n    }\n  }\n\n  // Boshqa metodlar uchun MemStorage fallback\n  private memStorage: any;\n  \n  constructor() {\n    // MemStorage ni async yuklash\n    this.initMemStorage();\n  }\n  \n  private async initMemStorage() {\n    const { MemStorage } = await import('./storage');\n    this.memStorage = new MemStorage();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    if (!this.memStorage) {\n      await this.initMemStorage();\n    }\n    return this.memStorage.getUser(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return this.memStorage.getUserByUsername(username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.memStorage.getUserByEmail(email);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    return this.memStorage.createUser(user);\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return this.memStorage.getCategories();\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.memStorage.getCategory(id);\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return this.memStorage.getCategoryBySlug(slug);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    return this.memStorage.createCategory(category);\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined> {\n    return this.memStorage.updateCategory(id, category);\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    return this.memStorage.deleteCategory(id);\n  }\n\n  async getProducts(categoryId?: string, featured?: boolean): Promise<Product[]> {\n    return this.memStorage.getProducts(categoryId, featured);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.memStorage.getProduct(id);\n  }\n\n  async getProductBySlug(slug: string): Promise<Product | undefined> {\n    return this.memStorage.getProductBySlug(slug);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    return this.memStorage.createProduct(product);\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    return this.memStorage.updateProduct(id, product);\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.memStorage.deleteProduct(id);\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return this.memStorage.searchProducts(query);\n  }\n\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    return this.memStorage.getCartItems(sessionId);\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    return this.memStorage.addToCart(cartItem);\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    return this.memStorage.updateCartItem(id, quantity);\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    return this.memStorage.removeFromCart(id);\n  }\n\n  async clearCart(sessionId: string): Promise<boolean> {\n    return this.memStorage.clearCart(sessionId);\n  }\n\n  async getOrders(userId?: string): Promise<Order[]> {\n    return this.memStorage.getOrders(userId);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return this.memStorage.getAllOrders();\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.memStorage.getOrder(id);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    return this.memStorage.createOrder(order);\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    return this.memStorage.updateOrder(id, updates);\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return this.memStorage.getOrderItems(orderId);\n  }\n\n  async addOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    return this.memStorage.addOrderItem(orderItem);\n  }\n\n  async searchAll(query: string): Promise<{ products: Product[]; blogPosts: BlogPost[] }> {\n    try {\n      console.log('üîç DatabaseStorage searchAll called with:', query);\n      \n      if (!this.memStorage) {\n        console.log('‚è≥ Initializing memStorage...');\n        await this.initMemStorage();\n      }\n      \n      console.log('üìû Calling memStorage.searchProducts');\n      const products = await this.memStorage.searchProducts(query);\n      console.log('üì¶ Products found:', products.length);\n      \n      // Blog postlarni PostgreSQL dan qidirish\n      const searchQuery = query.toLowerCase().trim();\n      let posts: any[] = [];\n      try {\n        posts = await db.select().from(blogPosts)\n          .where(\n            or(\n              like(blogPosts.title, `%${searchQuery}%`),\n              like(blogPosts.content, `%${searchQuery}%`)\n            )\n          );\n        console.log('üìù Blog posts found:', posts.length);\n      } catch (dbError) {\n        console.log('‚ö†Ô∏è Blog posts search failed, using empty array:', dbError);\n        posts = [];\n      }\n\n      console.log('üìä DatabaseStorage final results:', { productsFound: products.length, blogPostsFound: posts.length });\n      return { products, blogPosts: posts };\n    } catch (error) {\n      console.error('üí• DatabaseStorage search error:', error);\n      return { products: [], blogPosts: [] };\n    }\n  }\n\n  async getChatHistory(sessionId: string): Promise<ChatMessage[]> {\n    return this.memStorage.getChatHistory(sessionId);\n  }\n\n  async saveChatMessage(chatMessage: InsertChatMessage): Promise<ChatMessage> {\n    return this.memStorage.saveChatMessage(chatMessage);\n  }\n\n  async updateChatResponse(messageId: string, response: string): Promise<ChatMessage | undefined> {\n    return this.memStorage.updateChatResponse(messageId, response);\n  }\n\n  // Favorites methods\n  async getFavorites(userId: string): Promise<import(\"@shared/schema\").Favorite[]> {\n    if (!this.memStorage) {\n      await this.initMemStorage();\n    }\n    return this.memStorage.getFavorites(userId);\n  }\n\n  async addToFavorites(favorite: import(\"@shared/schema\").InsertFavorite): Promise<import(\"@shared/schema\").Favorite> {\n    if (!this.memStorage) {\n      await this.initMemStorage();\n    }\n    return this.memStorage.addToFavorites(favorite);\n  }\n\n  async removeFromFavorites(userId: string, productId: string): Promise<boolean> {\n    if (!this.memStorage) {\n      await this.initMemStorage();\n    }\n    return this.memStorage.removeFromFavorites(userId, productId);\n  }\n\n  async isFavorite(userId: string, productId: string): Promise<boolean> {\n    if (!this.memStorage) {\n      await this.initMemStorage();\n    }\n    return this.memStorage.isFavorite(userId, productId);\n  }\n}","size_bytes":9881},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// WebSocket konfiguratsiyasi sertifikat xatolarini hal qilish uchun\nneonConfig.webSocketConstructor = class extends ws {\n  constructor(url: string, protocols?: string | string[], options?: ws.ClientOptions) {\n    super(url, protocols, {\n      ...options,\n      rejectUnauthorized: false\n    });\n  }\n};\n\n// For development in Replit, provide fallback when DATABASE_URL is not accessible\nconst databaseUrl = process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  console.log(\"DATABASE_URL not found, application will use in-memory storage\");\n  // Create a dummy connection that won't be used since we'll use MemStorage\n  process.env.DATABASE_URL = \"postgresql://localhost:5432/dummy\";\n}\n\nexport const pool = new Pool({ connectionString: databaseUrl || process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":1006},"server/index.production.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { MemStorage } from \"./storage\";\nimport { db } from \"./db\";\nimport { startBlogScheduler } from \"./cron/blog-scheduler\";\nimport { getBotInfo } from \"./services/telegram-bot\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'fallback-secret-key-for-development',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false,\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      console.log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Database Storage yaratish (PostgreSQL blog posts uchun)\n  const { DatabaseStorage } = await import(\"./database-storage\");\n  const storage = new DatabaseStorage();\n  \n  const server = await registerRoutes(app, storage);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Production da faqat static files serve qilish\n  const { serveStatic } = await import(\"./static\");\n  serveStatic(app);\n\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, async () => {\n    console.log(`serving on port ${port}`);\n    \n    // AI va Telegram servislarini ishga tushirish\n    if (process.env.GOOGLE_AI_API_KEY && process.env.TELEGRAM_BOT_TOKEN) {\n      try {\n        console.log('Telegram bot ma\\'lumotlari tekshirilmoqda...');\n        await getBotInfo();\n        \n        console.log('Blog scheduler ishga tushirilmoqda...');\n        startBlogScheduler(storage);\n        \n      } catch (error) {\n        console.error('Servislarni ishga tushirishda xatolik:', error);\n      }\n    } else {\n      console.warn('GOOGLE_AI_API_KEY yoki TELEGRAM_BOT_TOKEN mavjud emas. AI va Telegram funksiyalari o\\'chirilgan.');\n    }\n  });\n})();","size_bytes":2909},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport RedisStore from 'connect-redis';\nimport { createClient } from 'redis';\nimport { registerRoutes } from \"./routes\";\nimport { DatabaseStorage } from \"./database-storage\";\nimport { startBlogScheduler } from \"./cron/blog-scheduler\";\nimport { initializeTelegramBot } from \"./services/telegram-bot\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Redis client yaratish\nlet redisClient = createClient({\n  url: process.env.REDIS_URL || 'redis://localhost:6379'\n});\n\nredisClient.on('error', (err) => console.error('Redis xatosi:', err));\n\n// Redis'ga ulanish\nconst connectRedis = async () => {\n  try {\n    await redisClient.connect();\n    console.log('Redis-ga muvaffaqiyatli ulanildi');\n  } catch (err) {\n    console.error('Redis-ga ulanishda xatolik:', err);\n    process.exit(1);\n  }\n};\n\n// Session configuration\nconst sessionConfig = {\n  store: new RedisStore({\n    client: redisClient,\n    prefix: 'session:',\n  }),\n  secret: process.env.SESSION_SECRET || 'fallback-secret-key-for-development',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production', // HTTPS bo'lsa true qo'ying\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'lax'\n  }\n};\n\napp.use(session(sessionConfig));\n\n// Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: any;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      console.log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Redis'ga ulanishni boshlash\n  await connectRedis();\n  \n  // Database Storage yaratish (PostgreSQL blog posts uchun)\n  const storage = new DatabaseStorage();\n  \n  const server = await registerRoutes(app, storage);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (process.env.NODE_ENV === \"development\") {\n    const { setupVite } = await import(\"./vite\");\n    await setupVite(app, server);\n  } else {\n    // Serve static files in production\n    const { serveStatic } = await import(\"./static\");\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = process.env.NODE_ENV === 'development' ? '127.0.0.1' : '0.0.0.0';\n  \n  server.listen(port, host, async () => {\n    console.log(`serving on ${host}:${port}`);\n    \n    // AI va Telegram servislarini ishga tushirish\n    if (process.env.GOOGLE_AI_API_KEY && process.env.TELEGRAM_BOT_TOKEN) {\n      try {\n        // Telegram bot ma'lumotlarini tekshirish\n        console.log('Telegram bot ma\\'lumotlari tekshirilmoqda...');\n        initializeTelegramBot();\n        \n        // Blog scheduler'ni ishga tushirish\n        console.log('Blog scheduler ishga tushirilmoqda...');\n        startBlogScheduler(storage);\n        \n      } catch (error) {\n        console.error('Servislarni ishga tushirishda xatolik:', error);\n      }\n    } else {\n      console.warn('GOOGLE_AI_API_KEY yoki TELEGRAM_BOT_TOKEN mavjud emas. AI va Telegram funksiyalari o\\'chirilgan.');\n    }\n  });\n})();\n","size_bytes":4316},"server/push.ts":{"content":"import { Router } from 'express';\nimport webpush from 'web-push';\n\nconst router = Router();\n\n// In-memory storage for push subscriptions (development only)\nconst subscriptionsStore = new Map<string, any>();\n\n// VAPID kalitlarini sozlash\nif (process.env.VAPID_PUBLIC_KEY && process.env.VAPID_PRIVATE_KEY) {\n  try {\n    webpush.setVapidDetails(\n      'mailto:support@optommarket.uz',\n      process.env.VAPID_PUBLIC_KEY,\n      process.env.VAPID_PRIVATE_KEY\n    );\n    console.log('VAPID kalitlari muvaffaqiyatli sozlandi.');\n  } catch (error) {\n    console.warn('VAPID kalitlari noto\\'g\\'ri. Push notification ishlamaydi:', error);\n  }\n} else {\n  console.warn('VAPID kalitlari topilmadi. Push notification ishlamaydi.');\n}\n\n// VAPID public key'ni frontend'ga qaytarish\nrouter.get('/vapid-public-key', (req, res) => {\n  if (!process.env.VAPID_PUBLIC_KEY) {\n    return res.status(500).json({ message: 'VAPID public key topilmadi' });\n  }\n  \n  res.json({ publicKey: process.env.VAPID_PUBLIC_KEY });\n});\n\n// Yangi obuna qo'shish\nrouter.post('/subscribe', async (req, res) => {\n  try {\n    const { subscription, userAgent } = req.body;\n    const userId = (req.session as any)?.user?.id || null;\n    \n    if (!subscription) {\n      return res.status(400).json({ message: 'Subscription obyekti majburiy' });\n    }\n\n    // In-memory storage'da saqlash\n    const subscriptionKey = subscription.endpoint;\n    const subscriptionData = {\n      id: Date.now().toString(),\n      userId,\n      subscription,\n      userAgent: userAgent || req.get('user-agent'),\n      isActive: true,\n      createdAt: new Date()\n    };\n    \n    subscriptionsStore.set(subscriptionKey, subscriptionData);\n\n    res.status(201).json({ \n      message: 'Push notification obunasi muvaffaqiyatli yaratildi',\n      subscription: subscriptionData \n    });\n  } catch (error) {\n    console.error('Push subscription xatoligi:', error);\n    res.status(500).json({ message: 'Obuna yaratishda xatolik yuz berdi' });\n  }\n});\n\n// Obunani o'chirish\nrouter.post('/unsubscribe', async (req, res) => {\n  try {\n    const { endpoint } = req.body;\n    \n    if (!endpoint) {\n      return res.status(400).json({ message: 'Endpoint majburiy' });\n    }\n\n    // In-memory storage'dan o'chirish\n    const subscription = subscriptionsStore.get(endpoint);\n    if (subscription) {\n      subscription.isActive = false;\n      subscriptionsStore.set(endpoint, subscription);\n    }\n\n    res.json({ message: 'Obuna muvaffaqiyatli o\\'chirildi' });\n  } catch (error) {\n    console.error('Push unsubscribe xatoligi:', error);\n    res.status(500).json({ message: 'Obunani o\\'chirishda xatolik yuz berdi' });\n  }\n});\n\n// Admin: barcha obunachilarga xabar yuborish\nexport async function sendNotificationToAll(payload: {\n  title: string;\n  body: string;\n  icon?: string;\n  url?: string;\n  tag?: string;\n}) {\n  try {\n    if (!process.env.VAPID_PUBLIC_KEY || !process.env.VAPID_PRIVATE_KEY) {\n      console.warn('VAPID kalitlari yo\\'q, push notification yuborilmaydi');\n      return;\n    }\n\n    // Barcha faol obunalarni olamiz\n    const subscriptions = Array.from(subscriptionsStore.values()).filter(sub => sub.isActive);\n\n    if (subscriptions.length === 0) {\n      console.log('Faol obunachalar topilmadi');\n      return;\n    }\n\n    const notificationPayload = JSON.stringify({\n      title: payload.title,\n      body: payload.body,\n      icon: payload.icon || '/favicon.ico',\n      url: payload.url || '/',\n      tag: payload.tag || 'optombazar-notification',\n      data: {\n        url: payload.url || '/',\n        timestamp: Date.now(),\n      }\n    });\n\n    // Har bir obunachiga push notification yuboramiz\n    const sendPromises = subscriptions.map(async (sub) => {\n      try {\n        await webpush.sendNotification(sub.subscription, notificationPayload);\n        console.log(`Push notification yuborildi: ${sub.id}`);\n      } catch (error: any) {\n        console.error(`Push notification yuborishda xatolik (${sub.id}):`, error);\n        \n        // Agar endpoint mavjud bo'lmasa yoki muddati o'tgan bo'lsa, obunani o'chiramiz\n        if (error.statusCode === 410 || error.statusCode === 404) {\n          sub.isActive = false;\n          subscriptionsStore.set(sub.subscription.endpoint, sub);\n          console.log(`Yaroqsiz obuna o'chirildi: ${sub.id}`);\n        }\n      }\n    });\n\n    await Promise.all(sendPromises);\n    console.log(`${subscriptions.length} obunachiga push notification yuborildi`);\n  } catch (error) {\n    console.error('Push notification yuborishda umumiy xatolik:', error);\n  }\n}\n\n// Test notification yuborish\nrouter.post('/send', async (req, res) => {\n  try {\n    const { title, body, url, icon, tag } = req.body;\n    \n    if (!title || !body) {\n      return res.status(400).json({ message: 'Title va body majburiy' });\n    }\n\n    // Barcha faol obunachilarga yuborish\n    await sendNotificationToAll({\n      title,\n      body,\n      icon: icon || '/icon-192x192.png',\n      url: url || '/',\n      tag: tag || 'optombazar-notification',\n    });\n\n    // Obunchilar sonini qaytarish\n    const subscriptions = Array.from(subscriptionsStore.values()).filter(sub => sub.isActive);\n\n    res.json({ \n      message: 'Bildirishnoma barcha obunachilarga yuborildi',\n      successCount: subscriptions.length \n    });\n  } catch (error) {\n    console.error('Push notification yuborishda xatolik:', error);\n    res.status(500).json({ message: 'Bildirishnoma yuborishda xatolik yuz berdi' });\n  }\n});\n\n// Subscribers count endpoint\nrouter.get('/subscribers-count', async (req, res) => {\n  try {\n    const subscriptions = Array.from(subscriptionsStore.values()).filter(sub => sub.isActive);\n    res.json({ count: subscriptions.length });\n  } catch (error) {\n    console.error('Subscribers count olishda xatolik:', error);\n    res.status(500).json({ message: 'Subscribers count olishda xatolik' });\n  }\n});\n\nexport default router;\n","size_bytes":5865},"server/realData.ts":{"content":"// Real Optombazar.uz data - ESM compatible version\nexport const realCategories = [\n  // Main categories\n  {\n    id: \"polietilen-paketlar\",\n    nameUz: \"Plastik paketlar\",\n    nameRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã\",\n    descriptionUz: \"Har xil o'lcham va qalinlikdagi polietilen paketlar\",\n    descriptionRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ç–æ–ª—â–∏–Ω\",\n    slug: \"polietilen-paketlar\",\n    image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Package\",\n    parentId: null,\n    isActive: true,\n    createdAt: new Date()\n  },\n  {\n    id: \"bir-martali-idishlar\",\n    nameUz: \"Bir martali ishlatiladigan idishlar\",\n    nameRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞\",\n    descriptionUz: \"Plastik va qog'ozdan yasalgan bir martali idishlar\",\n    descriptionRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ –∏–∑ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –±—É–º–∞–≥–∏\",\n    slug: \"bir-martali-idishlar\",\n    image: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"UtensilsCrossed\",\n    parentId: null,\n    isActive: true,\n    createdAt: new Date()\n  },\n  {\n    id: \"uy-kimyoviy-moddalari\",\n    nameUz: \"Uy kimyoviy moddalari\",\n    nameRu: \"–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è\",\n    descriptionUz: \"Tozalash va parvarish uchun kimyoviy vositalar\",\n    descriptionRu: \"–•–∏–º–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏ –∏ —É—Ö–æ–¥–∞\",\n    slug: \"uy-kimyoviy-moddalari\",\n    image: \"https://images.unsplash.com/photo-1563453392212-326f5e854473?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Sparkles\",\n    parentId: null,\n    isActive: true,\n    createdAt: new Date()\n  },\n  {\n    id: \"elektronika\",\n    nameUz: \"Elektronika\",\n    nameRu: \"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\",\n    descriptionUz: \"Maishiy texnika va elektron qurilmalar\",\n    descriptionRu: \"–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\",\n    slug: \"elektronika\",\n    image: \"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Smartphone\",\n    parentId: null,\n    isActive: true,\n    createdAt: new Date()\n  },\n  {\n    id: \"kiyim-kechak\",\n    nameUz: \"Kiyim-kechak\",\n    nameRu: \"–û–¥–µ–∂–¥–∞\",\n    descriptionUz: \"Erkaklar, ayollar va bolalar kiyimlari\",\n    descriptionRu: \"–ú—É–∂—Å–∫–∞—è, –∂–µ–Ω—Å–∫–∞—è –∏ –¥–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞\",\n    slug: \"kiyim-kechak\",\n    image: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Shirt\",\n    parentId: null,\n    isActive: true,\n    createdAt: new Date()\n  }\n];\n\nexport const realProducts = [\n  {\n    id: \"prod-real-1\",\n    nameUz: \"\\\"Louis Vuitton\\\" tasvirli paket 40x50 sm\",\n    nameRu: \"–ü–∞–∫–µ—Ç—ã —Å –≤—ã—Ä—É–±–Ω–æ–π —Ä—É—á–∫–æ–π Louis Vuitton 40-50 —Å–º\",\n    descriptionUz: \"Yuqori sifatli polietilen paket, 50 mikron qalinlikda, 100 dona blokda\",\n    descriptionRu: \"–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç, —Ç–æ–ª—â–∏–Ω–∞ 50 –º–∏–∫—Ä–æ–Ω, –≤ –±–ª–æ–∫–µ 100 —à—Ç—É–∫\",\n    slug: \"pakety-s-vyrubnoy-ruchkoy-louis-vuitton-40-50-sm\",\n    price: \"1000.00\",\n    wholesalePrice: \"900.00\",\n    categoryId: \"polietilen-paketlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://optombazar.uz/image/cache/catalog/products/2023/10/26/photo_2023-10-26_16-08-31-500x500.jpg\"],\n    stockQuantity: 500,\n    minQuantity: 100,\n    unit: \"dona\",\n    specifications: JSON.stringify({\n      \"O'lchami\": \"40x50 sm\",\n      \"Qalinligi\": \"50 mikron\",\n      \"Material\": \"Yuqori bosimli polietilen (LDPE)\",\n      \"Soni (blokda)\": \"100 dona\",\n      \"Ishlab chiqaruvchi\": \"O'zbekiston\"\n    }),\n    videoUrl: null,\n    isActive: true,\n    isFeatured: true,\n    createdAt: new Date()\n  },\n  {\n    id: \"prod-real-2\",\n    nameUz: \"Oziq-ovqat uchun streych plyonka Casper 300 m\",\n    nameRu: \"–°—Ç—Ä–µ–π—á-–ø–ª–µ–Ω–∫–∞ Casper 300 –º\",\n    descriptionUz: \"Oziq-ovqat mahsulotlarini saqlash uchun Casper brendi streych plyonka\",\n    descriptionRu: \"–°—Ç—Ä–µ–π—á-–ø–ª–µ–Ω–∫–∞ –±—Ä–µ–Ω–¥–∞ Casper –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\",\n    slug: \"streych-plenka-casper-300-m\",\n    price: \"45000.00\",\n    wholesalePrice: \"42000.00\",\n    categoryId: \"polietilen-paketlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://optombazar.uz/image/cache/catalog/products/2023/11/01/photo_2023-11-01_12-25-10-500x500.jpg\"],\n    stockQuantity: 50,\n    minQuantity: 1,\n    unit: \"rulon\",\n    specifications: JSON.stringify({\n      \"Uzunligi\": \"300 m\",\n      \"Eni\": \"29 sm\",\n      \"Qalinligi\": \"8 mikron\",\n      \"Brend\": \"Casper\",\n      \"Ishlab chiqaruvchi\": \"O'zbekiston\"\n    }),\n    videoUrl: null,\n    isActive: true,\n    isFeatured: true,\n    createdAt: new Date()\n  },\n  {\n    id: \"prod-real-3\",\n    nameUz: \"Plastik bir martali stakan 200ml\",\n    nameRu: \"–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω 200–º–ª\",\n    descriptionUz: \"Shaffof plastikdan yasalgan bir martali stakan\",\n    descriptionRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω –∏–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –ø–ª–∞—Å—Ç–∏–∫–∞\",\n    slug: \"plastik-bir-martali-stakan-200ml\",\n    price: \"12000.00\",\n    wholesalePrice: \"11000.00\",\n    categoryId: \"bir-martali-idishlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"],\n    stockQuantity: 1000,\n    minQuantity: 50,\n    unit: \"paket\",\n    specifications: JSON.stringify({\n      \"Hajmi\": \"200ml\",\n      \"Material\": \"PP plastik\",\n      \"Soni (paketda)\": \"50 dona\",\n      \"Ranglar\": \"Shaffof\"\n    }),\n    videoUrl: null,\n    isActive: true,\n    isFeatured: true,\n    createdAt: new Date()\n  }\n];\n\nexport const realBlogPosts = [\n  {\n    id: \"blog-real-1\",\n    title: \"Moliyaviy savodxonlik bo'yicha to'liq tushuncha\",\n    content: `Moliyaviy savodxonlik - bu shaxsning o'z moliyaviy resurslarini samarali boshqarish, investitsiya qilish va moliyaviy xavflardan himoyalanish bo'yicha bilim va ko'nikmalar majmuasidir.\n\nBu maqolada moliyaviy savodxonlikning asosiy printsiplari, ahamiyati va uni oshirish yo'llari haqida batafsil ma'lumot beriladi.\n\n## Moliyaviy savodxonlikning asosiy qismlari:\n\n1. **Byudjet tuzish va nazorat qilish**\n2. **Jamg'arish va investitsiya**\n3. **Qarzlarni boshqarish**\n4. **Sug'urta va xavfsizlik**\n5. **Pensiya rejalashtirish**\n\nMoliyaviy savodxonlik bizning kundalik hayotimizda muhim rol o'ynaydi va kelajakda barqaror moliyaviy holatga erishishimizga yordam beradi.`,\n    excerpt: \"Moliyaviy savodxonlik haqida bilish kerak bo'lgan barcha narsalar\",\n    imageUrl: \"https://optombazar.uz/image/cache/catalog/blog/2023/11/04/moliyaviy-savodxonlik-haqida-toliq-tushuncha-750x422.png\",\n    slug: \"moliyaviy-savodxonlik-bo-yicha-to-liq-tushuncha\",\n    tags: [\"moliya\", \"savodxonlik\", \"investitsiya\", \"byudjet\"],\n    language: \"uz\",\n    isPublished: true,\n    isAutoGenerated: false,\n    source: \"admin\",\n    createdAt: new Date(),\n    updatedAt: new Date()\n  }\n];","size_bytes":7102},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { SitemapGenerator } from \"./services/sitemap-generator\";\nimport { DatabaseStorage } from \"./database-storage\";\nimport { insertProductSchema, insertCategorySchema, insertOrderSchema, insertCartItemSchema, insertUserSchema, insertBlogPostSchema, insertChatMessageSchema, type Product, type Category } from \"@shared/schema\";\nimport { adminAuth } from \"./middleware/adminAuth\";\nimport { registerAITestRoutes } from \"./routes/ai-test\";\nimport { ActivityLogger } from \"./utils/activityLogger\";\nimport { registerReportsRoutes } from \"./routes/admin/reports\";\nimport { registerAutomationRoutes } from \"./routes/admin/automation\";\nimport discountsRouter from \"./routes/discounts\";\nimport favoritesRouter from \"./routes/favorites\";\nimport pushRouter from \"./push\";\nimport analyticsRouter from \"./routes/analytics\";\nimport marketingRouter from \"./routes/marketing\";\n\n// Extend Express Request type for session\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\n// Helper function to send Telegram notifications\nasync function sendTelegramNotification(message: string): Promise<void> {\n  try {\n    const botToken = process.env.TELEGRAM_BOT_TOKEN;\n    const chatId = process.env.TELEGRAM_CHAT_ID;\n    \n    if (!botToken || !chatId) {\n      console.warn('Telegram credentials not configured');\n      return;\n    }\n\n    // Clean chat ID to extract numeric part if there's extra text\n    const cleanChatId = chatId.replace(/[^-0-9]/g, '');\n    console.log('Original chat ID:', chatId);\n    console.log('Cleaned chat ID:', cleanChatId);\n    \n    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        chat_id: cleanChatId,\n        text: message,\n        parse_mode: 'HTML'\n      })\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Telegram notification failed:', errorText);\n      console.error('Bot Token length:', botToken?.length);\n      console.error('Chat ID:', chatId);\n    } else {\n      console.log('Telegram notification sent successfully');\n    }\n  } catch (error) {\n    console.error('Telegram notification error:', error);\n  }\n}\n\n// Helper function to build context for intelligent responses\nasync function buildChatContext(userMessage: string, storage: any): Promise<string> {\n  try {\n    // Get categories and products for context\n    const categories = await storage.getCategories();\n    const products = await storage.getProducts();\n    \n    let context = \"Bizning platformamizda quyidagi kategoriyalar mavjud:\\n\";\n    \n    categories.forEach((category: Category) => {\n      context += `- ${category.nameUz} (${category.nameRu}): ${category.descriptionUz || ''}\\n`;\n    });\n    \n    // Add product information if user asks about specific products\n    const lowerMessage = userMessage.toLowerCase();\n    if (lowerMessage.includes('paket') || lowerMessage.includes('–ø–∞–∫–µ—Ç')) {\n      const packageProducts = products.filter((product: Product) => \n        product.categoryId === 'polietilen-paketlar'\n      ).slice(0, 5);\n      \n      if (packageProducts.length > 0) {\n        context += \"\\nPolietilen paketlar:\\n\";\n        packageProducts.forEach((product: Product) => {\n          context += `- ${product.nameUz}: ${product.wholesalePrice} so'm (minimal: ${product.minQuantity || 1} ${product.unit})\\n`;\n        });\n      }\n    }\n    \n    return context;\n  } catch (error) {\n    console.error('Context building error:', error);\n    return \"Bizning platformamizda turli xil ulgurji mahsulotlar mavjud.\";\n  }\n}\n\n// Helper function to generate intelligent AI response\nasync function generateIntelligentResponse(userMessage: string, context: string): Promise<string> {\n  try {\n    const apiKey = process.env.GOOGLE_AI_API_KEY;\n    if (!apiKey) {\n      throw new Error('GOOGLE_AI_API_KEY environment variable is not set');\n    }\n\n    const prompt = `Sen Optombazar.uz yordamchisisan. Javoblaringni qisqa va 2-3 gapdan oshirma. \n\nO'zbek tilida salom berish: \"Salam!\" (Salom! emas)\nKontekst: ${context}\n\nMijoz savoli: ${userMessage}\n\nJavobingiz o'zbek tilida bo'lsin va qisqa, aniq bo'lsin.`;\n\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{ text: prompt }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 1,\n          topP: 1,\n          maxOutputTokens: 200, // Shorter responses\n        },\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Gemini API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.candidates?.[0]?.content?.parts?.[0]?.text || \"Kechirasiz, hozir javob bera olmayapman.\";\n  } catch (error) {\n    console.error('Intelligent response error:', error);\n    return \"Kechirasiz, texnik xatolik tufayli javob bera olmayapman. Iltimos keyinroq urinib ko'ring.\";\n  }\n}\n\n// Helper function to generate AI response using Google Gemini\nasync function generateAIResponse(userMessage: string): Promise<string> {\n  try {\n    const apiKey = process.env.GOOGLE_AI_API_KEY;\n    if (!apiKey) {\n      throw new Error('GOOGLE_AI_API_KEY environment variable is not set');\n    }\n\n    const prompt = `Siz Optombazar.uz ulgurji savdo platformasining yordamchisisiz. Ushbu platforma O ªzbekistonda ulgurji mahsulotlar bilan savdo qiladi.\n\nPlatforma haqida ma'lumot:\n- Polietilen paketlar, plastik mahsulotlar, qishloq xo'jaligi va oziq-ovqat mahsulotlari mavjud\n- Ulgurji narxlarda mahsulotlar sotiladi\n- Minimal buyurtma miqdori mavjud\n- Saytda blog bo'limi ham bor\n- Foydalanuvchilar ro'yxatdan o'tish va buyurtma berish imkoniyati bor\n\nQuyidagi savolga do'stona va foydali javob bering. Javobingiz o'zbek tilida bo'lsin:\n\n${userMessage}`;\n\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 1,\n          topP: 1,\n          maxOutputTokens: 1024,\n        },\n        safetySettings: [\n          {\n            category: \"HARM_CATEGORY_HARASSMENT\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          },\n          {\n            category: \"HARM_CATEGORY_HATE_SPEECH\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          },\n          {\n            category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          },\n          {\n            category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n            threshold: \"BLOCK_MEDIUM_AND_ABOVE\"\n          }\n        ]\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n      throw new Error('Invalid response from Gemini API');\n    }\n\n    return data.candidates[0].content.parts[0].text || \"Kechirasiz, hozir javob bera olmayapman. Iltimos, keyinroq urinib ko'ring.\";\n  } catch (error) {\n    console.error('Error generating AI response:', error);\n    return \"Kechirasiz, hozir texnik xatolik tufayli javob bera olmayapman. Iltimos, keyinroq urinib ko'ring yoki to'g'ridan-to'g'ri biz bilan bog'laning.\";\n  }\n}\n\nexport async function registerRoutes(app: Express, customStorage?: any): Promise<Server> {\n  // Storage instance ni ishlatish (agar berilgan bo'lsa)\n  const activeStorage = customStorage || storage;\n  \n  // Initialize activity logger\n  const activityLogger = new ActivityLogger(activeStorage);\n\n  // Health check endpoints for deployment monitoring\n  app.get(\"/health\", (req, res) => {\n    res.status(200).json({ \n      status: \"healthy\", \n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV || 'development'\n    });\n  });\n\n  app.get(\"/api/health\", (req, res) => {\n    res.status(200).json({ \n      status: \"healthy\", \n      api: \"operational\",\n      timestamp: new Date().toISOString() \n    });\n  });\n\n  // Authentication endpoints\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password, phone } = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUserByEmail = await activeStorage.getUserByEmail(email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"User with this email already exists\" });\n      }\n      \n      const existingUserByUsername = await activeStorage.getUserByUsername(username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      // Create user\n      const user = await activeStorage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        phone: phone || null,\n        role: \"customer\"\n      });\n      \n      // Auto-login after registration\n      req.session.userId = user.id;\n      \n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json({ message: \"User registered successfully\", user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Registration failed\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n  \n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n      \n      // Find user by email\n      const user = await activeStorage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Verify password\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      // Create session\n      req.session.userId = user.id;\n      \n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ message: \"Login successful\", user: userWithoutPassword });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n  \n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Logout failed\" });\n        }\n        res.clearCookie('connect.sid'); // Default session cookie name\n        res.json({ message: \"Logout successful\" });\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n  \n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await activeStorage.getUser(req.session.userId);\n      if (!user) {\n        req.session.userId = undefined; // Clear invalid session\n        return res.status(401).json({ message: \"User not found\" });\n      }\n      \n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user info\" });\n    }\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await activeStorage.getCategories();\n      \n      // Build hierarchical structure\n      const categoriesMap = new Map();\n      const rootCategories: any[] = [];\n      \n      // First pass: create map of all categories\n      categories.forEach((category: Category) => {\n        categoriesMap.set(category.slug, { ...category, children: [] });\n      });\n      \n      // Second pass: build hierarchy\n      categories.forEach((category: Category) => {\n        const categoryWithChildren = categoriesMap.get(category.slug);\n        if (category.parentId) {\n          const parent = categoriesMap.get(category.parentId);\n          if (parent) {\n            parent.children.push(categoryWithChildren);\n          } else {\n            // If parent not found, treat as root\n            rootCategories.push(categoryWithChildren);\n          }\n        } else {\n          rootCategories.push(categoryWithChildren);\n        }\n      });\n      \n      res.json(rootCategories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await activeStorage.getCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { categoryId, featured, search } = req.query;\n      \n      let products;\n      if (search) {\n        products = await activeStorage.searchProducts(search as string);\n      } else {\n        products = await activeStorage.getProducts(\n          categoryId as string,\n          featured === 'true' ? true : undefined\n        );\n      }\n      \n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Featured products endpoint for homepage - Must be before :slug route\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const products = await activeStorage.getProducts(undefined, true);\n      res.json(products.slice(0, 8)); // Limit to 8 featured products\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch featured products\" });\n    }\n  });\n\n  // Related products endpoint - Must be before :slug route\n  app.get(\"/api/products/:productId/related\", async (req, res) => {\n    try {\n      const productId = req.params.productId;\n      \n      // Get the main product to find its category\n      const mainProduct = await activeStorage.getProduct(productId);\n      if (!mainProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      // Get products from the same category, excluding the main product\n      const allProductsInCategory = await activeStorage.getProducts(mainProduct.categoryId);\n      const relatedProducts = allProductsInCategory\n        .filter((product: Product) => product.id !== productId)\n        .sort(() => Math.random() - 0.5) // Randomize\n        .slice(0, 4); // Limit to 4 products\n      \n      res.json(relatedProducts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch related products\" });\n    }\n  });\n\n  app.get(\"/api/products/:slug\", async (req, res) => {\n    try {\n      // Try to get by slug first\n      const product = await activeStorage.getProductBySlug(req.params.slug);\n      if (product) {\n        return res.json(product);\n      }\n      \n      // Fallback to ID if slug not found\n      const productById = await activeStorage.getProduct(req.params.slug);\n      if (!productById) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(productById);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Cart endpoints\n  app.get(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      const cartItems = await activeStorage.getCartItems(sessionId);\n      \n      // Populate with product details\n      const cartWithProducts = await Promise.all(\n        cartItems.map(async (item: any) => {\n          const product = await activeStorage.getProduct(item.productId);\n          return {\n            ...item,\n            product\n          };\n        })\n      );\n      \n      res.json(cartWithProducts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      const cartData = insertCartItemSchema.parse({\n        ...req.body,\n        sessionId\n      });\n      \n      const cartItem = await activeStorage.addToCart(cartData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to add to cart\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/cart/:itemId\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      if (!quantity || quantity <= 0) {\n        return res.status(400).json({ message: \"Invalid quantity\" });\n      }\n      \n      const updatedItem = await activeStorage.updateCartItem(req.params.itemId, quantity);\n      if (!updatedItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      \n      res.json(updatedItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:itemId\", async (req, res) => {\n    try {\n      const success = await activeStorage.removeFromCart(req.params.itemId);\n      if (!success) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove cart item\" });\n    }\n  });\n\n  // Orders\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      // Associate order with logged-in user if authenticated\n      const userId = req.session.userId || req.body.userId;\n      const orderData = insertOrderSchema.parse({\n        ...req.body,\n        userId: userId || 'anonymous'\n      });\n      const order = await activeStorage.createOrder(orderData);\n      \n      // Add order items if provided\n      if (req.body.items && Array.isArray(req.body.items)) {\n        for (const item of req.body.items) {\n          await activeStorage.addOrderItem({\n            orderId: order.id,\n            productId: item.productId,\n            quantity: item.quantity,\n            unitPrice: item.unitPrice,\n            totalPrice: item.totalPrice,\n          });\n        }\n      }\n      \n      // Clear cart after successful order\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      await activeStorage.clearCart(sessionId);\n      \n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create order\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Protected endpoint: Get orders for authenticated user only\n  app.get(\"/api/my-orders\", async (req, res) => {\n    try {\n      // Check if user is authenticated\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Ruxsat yo'q. Tizimga kirish talab qilinadi.\" });\n      }\n      \n      const orders = await activeStorage.getOrders(req.session.userId);\n      \n      // Populate each order with its items\n      const ordersWithItems = await Promise.all(\n        orders.map(async (order: any) => {\n          const items = await activeStorage.getOrderItems(order.id);\n          \n          // Populate items with product details\n          const itemsWithProducts = await Promise.all(\n            items.map(async (item: any) => {\n              const product = await activeStorage.getProduct(item.productId);\n              return {\n                ...item,\n                product\n              };\n            })\n          );\n          \n          return {\n            ...order,\n            items: itemsWithProducts\n          };\n        })\n      );\n      \n      res.json(ordersWithItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Buyurtmalar tarixini olishda xatolik\" });\n    }\n  });\n\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const orders = await activeStorage.getOrders(userId as string);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const order = await activeStorage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      const items = await activeStorage.getOrderItems(order.id);\n      res.json({ ...order, items });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  // Contact form endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const { name, email, phone, company, message } = req.body;\n      \n      if (!name || !phone || !message) {\n        return res.status(400).json({ message: \"Name, phone and message are required\" });\n      }\n      \n      // Save contact message to database\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      const contactData = {\n        sessionId,\n        userName: name,\n        userPhone: phone,\n        userEmail: email || null,\n        message: message,\n        metadata: company ? { company } : null\n      };\n      \n      const savedMessage = await activeStorage.saveChatMessage(contactData);\n      \n      // Log the contact activity\n      await activityLogger.logActivity(req, {\n        activityType: 'contact_form',\n        targetId: savedMessage.id,\n        targetType: 'form',\n        metadata: { name, phone, company: company || null }\n      });\n      \n      // Send Telegram notification to admin\n      const notificationText = `\nüîî <b>Yangi kontakt so'rovi</b>\n\nüë§ <b>Ism:</b> ${name}\nüìû <b>Telefon:</b> ${phone}\n${email ? `üìß <b>Email:</b> ${email}\\n` : ''}${company ? `üè¢ <b>Kompaniya:</b> ${company}\\n` : ''}\nüí¨ <b>Xabar:</b> ${message}\n\n‚è∞ <b>Vaqt:</b> ${new Date().toLocaleString('uz-UZ')}\n      `;\n      \n      await sendTelegramNotification(notificationText);\n      \n      res.status(201).json({ \n        message: \"Contact form submitted successfully\",\n        id: savedMessage.id \n      });\n    } catch (error) {\n      console.error('Contact form error:', error);\n      res.status(500).json({ message: \"Failed to submit contact form\" });\n    }\n  });\n\n  // Admin APIs - Protected with adminAuth middleware\n  app.get(\"/api/admin/products\", adminAuth, async (req, res) => {\n    try {\n      const products = await activeStorage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Mahsulotlarni olishda xatolik\" });\n    }\n  });\n\n  app.post(\"/api/admin/products\", adminAuth, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await activeStorage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Mahsulot yaratishda xatolik\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/admin/products/:id\", adminAuth, async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await activeStorage.updateProduct(req.params.id, productData);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Mahsulot topilmadi\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Mahsulotni yangilashda xatolik\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", adminAuth, async (req, res) => {\n    try {\n      const success = await activeStorage.deleteProduct(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Mahsulot topilmadi\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Mahsulotni o'chirishda xatolik\" });\n    }\n  });\n\n  app.get(\"/api/admin/orders\", adminAuth, async (req, res) => {\n    try {\n      const orders = await activeStorage.getAllOrders();\n      \n      // Populate each order with its items and customer info\n      const ordersWithDetails = await Promise.all(\n        orders.map(async (order: any) => {\n          const items = await activeStorage.getOrderItems(order.id);\n          \n          // Populate items with product details\n          const itemsWithProducts = await Promise.all(\n            items.map(async (item: any) => {\n              const product = await activeStorage.getProduct(item.productId);\n              return {\n                ...item,\n                product\n              };\n            })\n          );\n          \n          return {\n            ...order,\n            items: itemsWithProducts\n          };\n        })\n      );\n      \n      res.json(ordersWithDetails);\n    } catch (error) {\n      res.status(500).json({ message: \"Buyurtmalarni olishda xatolik\" });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id\", adminAuth, async (req, res) => {\n    try {\n      const { status } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ message: \"Status talab qilinadi\" });\n      }\n      \n      const order = await activeStorage.updateOrder(req.params.id, { status });\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Buyurtma topilmadi\" });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Buyurtma statusini yangilashda xatolik\" });\n    }\n  });\n\n  // Admin Categories APIs\n  app.get(\"/api/admin/categories\", adminAuth, async (req, res) => {\n    try {\n      const categories = await activeStorage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Kategoriyalarni olishda xatolik\" });\n    }\n  });\n\n  app.post(\"/api/admin/categories\", adminAuth, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await activeStorage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Kategoriya yaratishda xatolik\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/admin/categories/:id\", adminAuth, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await activeStorage.updateCategory(req.params.id, categoryData);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Kategoriya topilmadi\" });\n      }\n      \n      res.json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Kategoriyani yangilashda xatolik\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/admin/categories/:id\", adminAuth, async (req, res) => {\n    try {\n      const success = await activeStorage.deleteCategory(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Kategoriya topilmadi\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Kategoriyani o'chirishda xatolik\" });\n    }\n  });\n\n\n  // Start new chat session\n  app.post(\"/api/chat/start\", async (req, res) => {\n    try {\n      const { name, phone } = req.body;\n      \n      if (!name || !phone) {\n        return res.status(400).json({ message: \"Name and phone are required\" });\n      }\n\n      // Generate unique session ID\n      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Send notification to Telegram\n      await sendTelegramNotification(`üÜï Yangi suhbat boshlandi!\\n\\nüë§ Mijoz: ${name}\\nüìû Telefon: ${phone}\\nüîó Session: ${sessionId}`);\n\n      res.json({ sessionId, name, phone });\n    } catch (error) {\n      console.error('Chat start error:', error);\n      res.status(500).json({ \n        message: \"Suhbatni boshlashda xatolik\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Send chat message\n  app.post(\"/api/chat/message\", async (req, res) => {\n    try {\n      const { message, sessionId, userName, userPhone } = req.body;\n      \n      if (!message || !sessionId) {\n        return res.status(400).json({ message: \"Message and sessionId are required\" });\n      }\n\n      // Save user message with name and phone\n      const userMessage = await activeStorage.saveChatMessage({\n        sessionId,\n        userId: req.session.userId || null,\n        userName,\n        userPhone,\n        message,\n        response: null,\n      });\n\n      // Get context for intelligent response\n      const context = await buildChatContext(message, activeStorage);\n      \n      // Generate AI response using Google Gemini with context\n      const aiResponse = await generateIntelligentResponse(message, context);\n      \n      // Update the message with AI response\n      const updatedMessage = await activeStorage.updateChatResponse(userMessage.id, aiResponse);\n\n      // Send conversation to Telegram\n      await sendTelegramNotification(`üí¨ Suhbat:\\n\\nüë§ ${userName || 'Anonim'}: ${message}\\nü§ñ Javob: ${aiResponse}`);\n\n      res.json({\n        id: updatedMessage?.id,\n        message,\n        response: aiResponse,\n        createdAt: updatedMessage?.createdAt,\n      });\n    } catch (error) {\n      console.error('Chat message error:', error);\n      res.status(500).json({ \n        message: \"Xabar yuborishda xatolik\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/chat/history/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const history = await activeStorage.getChatHistory(sessionId);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Suhbat tarixini olishda xatolik\" });\n    }\n  });\n\n  // Admin Blog APIs\n  app.get(\"/api/admin/blog\", adminAuth, async (req, res) => {\n    try {\n      const posts = await activeStorage.getBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Blog postlarini olishda xatolik\" });\n    }\n  });\n\n  app.post(\"/api/admin/blog\", adminAuth, async (req, res) => {\n    try {\n      const postData = insertBlogPostSchema.parse(req.body);\n      const post = await activeStorage.createBlogPost(postData);\n      res.status(201).json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Blog post yaratishda xatolik\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.put(\"/api/admin/blog/:id\", adminAuth, async (req, res) => {\n    try {\n      const postData = insertBlogPostSchema.partial().parse(req.body);\n      const post = await activeStorage.updateBlogPost(req.params.id, postData);\n      \n      if (!post) {\n        return res.status(404).json({ message: \"Blog post topilmadi\" });\n      }\n      \n      res.json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Blog postni yangilashda xatolik\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/admin/blog/:id\", adminAuth, async (req, res) => {\n    try {\n      const success = await activeStorage.deleteBlogPost(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Blog post topilmadi\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Blog postni o'chirishda xatolik\" });\n    }\n  });\n\n  // Public Blog APIs\n  app.get(\"/api/blog/posts\", async (req, res) => {\n    try {\n      const posts = await activeStorage.getBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Blog postlarini olishda xatolik\" });\n    }\n  });\n\n  app.get(\"/api/blog/posts/:slug\", async (req, res) => {\n    try {\n      const post = await activeStorage.getBlogPostBySlug(req.params.slug);\n      \n      if (!post) {\n        return res.status(404).json({ message: \"Blog post topilmadi\" });\n      }\n      \n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Blog postni olishda xatolik\" });\n    }\n  });\n\n  // Search API\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      \n      console.log('üîé Search API called:', { query, queryParams: req.query });\n      \n      if (!query || typeof query !== 'string') {\n        console.log('‚ùå No query provided');\n        return res.status(400).json({ message: \"Qidiruv so'zi kiritilmagan\" });\n      }\n      \n      console.log('üìû Calling activeStorage.searchAll with:', query);\n      const results = await activeStorage.searchAll(query);\n      console.log('üìä Search results:', { productsFound: results.products.length, blogPostsFound: results.blogPosts.length });\n      \n      res.json(results);\n    } catch (error) {\n      console.error('üí• Search error:', error);\n      res.status(500).json({ message: \"Qidiruvda xatolik\" });\n    }\n  });\n\n  // SEO Admin API routes\n  app.get(\"/api/admin/seo/report\", adminAuth, async (req, res) => {\n    try {\n      const report = {\n        overallScore: 85,\n        indexedPages: 247,\n        internalLinks: 1523,\n        optimizedImages: 92,\n        recentChecks: [\n          { page: '/catalog', score: 88, issues: 2, lastCheck: new Date() },\n          { page: '/products/polietilen-paketlar', score: 92, issues: 1, lastCheck: new Date() },\n          { page: '/blog/optom-savdo-maslahatlari', score: 95, issues: 0, lastCheck: new Date() }\n        ]\n      };\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"SEO hisobotni olishda xatolik\" });\n    }\n  });\n\n  app.post(\"/api/admin/seo/analyze\", adminAuth, async (req, res) => {\n    try {\n      const { url } = req.body;\n      if (!url) {\n        return res.status(400).json({ message: \"URL kiritilmagan\" });\n      }\n\n      // SEO tahlil algoritmi (sodda versiya)\n      const analysis = {\n        url,\n        title: \"SEO Tahlil Natijasi\",\n        score: Math.floor(Math.random() * 30) + 70, // 70-100 orasida\n        checks: [\n          {\n            id: 'title',\n            title: 'Sahifa sarlavhasi (Title Tag)',\n            status: 'pass',\n            description: 'Sahifada to\\'g\\'ri title tag mavjud',\n            value: 'OptomBazar.uz - Mahsulot nomi'\n          },\n          {\n            id: 'meta-description',\n            title: 'Meta tavsif (Meta Description)',\n            status: 'pass',\n            description: 'Meta description to\\'g\\'ri uzunlikda',\n            value: '155 ta belgi'\n          },\n          {\n            id: 'keywords',\n            title: 'Kalit so\\'zlar',\n            status: 'warning',\n            description: 'Meta keywords yo\\'q',\n            recommendation: 'Sahifa uchun mos kalit so\\'zlarni qo\\'shing'\n          },\n          {\n            id: 'headings',\n            title: 'Sarlavha teglari (H1-H6)',\n            status: 'pass',\n            description: 'H1 tag mavjud va to\\'g\\'ri ishlatilgan'\n          },\n          {\n            id: 'images',\n            title: 'Rasm optimallashtirish',\n            status: 'warning',\n            description: 'Ba\\'zi rasmlarda alt atribut yo\\'q',\n            recommendation: 'Barcha rasmlarga alt atribut qo\\'shing'\n          },\n          {\n            id: 'internal-links',\n            title: 'Ichki linklar',\n            status: 'pass',\n            description: 'Sahifada yetarli ichki linklar mavjud'\n          }\n        ],\n        lastChecked: new Date()\n      };\n\n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ message: \"SEO tahlil qilib bo'lmadi\" });\n    }\n  });\n\n  // Sitemap va SEO routes\n  const sitemapGenerator = new SitemapGenerator(activeStorage as DatabaseStorage);\n\n  app.get(\"/sitemap.xml\", async (req, res) => {\n    try {\n      const sitemap = await sitemapGenerator.generateSitemap();\n      res.set('Content-Type', 'application/xml');\n      res.send(sitemap);\n    } catch (error) {\n      console.error('Sitemap generatsiya xatoligi:', error);\n      res.status(500).send('Sitemap generatsiya qilib bo\\'lmadi');\n    }\n  });\n\n  app.get(\"/robots.txt\", (req, res) => {\n    try {\n      const robotsTxt = sitemapGenerator.generateRobotsTxt();\n      res.set('Content-Type', 'text/plain');\n      res.send(robotsTxt);\n    } catch (error) {\n      console.error('Robots.txt generatsiya xatoligi:', error);\n      res.status(500).send('Robots.txt generatsiya qilib bo\\'lmadi');\n    }\n  });\n\n  app.get(\"/sitemap-index.xml\", async (req, res) => {\n    try {\n      const sitemapIndex = await sitemapGenerator.generateSitemapIndex();\n      res.set('Content-Type', 'application/xml');\n      res.send(sitemapIndex);\n    } catch (error) {\n      console.error('Sitemap index generatsiya xatoligi:', error);\n      res.status(500).send('Sitemap index generatsiya qilib bo\\'lmadi');\n    }\n  });\n\n  // Test Telegram notification\n  app.get(\"/api/test-telegram\", async (req, res) => {\n    try {\n      await sendTelegramNotification(\"üß™ Test notification from Optombazar.uz\");\n      res.json({ success: true, message: \"Telegram test sent\" });\n    } catch (error) {\n      res.status(500).json({ success: false, error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // AI test routes qo'shish\n  registerAITestRoutes(app, activeStorage);\n  \n  // Register admin reports routes\n  registerReportsRoutes(app, activeStorage);\n  registerAutomationRoutes(app, activeStorage);\n  \n  // Register discounts, favorites, push notification, analytics and marketing routes\n  app.use(\"/api/discounts\", discountsRouter);\n  app.use(\"/api/favorites\", favoritesRouter);\n  app.use(\"/api/push\", pushRouter);\n  app.use(\"/api/marketing\", marketingRouter);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":38881},"server/seed-products.ts":{"content":"import { readFileSync } from 'fs';\nimport { storage } from './storage.js';\n\n// Test mahsulotlari uchun placeholder rasmlar\nconst productImages = [\n  'https://via.placeholder.com/400x300/3B82F6/ffffff?text=Mahsulot+1',\n  'https://via.placeholder.com/400x300/EF4444/ffffff?text=Mahsulot+2', \n  'https://via.placeholder.com/400x300/10B981/ffffff?text=Mahsulot+3',\n  'https://via.placeholder.com/400x300/F59E0B/ffffff?text=Mahsulot+4',\n  'https://via.placeholder.com/400x300/8B5CF6/ffffff?text=Mahsulot+5',\n  'https://via.placeholder.com/400x300/F97316/ffffff?text=Mahsulot+6'\n];\n\n// Mahsulot nomlari (Uzbekcha/Ruscha)\nconst productNames = [\n  { uz: 'Yuqori sifatli plastik idishlar', ru: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ—Å—É–¥–∞' },\n  { uz: 'Chiroyli qog\\'oz paketlar', ru: '–ö—Ä–∞—Å–∏–≤—ã–µ –±—É–º–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã' },\n  { uz: 'Mustahkam polietilen o\\'ramlar', ru: '–ü—Ä–æ—á–Ω—ã–µ –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –æ–±–µ—Ä—Ç–∫–∏' },\n  { uz: 'Professional oshxona anjomlari', ru: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É—Ö–æ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏' },\n  { uz: 'Ekologik toza mahsulotlar', ru: '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã' },\n  { uz: 'Zamonaviy dizaynli tovarlar', ru: '–¢–æ–≤–∞—Ä—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞' },\n  { uz: 'Arzon narxdagi sifatli buyumlar', ru: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º' },\n  { uz: 'Restoran uchun maxsus anjomlar', ru: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤' },\n  { uz: 'Kafe va qahvaxonalar uchun tovarlar', ru: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ñ–µ –∏ –∫–æ—Ñ–µ–µ–Ω' },\n  { uz: 'Uy xo\\'jaligi uchun foydali narsalar', ru: '–ü–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞' },\n  { uz: 'Ofis uchun zarur materiallar', ru: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ—Ñ–∏—Å–∞' },\n  { uz: 'Bolalar uchun xavfsiz o\\'yinchoqlar', ru: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π' },\n  { uz: 'Sport uchun professional jihozlar', ru: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' },\n  { uz: 'Elektron aksessuarlar to\\'plami', ru: '–ù–∞–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤' },\n  { uz: 'Modali ayollar kiyimi', ru: '–ú–æ–¥–Ω–∞—è –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },\n  { uz: 'Erkaklar uchun klassik kiyim', ru: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },\n  { uz: 'Bolalar kiyimlari kolleksiyasi', ru: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–µ—Ç—Å–∫–æ–π –æ–¥–µ–∂–¥—ã' },\n  { uz: 'Maishiy texnika ehtiyot qismlari', ru: '–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏' },\n  { uz: 'Avtomobil uchun foydali aksessuarlar', ru: '–ü–æ–ª–µ–∑–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' },\n  { uz: 'Bog\\'dorchilik uchun asboblar', ru: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–∞' }\n];\n\nfunction getRandomPrice(): string {\n  const basePrice = Math.floor(Math.random() * 50000) + 5000; // 5000-55000\n  return basePrice.toString();\n}\n\nfunction getRandomWholesalePrice(price: string): string {\n  const retail = parseInt(price);\n  const wholesale = Math.floor(retail * 0.7); // 30% discount for wholesale\n  return wholesale.toString();\n}\n\nfunction getRandomQuantity(): number {\n  return Math.floor(Math.random() * 1000) + 50; // 50-1050\n}\n\nfunction getRandomMinQuantity(): number {\n  return Math.floor(Math.random() * 20) + 1; // 1-21\n}\n\nfunction createSlug(nameUz: string): string {\n  return nameUz\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n\nasync function seedProducts(): Promise<void> {\n  try {\n    console.log('Starting products seeding...');\n    \n    // Get all categories\n    const categories = await storage.getCategories();\n    if (categories.length === 0) {\n      console.log('No categories found. Please run category seeding first.');\n      return;\n    }\n    \n    console.log(`Found ${categories.length} categories`);\n    \n    // Create 2-3 products for each category (limit to first 8 categories to avoid too many products)\n    const categoriesToUse = categories.slice(0, 8);\n    let productCount = 0;\n    \n    for (const category of categoriesToUse) {\n      const productsPerCategory = Math.floor(Math.random() * 2) + 2; // 2-3 products per category\n      \n      for (let i = 0; i < productsPerCategory; i++) {\n        const randomName = productNames[Math.floor(Math.random() * productNames.length)];\n        const price = getRandomPrice();\n        const wholesalePrice = getRandomWholesalePrice(price);\n        const stockQuantity = getRandomQuantity();\n        const minQuantity = getRandomMinQuantity();\n        \n        // Get 2-3 random images\n        const imageCount = Math.floor(Math.random() * 2) + 2;\n        const images: string[] = [];\n        for (let j = 0; j < imageCount; j++) {\n          images.push(productImages[Math.floor(Math.random() * productImages.length)]);\n        }\n        \n        const productData = {\n          nameUz: `${randomName.uz} ${i + 1}`,\n          nameRu: `${randomName.ru} ${i + 1}`,\n          descriptionUz: `${randomName.uz} uchun mukammal tanlov. Yuqori sifat va arzon narx.`,\n          descriptionRu: `–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è ${randomName.ru.toLowerCase()}. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞.`,\n          categoryId: category.id,\n          sellerId: 'default-seller',\n          price,\n          wholesalePrice,\n          minQuantity,\n          stockQuantity,\n          unit: 'dona',\n          images,\n          slug: createSlug(`${randomName.uz}-${i + 1}`),\n          isActive: true,\n          isFeatured: Math.random() > 0.7, // 30% chance to be featured\n        };\n        \n        await storage.createProduct(productData);\n        productCount++;\n        console.log(`Added product: ${productData.nameUz} (Category: ${category.nameUz})`);\n      }\n    }\n    \n    console.log(`Successfully seeded ${productCount} products!`);\n    \n  } catch (error) {\n    console.error('Error seeding products:', error);\n  }\n}\n\n// Run the seeding if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedProducts().then(() => {\n    console.log('Products seeding completed');\n    process.exit(0);\n  }).catch((error) => {\n    console.error('Products seeding failed:', error);\n    process.exit(1);\n  });\n}\n\nexport { seedProducts };","size_bytes":6368},"server/seed.ts":{"content":"import { randomUUID } from \"crypto\";\n\n// Real data from Optombazar.uz website\nexport const realCategories = [\n  // Main categories\n  {\n    id: \"polietilen-paketlar\",\n    nameUz: \"Plastik paketlar\",\n    nameRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã\",\n    descriptionUz: \"Har xil o'lcham va qalinlikdagi polietilen paketlar\",\n    descriptionRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ç–æ–ª—â–∏–Ω\",\n    slug: \"polietilen-paketlar\",\n    image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Package\",\n    parentId: null\n  },\n  {\n    id: \"bir-martali-idishlar\",\n    nameUz: \"Bir martali ishlatiladigan idishlar\",\n    nameRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞\",\n    descriptionUz: \"Plastik va qog'ozdan yasalgan bir martali idishlar\",\n    descriptionRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ –∏–∑ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –±—É–º–∞–≥–∏\",\n    slug: \"bir-martali-idishlar\",\n    image: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"UtensilsCrossed\",\n    parentId: null\n  },\n  {\n    id: \"uy-kimyoviy-moddalari\",\n    nameUz: \"Uy kimyoviy moddalari\",\n    nameRu: \"–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è\",\n    descriptionUz: \"Tozalash va parvarish uchun kimyoviy vositalar\",\n    descriptionRu: \"–•–∏–º–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏ –∏ —É—Ö–æ–¥–∞\",\n    slug: \"uy-kimyoviy-moddalari\",\n    image: \"https://images.unsplash.com/photo-1563453392212-326f5e854473?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Sparkles\",\n    parentId: null\n  },\n  {\n    id: \"elektronika\",\n    nameUz: \"Elektronika\",\n    nameRu: \"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\",\n    descriptionUz: \"Maishiy texnika va elektron qurilmalar\",\n    descriptionRu: \"–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\",\n    slug: \"elektronika\",\n    image: \"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Smartphone\",\n    parentId: null\n  },\n  {\n    id: \"kiyim-kechak\",\n    nameUz: \"Kiyim-kechak\",\n    nameRu: \"–û–¥–µ–∂–¥–∞\",\n    descriptionUz: \"Erkaklar, ayollar va bolalar kiyimlari\",\n    descriptionRu: \"–ú—É–∂—Å–∫–∞—è, –∂–µ–Ω—Å–∫–∞—è –∏ –¥–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞\",\n    slug: \"kiyim-kechak\",\n    image: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Shirt\",\n    parentId: null\n  },\n  {\n    id: \"kantstovarlar\",\n    nameUz: \"Kantstovarlar\",\n    nameRu: \"–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã\",\n    descriptionUz: \"Yozish va chizish uchun buyumlar\",\n    descriptionRu: \"–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–∏—Å—å–º–∞ –∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è\",\n    slug: \"kantstovarlar\",\n    image: \"https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"PenTool\",\n    parentId: null\n  },\n\n  // Subcategories for Plastik paketlar\n  {\n    id: \"mayka-paketlar\",\n    nameUz: \"Rasmsiz mayka paketlar\",\n    nameRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç \\\"–ú–∞–π–∫–∞\\\" –±–µ–∑ —Ä–∏—Å—É–Ω–∫–∞\",\n    descriptionUz: \"Oddiy mayka shaklidagi plastik paketlar\",\n    descriptionRu: \"–û–±—ã—á–Ω—ã–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –≤ —Ñ–æ—Ä–º–µ –º–∞–π–∫–∏\",\n    slug: \"mayka-paketlar\",\n    image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"ShoppingBag\",\n    parentId: \"polietilen-paketlar\"\n  },\n  {\n    id: \"zip-paketlar\",\n    nameUz: \"Zip paketlar\",\n    nameRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å –∑–∞–º–∫–æ–º zip-lock (—Å—Ç—Ä—É–Ω–∞)\",\n    descriptionUz: \"Zip qulfli polietilen paketlar\",\n    descriptionRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Å zip –∑–∞–º–∫–æ–º\",\n    slug: \"zip-paketlar\",\n    image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Package\",\n    parentId: \"polietilen-paketlar\"\n  },\n  {\n    id: \"kesilgan-tutqichli-paketlar\",\n    nameUz: \"Kesilgan tutqichli paketlar\",\n    nameRu: \"–ü–∞–∫–µ—Ç—ã —Å –≤—ã—Ä—É–±–Ω–æ–π —Ä—É—á–∫–æ–π\",\n    descriptionUz: \"Kesilgan tutqichga ega plastik paketlar\",\n    descriptionRu: \"–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Å –≤—ã—Ä—É–±–Ω–æ–π —Ä—É—á–∫–æ–π\",\n    slug: \"kesilgan-tutqichli-paketlar\",\n    image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Grip\",\n    parentId: \"polietilen-paketlar\"\n  },\n\n  // Subcategories for B—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è\n  {\n    id: \"yuvish-vositalari\",\n    nameUz: \"Yuvish vositalari\",\n    nameRu: \"–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∏—Ä–∫–∏\",\n    descriptionUz: \"Kir yuvish uchun kukunlar va suyuqliklar\",\n    descriptionRu: \"–ü–æ—Ä–æ—à–∫–∏ –∏ –∂–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∏—Ä–∫–∏\",\n    slug: \"yuvish-vositalari\",\n    image: \"https://images.unsplash.com/photo-1563453392212-326f5e854473?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Shirt\",\n    parentId: \"uy-kimyoviy-moddalari\"\n  },\n  {\n    id: \"tozalash-vositalari\",\n    nameUz: \"Tozalash uchun tovarlar\",\n    nameRu: \"–¢–æ–≤–∞—Ä—ã –¥–ª—è —É–±–æ—Ä–∫–∏ (—Ç—Ä—è–ø–∫–∏, –≥—É–±–∫–∏, —Å–∞–ª—Ñ–µ—Ç–∫–∏, —Å–∫–∞—Ç–µ—Ä—Ç–∏)\",\n    descriptionUz: \"Tozalash uchun latta, gubka va boshqa buyumlar\",\n    descriptionRu: \"–¢—Ä—è–ø–∫–∏, –≥—É–±–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–±–æ—Ä–∫–∏\",\n    slug: \"tozalash-vositalari\",\n    image: \"https://images.unsplash.com/photo-1563453392212-326f5e854473?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n    icon: \"Sparkles\",\n    parentId: \"uy-kimyoviy-moddalari\"\n  }\n];\n\nexport const realProducts = [\n  {\n    id: randomUUID(),\n    nameUz: \"\\\"Louis Vuitton\\\" tasvirli paket 40x50 sm\",\n    nameRu: \"–ü–∞–∫–µ—Ç—ã —Å –≤—ã—Ä—É–±–Ω–æ–π —Ä—É—á–∫–æ–π Louis Vuitton 40-50 —Å–º\",\n    descriptionUz: \"Yuqori sifatli polietilen paket, 50 mikron qalinlikda, 100 dona blokda\",\n    descriptionRu: \"–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç, —Ç–æ–ª—â–∏–Ω–∞ 50 –º–∏–∫—Ä–æ–Ω, –≤ –±–ª–æ–∫–µ 100 —à—Ç—É–∫\",\n    slug: \"pakety-s-vyrubnoy-ruchkoy-louis-vuitton-40-50-sm\",\n    price: \"1000.00\",\n    wholesalePrice: \"900.00\",\n    categoryId: \"kesilgan-tutqichli-paketlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://optombazar.uz/image/cache/catalog/products/2023/10/26/photo_2023-10-26_16-08-31-500x500.jpg\"],\n    stockQuantity: 14000,\n    minQuantity: 100,\n    wholesaleMinQuantity: 1400,\n    unit: \"dona\",\n    specifications: {\n      \"O'lchami\": \"40x50 sm\",\n      \"Qalinligi\": \"50 mikron\",\n      \"Material\": \"Yuqori bosimli polietilen (LDPE)\",\n      \"Soni (blokda)\": \"100 dona\",\n      \"Ishlab chiqaruvchi\": \"O'zbekiston\"\n    },\n    videoUrl: null\n  },\n  {\n    id: randomUUID(),\n    nameUz: \"Oziq-ovqat uchun streych plyonka Casper 300 m\",\n    nameRu: \"–°—Ç—Ä–µ–π—á-–ø–ª–µ–Ω–∫–∞ Casper 300 –º\",\n    descriptionUz: \"Oziq-ovqat mahsulotlarini saqlash uchun Casper brendi streych plyonka\",\n    descriptionRu: \"–°—Ç—Ä–µ–π—á-–ø–ª–µ–Ω–∫–∞ –±—Ä–µ–Ω–¥–∞ Casper –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\",\n    slug: \"streych-plenka-casper-300-m\",\n    price: \"45000.00\",\n    wholesalePrice: \"42000.00\",\n    categoryId: \"polietilen-paketlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://optombazar.uz/image/cache/catalog/products/2023/11/01/photo_2023-11-01_12-25-10-500x500.jpg\"],\n    stockQuantity: 50,\n    minQuantity: 1,\n    wholesaleMinQuantity: 10,\n    unit: \"rulon\",\n    specifications: {\n      \"Uzunligi\": \"300 m\",\n      \"Eni\": \"29 sm\",\n      \"Qalinligi\": \"8 mikron\",\n      \"Brend\": \"Casper\",\n      \"Ishlab chiqaruvchi\": \"O'zbekiston\"\n    },\n    videoUrl: null\n  },\n  {\n    id: randomUUID(),\n    nameUz: \"Ariel 1.5 kg kir yuvish kukuni\",\n    nameRu: \"Ariel 1.5 –∫–≥ —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫\",\n    descriptionUz: \"Avtomat kir yuvish mashinasi uchun Ariel brendi kukuni\",\n    descriptionRu: \"–°—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫ Ariel –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω\",\n    slug: \"ariel-15-kg-stiralnyy-poroshok\",\n    price: \"45000.00\",\n    wholesalePrice: \"42000.00\",\n    categoryId: \"yuvish-vositalari\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://optombazar.uz/image/cache/catalog/products/2024/02/10/photo_2024-02-10_13-09-51-500x500.jpg\"],\n    stockQuantity: 120,\n    minQuantity: 1,\n    wholesaleMinQuantity: 5,\n    unit: \"dona\",\n    specifications: {\n      \"Og'irligi\": \"1.5 kg\",\n      \"Turi\": \"Avtomat\",\n      \"Brend\": \"Ariel\"\n    },\n    videoUrl: null\n  },\n  {\n    id: randomUUID(),\n    nameUz: \"Plastik bir martali stakan 200ml\",\n    nameRu: \"–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω 200–º–ª\",\n    descriptionUz: \"Shaffof plastikdan yasalgan bir martali stakan\",\n    descriptionRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω –∏–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –ø–ª–∞—Å—Ç–∏–∫–∞\",\n    slug: \"plastik-bir-martali-stakan-200ml\",\n    price: \"12000.00\",\n    wholesalePrice: \"11000.00\",\n    categoryId: \"bir-martali-idishlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"],\n    stockQuantity: 1000,\n    minQuantity: 50,\n    wholesaleMinQuantity: 200,\n    unit: \"paket\",\n    specifications: {\n      \"Hajmi\": \"200ml\",\n      \"Material\": \"PP plastik\",\n      \"Soni (paketda)\": \"50 dona\",\n      \"Ranglar\": \"Shaffof\"\n    },\n    videoUrl: null\n  },\n  {\n    id: randomUUID(),\n    nameUz: \"Qog'oz tarelka 23sm diametr\",\n    nameRu: \"–ë—É–º–∞–∂–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞ –¥–∏–∞–º–µ—Ç—Ä 23—Å–º\",\n    descriptionUz: \"Ekologik toza qog'ozdan yasalgan bir martali tarelka\",\n    descriptionRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ç–∞—Ä–µ–ª–∫–∞ –∏–∑ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–æ–π –±—É–º–∞–≥–∏\",\n    slug: \"qogoz-tarelka-23sm-diametr\",\n    price: \"15000.00\",\n    wholesalePrice: \"14000.00\",\n    categoryId: \"bir-martali-idishlar\",\n    sellerId: \"admin-user-1\",\n    images: [\"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=500\"],\n    stockQuantity: 500,\n    minQuantity: 25,\n    wholesaleMinQuantity: 100,\n    unit: \"paket\",\n    specifications: {\n      \"Diametri\": \"23 sm\",\n      \"Material\": \"Karton qog'oz\",\n      \"Soni (paketda)\": \"25 dona\",\n      \"Ranglar\": \"Oq\"\n    },\n    videoUrl: null\n  }\n];\n\nexport const realBlogPosts = [\n  {\n    id: randomUUID(),\n    title: \"Moliyaviy savodxonlik bo'yicha to'liq tushuncha\",\n    content: `Moliyaviy savodxonlik - bu shaxsning o'z moliyaviy resurslarini samarali boshqarish, investitsiya qilish va moliyaviy xavflardan himoyalanish bo'yicha bilim va ko'nikmalar majmuasidir.\n\nBu maqolada moliyaviy savodxonlikning asosiy printsiplari, ahamiyati va uni oshirish yo'llari haqida batafsil ma'lumot beriladi.\n\n## Moliyaviy savodxonlikning asosiy qismlari:\n\n1. **Byudjet tuzish va nazorat qilish**\n2. **Jamg'arish va investitsiya**\n3. **Qarzlarni boshqarish**\n4. **Sug'urta va xavfsizlik**\n5. **Pensiya rejalashtirish**\n\nMoliyaviy savodxonlik bizning kundalik hayotimizda muhim rol o'ynaydi va kelajakda barqaror moliyaviy holatga erishishimizga yordam beradi.`,\n    excerpt: \"Moliyaviy savodxonlik haqida bilish kerak bo'lgan barcha narsalar\",\n    imageUrl: \"https://optombazar.uz/image/cache/catalog/blog/2023/11/04/moliyaviy-savodxonlik-haqida-toliq-tushuncha-750x422.png\",\n    slug: \"moliyaviy-savodxonlik-bo-yicha-to-liq-tushuncha\",\n    tags: [\"moliya\", \"savodxonlik\", \"investitsiya\", \"byudjet\"],\n    language: \"uz\",\n    isPublished: true,\n    isAutoGenerated: false,\n    source: \"admin\"\n  },\n  {\n    id: randomUUID(),\n    title: \"Ramazon taqvimi 2024 Toshkent shahri\",\n    content: `2024 yilgi Ramazon oyi taqvimi Toshkent shahri uchun tayyorlandi. Bu taqvim orqali siz har kunlik ro'za tutish vaqtlarini aniq bilib olishingiz mumkin.\n\n## Ramazon oyining ahamiyati\n\nRamazon oyi musulmonlar uchun eng muqaddas oylardan biridir. Bu oyda ro'za tutish, Qur'on o'qish va ibodatga ko'proq vaqt ajratish tavsiya etiladi.\n\n## 2024 yil Ramazon taqvimi xususiyatlari:\n\n- Ramazon oyining boshlangichi\n- Saharlik va iftorlik vaqtlari\n- Laylat ul-Qadr kechalari\n- Hayit sanasi\n\nToshkent shahri uchun ro'za vaqtlari mintaqaviy geografik joylashuvga qarab aniqlanadi.`,\n    excerpt: \"2024 yil Ramazon oyi taqvimi Toshkent shahri uchun\",\n    imageUrl: \"https://optombazar.uz/image/cache/catalog/blog/2024/02/29/ramazon-taqvimi-2024-toshkent-750x422.png\",\n    slug: \"ramazon-taqvimi-2024-toshkent-shahri\",\n    tags: [\"ramazon\", \"taqvim\", \"toshkent\", \"roza\"],\n    language: \"uz\",\n    isPublished: true,\n    isAutoGenerated: false,\n    source: \"admin\"\n  },\n  {\n    id: randomUUID(),\n    title: \"Ulgurji savdo platformasida muvaffaqiyat sirlari\",\n    content: `Optombazar.uz - O'zbekistondagi yetakchi ulgurji savdo platformasi. Bu maqolada platformada muvaffaqiyatli savdo qilish sirlari haqida gaplashamiz.\n\n## Platformaning afzalliklari:\n\n1. **Keng mahsulot assortimenti** - 10,000+ mahsulot\n2. **Raqobatbardosh narxlar** - To'g'ridan-to'g'ri ishlab chiqaruvchilardan\n3. **Tez yetkazib berish** - Butun O'zbekiston bo'ylab\n4. **Sifat kafolati** - Barcha mahsulotlar sertifikatlangan\n\n## Savdo qilish uchun maslahatlar:\n\n- Bozorni o'rganing\n- Sifatli mahsulotlarni tanlang\n- Mijozlar bilan aloqani rivojlantiring\n- Marketing strategiyasini ishlab chiqing\n\nMuvaffaqiyatli biznes uchun to'g'ri platformani tanlash muhim qadam hisoblanadi.`,\n    excerpt: \"Ulgurji savdoda muvaffaqiyat qozonish yo'llari\",\n    imageUrl: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=750&h=422\",\n    slug: \"ulgurji-savdo-platformasida-muvaffaqiyat-sirlari\",\n    tags: [\"ulgurji\", \"savdo\", \"biznes\", \"muvaffaqiyat\"],\n    language: \"uz\",\n    isPublished: true,\n    isAutoGenerated: false,\n    source: \"admin\"\n  }\n];","size_bytes":13758},"server/static.ts":{"content":"import express from \"express\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport function serveStatic(app: express.Express) {\n  const distPath = path.resolve(\"dist/public\");\n  const clientDistPath = path.resolve(\"client/dist\");\n  \n  // Check if either dist/public or client/dist exists\n  const staticPath = fs.existsSync(distPath) ? distPath : \n                   (fs.existsSync(clientDistPath) ? clientDistPath : null);\n\n  if (!staticPath) {\n    console.warn(`Build directory not found: ${distPath} or ${clientDistPath}`);\n    return;\n  }\n\n  console.log(`Serving static files from: ${staticPath}`);\n  app.use(express.static(staticPath));\n\n  // Fallback to index.html for SPA routing\n  app.use(\"*\", (_req, res) => {\n    const indexPath = path.join(staticPath, \"index.html\");\n    if (fs.existsSync(indexPath)) {\n      res.sendFile(indexPath);\n    } else {\n      res.status(404).send('Index.html not found');\n    }\n  });\n}\n","size_bytes":925},"server/storage.ts":{"content":"import { type User, type InsertUser, type Category, type InsertCategory, type Product, type InsertProduct, type Order, type InsertOrder, type OrderItem, type InsertOrderItem, type CartItem, type InsertCartItem, type BlogPost, type InsertBlogPost, type ChatMessage, type InsertChatMessage, type UserActivity, type InsertUserActivity, type Favorite, type InsertFavorite } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n\n  // Products\n  getProducts(categoryId?: string, featured?: boolean): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductBySlug(slug: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  searchProducts(query: string): Promise<Product[]>;\n\n  // Cart\n  getCartItems(sessionId: string): Promise<CartItem[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(sessionId: string): Promise<boolean>;\n\n  // Orders\n  getOrders(userId?: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  addOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n\n  // Blog Posts\n  getBlogPosts(): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, updates: Partial<InsertBlogPost>): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: string): Promise<boolean>;\n\n  // Search\n  searchAll(query: string): Promise<{ products: Product[]; blogPosts: BlogPost[]; }>;\n  \n  // Chat Messages\n  getChatHistory(sessionId: string): Promise<ChatMessage[]>;\n  saveChatMessage(chatMessage: InsertChatMessage): Promise<ChatMessage>;\n  updateChatResponse(messageId: string, response: string): Promise<ChatMessage | undefined>;\n  \n  // User Activities (Analytics)\n  logUserActivity?(activity: InsertUserActivity): Promise<UserActivity | undefined>;\n  getUserActivities?(filters?: {\n    userId?: string;\n    sessionId?: string;\n    activityType?: string;\n    dateFrom?: Date;\n    dateTo?: Date;\n    limit?: number;\n  }): Promise<UserActivity[]>;\n\n  // Favorites\n  getFavorites(userId: string): Promise<Favorite[]>;\n  addToFavorites(favorite: InsertFavorite): Promise<Favorite>;\n  removeFromFavorites(userId: string, productId: string): Promise<boolean>;\n  isFavorite(userId: string, productId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private categories: Map<string, Category>;\n  private products: Map<string, Product>;\n  private cartItems: Map<string, CartItem>;\n  private orders: Map<string, Order>;\n  private orderItems: Map<string, OrderItem>;\n  private blogPosts: Map<string, BlogPost>;\n  private chatMessages: Map<string, ChatMessage>;\n  private userActivities: Map<string, UserActivity>;\n  private favorites: Map<string, Favorite>;\n\n  constructor() {\n    this.users = new Map();\n    this.categories = new Map();\n    this.products = new Map();\n    this.cartItems = new Map();\n    this.orders = new Map();\n    this.orderItems = new Map();\n    this.blogPosts = new Map();\n    this.chatMessages = new Map();\n    this.userActivities = new Map();\n    this.favorites = new Map();\n    this.seedData().catch(console.error);\n  }\n\n  private async seedData() {\n    // Seed admin user for testing\n    const adminUser: User = {\n      id: \"admin-user-1\",\n      username: \"admin\",\n      password: \"$2b$10$Dpxm6uzB8t.peuLzoCfLOu.xMQ8GxThZswOmqgu9g.kdhFty5sNdy\", // \"Gisobot201415*\" hashed\n      email: \"akramjon001@gmail.com\",\n      phone: \"+998996448444\",\n      role: \"admin\",\n      createdAt: new Date()\n    };\n    this.users.set(\"admin-user-1\", adminUser);\n    \n    // Import real categories from seed data\n    const { realCategories, realProducts, realBlogPosts } = await this.loadSeedData();\n    \n    // Seed categories from real Optombazar.uz data\n    realCategories.forEach((category: any) => {\n      const categoryWithDefaults: Category = {\n        ...category,\n        isActive: category.isActive ?? true,\n        createdAt: new Date()\n      };\n      this.categories.set(category.id, categoryWithDefaults);\n    });\n\n    // Seed products from real Optombazar.uz data\n    realProducts.forEach((product: any) => {\n      const productWithDefaults: Product = {\n        ...product,\n        isActive: product.isActive ?? true,\n        isFeatured: product.isFeatured ?? false,\n        createdAt: new Date()\n      };\n      this.products.set(product.id, productWithDefaults);\n    });\n\n    // Seed blog posts from real Optombazar.uz data\n    realBlogPosts.forEach((blogPost: any) => {\n      const postWithDefaults: BlogPost = {\n        ...blogPost,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.blogPosts.set(blogPost.id, postWithDefaults);\n    });\n  }\n\n  private async loadSeedData() {\n    // Import real data using dynamic import for ESM compatibility\n    try {\n      const { realCategories, realProducts, realBlogPosts } = await import('./realData.js');\n      return {\n        realCategories: realCategories || this.getFallbackCategories(),\n        realProducts: realProducts || [],\n        realBlogPosts: realBlogPosts || []\n      };\n    } catch (error) {\n      console.warn('Real seed data not available, using fallback:', error);\n      return {\n        realCategories: this.getFallbackCategories(),\n        realProducts: [],\n        realBlogPosts: []\n      };\n    }\n  }\n\n  private getFallbackCategories() {\n    return [\n      {\n        id: \"cat-1\",\n        nameUz: \"Polietilen paketlar\",\n        nameRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã\",\n        descriptionUz: \"Har xil o'lcham va qalinlikdagi polietilen paketlar\",\n        descriptionRu: \"–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ç–æ–ª—â–∏–Ω\",\n        image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        icon: \"Package\",\n        slug: \"polietilen-paketlar\",\n        parentId: null,\n        isActive: true,\n      },\n      {\n        id: \"cat-2\",\n        nameUz: \"Bir martalik idishlar\",\n        nameRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞\",\n        descriptionUz: \"Plastik va qog'oz bir martalik idish-tovoqlar\",\n        descriptionRu: \"–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –∏ –±—É–º–∞–∂–Ω–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞\",\n        image: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        icon: \"Utensils\",\n        slug: \"bir-martalik-idishlar\",\n        parentId: null,\n        isActive: true,\n      },\n      {\n        id: \"cat-3\",\n        nameUz: \"Elektronika\",\n        nameRu: \"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\",\n        descriptionUz: \"Telefon aksessuarlari, gadjetlar va elektronika\",\n        descriptionRu: \"–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –≥–∞–¥–∂–µ—Ç—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\",\n        image: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        icon: \"Smartphone\",\n        slug: \"elektronika\",\n        parentId: null,\n        isActive: true,\n      },\n      {\n        id: \"cat-4\",\n        nameUz: \"Kiyim-kechak\",\n        nameRu: \"–û–¥–µ–∂–¥–∞\",\n        descriptionUz: \"Optom kiyim, maishiy tekstil mahsulotlari\",\n        descriptionRu: \"–û–ø—Ç–æ–≤–∞—è –æ–¥–µ–∂–¥–∞, —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è\",\n        image: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        icon: \"Shirt\",\n        slug: \"kiyim-kechak\",\n        parentId: null,\n        isActive: true,\n      },\n    ];\n\n    // Seed products\n    const products = [\n      {\n        id: \"prod-1\",\n        nameUz: \"Sifatli plastik paketlar\",\n        nameRu: \"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã\",\n        descriptionUz: \"Yuqori sifatli polietilen paketlar - 30x40sm\",\n        descriptionRu: \"–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã - 30x40—Å–º\",\n        categoryId: \"cat-1\",\n        sellerId: \"seller-1\",\n        price: \"150.00\",\n        wholesalePrice: \"120.00\",\n        minQuantity: 100,\n        stockQuantity: 5000,\n        unit: \"dona\",\n        specifications: {\"Material\": \"LDPE\", \"Qalinligi\": \"50 mikron\", \"Ranglar\": \"Turli ranglar\"} as Record<string, string>,\n        images: [\"https://images.unsplash.com/photo-1586953208448-b95a79798f07?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"],\n        videoUrl: null,\n        slug: \"sifatli-plastik-paketlar\",\n        isActive: true,\n        isFeatured: true,\n        createdAt: new Date(),\n      },\n      {\n        id: \"prod-2\",\n        nameUz: \"Bir martalik stakanlar\",\n        nameRu: \"–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏\",\n        descriptionUz: \"Plastik bir martalik stakanlar - 200ml\",\n        descriptionRu: \"–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏ - 200–º–ª\",\n        categoryId: \"cat-2\",\n        sellerId: \"seller-1\",\n        price: \"170.00\",\n        wholesalePrice: \"170.00\",\n        minQuantity: 50,\n        stockQuantity: 3000,\n        unit: \"dona\",\n        specifications: {\"Material\": \"Plastik\", \"Hajmi\": \"200ml\", \"Turi\": \"Bir martalik\"} as Record<string, string>,\n        images: [\"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"],\n        videoUrl: null,\n        slug: \"bir-martalik-stakanlar\",\n        isActive: true,\n        isFeatured: true,\n        createdAt: new Date(),\n      },\n      {\n        id: \"prod-3\",\n        nameUz: \"Telefon aksessuarlari\",\n        nameRu: \"–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\",\n        descriptionUz: \"Universal telefon qopqoqlari to'plami\",\n        descriptionRu: \"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —á–µ—Ö–ª—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\",\n        categoryId: \"cat-3\",\n        sellerId: \"seller-1\",\n        price: \"4500.00\",\n        wholesalePrice: \"4500.00\",\n        minQuantity: 10,\n        wholesaleMinQuantity: 50,\n        stockQuantity: 500,\n        unit: \"dona\",\n        specifications: {\"Material\": \"Silikon\", \"Moslik\": \"Universal\", \"Ranglar\": \"Ko'p rangli\"} as Record<string, string>,\n        images: [\"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"],\n        videoUrl: null,\n        slug: \"telefon-aksessuarlari\",\n        isActive: true,\n        isFeatured: true,\n        createdAt: new Date(),\n      },\n      {\n        id: \"prod-4\",\n        nameUz: \"Erkaklar t-shirtkasi\",\n        nameRu: \"–ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞\",\n        descriptionUz: \"100% paxta erkaklar klassik t-shirtkalari\",\n        descriptionRu: \"100% —Ö–ª–æ–ø–æ–∫ –º—É–∂—Å–∫–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ñ—É—Ç–±–æ–ª–∫–∏\",\n        categoryId: \"cat-4\",\n        sellerId: \"seller-1\",\n        price: \"25000.00\",\n        wholesalePrice: \"25000.00\",\n        minQuantity: 1,\n        wholesaleMinQuantity: 10,\n        stockQuantity: 200,\n        unit: \"dona\",\n        specifications: {\"Material\": \"100% Paxta\", \"Rang\": \"Oq, Qora\", \"O'lcham\": \"S-XXL\"} as Record<string, string>,\n        images: [\"https://images.unsplash.com/photo-1489987707025-afc232f7ea0f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\"],\n        videoUrl: null,\n        slug: \"erkaklar-t-shirtkasi\",\n        isActive: true,\n        isFeatured: true,\n        createdAt: new Date(),\n      },\n    ];\n\n    products.forEach((product: any) => {\n      this.products.set(product.id, product);\n    });\n\n    // Seed blog posts\n    const blogPosts = [\n      {\n        id: \"blog-1\",\n        title: \"Optom savdo biznesida muvaffaqiyat sirlari\",\n        content: \"Optom savdo sohasi o'zining imkoniyatlari va qiyinchiliklari bilan ajralib turadi. Ushbu maqolada sizga optom savdo biznesida muvaffaqiyat qozonish uchun zarur bo'lgan asosiy strategiyalar va maslahatlarni taqdim etamiz.\\n\\nBirinchi navbatda, ishonchli ta'minotchi topish muhim. Sifatli mahsulotlarni arzon narxlarda taklif qiladigan ta'minotchilar bilan uzoq muddatli hamkorlik o'rnatish biznesingizning barqarorligi uchun zarur.\\n\\nIkkinchidan, bozorni chuqur o'rganish kerak. Qaysi mahsulotlar eng ko'p sotiladi, qaysi mavsumda talab ortadi - bularni bilish sizga to'g'ri qarorlar qabul qilishga yordam beradi.\",\n        excerpt: \"Optom savdo biznesida muvaffaqiyatga erishish uchun asosiy strategiyalar va praktik maslahatlar. Ishonchli ta'minotchi topish va bozorni o'rganish haqida.\",\n        imageUrl: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        slug: \"optom-savdo-muvaffaqiyat\",\n        tags: [\"optom savdo\", \"biznes\", \"strategiya\"],\n        language: \"uz\",\n        isPublished: true,\n        isAutoGenerated: false,\n        source: \"admin\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"blog-2\", \n        title: \"2024-yilda eng istiqbolli mahsulot turlari\",\n        content: \"Yangi yil bilan birga yangi imkoniyatlar ham keladi. 2024-yilda qaysi mahsulot turlari eng yuqori foyda keltirishi mumkin?\\n\\nEkologik toza mahsulotlar: Atrof-muhitga zarar yetkazmaydigan mahsulotlarga talab kundan-kunga ortib bormoqda. Qayta ishlanadigan materiallardan tayyorlangan paketlar, bio-parchalanuvchi mahsulotlar kabi tovarlarga investitsiya qilish mantiqan to'g'ri qaror.\\n\\nRaqamli texnologiyalar: Telefon aksessuarlari, portativ zaryadlovchi qurilmalar va boshqa IT mahsulotlari hamon yuqori talabda.\",\n        excerpt: \"2024-yil uchun eng istiqbolli mahsulot turlari: ekologik toza mahsulotlar va raqamli texnologiyalar. Qaysi sohalarga investitsiya qilish kerak.\",\n        imageUrl: \"https://images.unsplash.com/photo-1559136555-9303baea8ebd?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        slug: \"2024-istiqbolli-mahsulotlar\",\n        tags: [\"2024\", \"mahsulotlar\", \"trend\"],\n        language: \"uz\",\n        isPublished: true,\n        isAutoGenerated: false,\n        source: \"admin\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    ];\n\n    blogPosts.forEach(post => this.blogPosts.set(post.id, post));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      phone: insertUser.phone || null,\n      role: insertUser.role || \"customer\",\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values()).filter(cat => cat.isActive);\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    return Array.from(this.categories.values()).find(cat => cat.slug === slug);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = { \n      ...insertCategory, \n      id,\n      image: insertCategory.image || null,\n      icon: insertCategory.icon || null,\n      descriptionUz: insertCategory.descriptionUz || null,\n      descriptionRu: insertCategory.descriptionRu || null,\n      parentId: insertCategory.parentId || null,\n      isActive: insertCategory.isActive ?? true\n    };\n    this.categories.set(id, category);\n    return category;\n  }\n  \n  async updateCategory(id: string, updates: Partial<InsertCategory>): Promise<Category | undefined> {\n    const category = this.categories.get(id);\n    if (!category) return undefined;\n    \n    const updatedCategory = {\n      ...category,\n      ...updates,\n      id: category.id // Preserve original ID\n    };\n    \n    this.categories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n  \n  async deleteCategory(id: string): Promise<boolean> {\n    return this.categories.delete(id);\n  }\n\n  // Products\n  async getProducts(categoryId?: string, featured?: boolean): Promise<Product[]> {\n    let products = Array.from(this.products.values()).filter(product => product.isActive);\n    \n    if (categoryId) {\n      products = products.filter(product => product.categoryId === categoryId);\n    }\n    \n    if (featured !== undefined) {\n      products = products.filter(product => product.isFeatured === featured);\n    }\n    \n    return products;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getProductBySlug(slug: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(product => product.slug === slug);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = { \n      ...insertProduct, \n      id,\n      descriptionUz: insertProduct.descriptionUz || null,\n      descriptionRu: insertProduct.descriptionRu || null,\n      minQuantity: insertProduct.minQuantity ?? 1,\n      wholesaleMinQuantity: (insertProduct as any).wholesaleMinQuantity ?? 1,\n      stockQuantity: insertProduct.stockQuantity ?? 0,\n      specifications: insertProduct.specifications || null,\n      images: insertProduct.images || null,\n      videoUrl: insertProduct.videoUrl || null,\n      isActive: insertProduct.isActive ?? true,\n      isFeatured: insertProduct.isFeatured ?? false,\n      createdAt: new Date()\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    const updatedProduct = {\n      ...product,\n      ...updates,\n      id: product.id, // Preserve original ID\n      createdAt: product.createdAt // Preserve creation date\n    };\n    \n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n  \n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const lowerQuery = query.toLowerCase();\n    return Array.from(this.products.values()).filter(product => \n      product.isActive && (\n        product.nameUz.toLowerCase().includes(lowerQuery) ||\n        product.nameRu.toLowerCase().includes(lowerQuery) ||\n        product.descriptionUz?.toLowerCase().includes(lowerQuery) ||\n        product.descriptionRu?.toLowerCase().includes(lowerQuery)\n      )\n    );\n  }\n\n  // Orders\n  async getOrders(userId?: string): Promise<Order[]> {\n    let orders = Array.from(this.orders.values());\n    if (userId) {\n      orders = orders.filter(order => order.userId === userId);\n    }\n    return orders;\n  }\n  \n  async getAllOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = { \n      ...insertOrder, \n      id,\n      discountId: insertOrder.discountId || null,\n      discountAmount: insertOrder.discountAmount || null,\n      status: insertOrder.status || \"pending\",\n      deliveryMethod: insertOrder.deliveryMethod || \"olib_ketish\",\n      paymentMethod: insertOrder.paymentMethod || \"naqd\",\n      paymentStatus: insertOrder.paymentStatus || \"kutmoqda\",\n      customerEmail: insertOrder.customerEmail || null,\n      notes: insertOrder.notes || null,\n      createdAt: new Date()\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n  \n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    const updatedOrder = {\n      ...order,\n      ...updates,\n      id: order.id, // Preserve original ID\n      createdAt: order.createdAt // Preserve creation date\n    };\n    \n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return Array.from(this.orderItems.values()).filter(item => item.orderId === orderId);\n  }\n\n  async addOrderItem(insertOrderItem: InsertOrderItem): Promise<OrderItem> {\n    const id = randomUUID();\n    const orderItem: OrderItem = { ...insertOrderItem, id };\n    this.orderItems.set(id, orderItem);\n    return orderItem;\n  }\n\n  // Cart methods\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    return Array.from(this.cartItems.values()).filter(item => item.sessionId === sessionId);\n  }\n\n  async addToCart(insertCartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const existingItems = Array.from(this.cartItems.values());\n    const existingItem = existingItems.find(\n      item => item.sessionId === insertCartItem.sessionId && item.productId === insertCartItem.productId\n    );\n\n    if (existingItem) {\n      // Update quantity if item exists\n      existingItem.quantity += insertCartItem.quantity;\n      this.cartItems.set(existingItem.id, existingItem);\n      return existingItem;\n    } else {\n      // Add new item\n      const id = randomUUID();\n      const cartItem: CartItem = { \n        ...insertCartItem, \n        id,\n        createdAt: new Date()\n      };\n      this.cartItems.set(id, cartItem);\n      return cartItem;\n    }\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const item = this.cartItems.get(id);\n    if (!item) return undefined;\n\n    if (quantity <= 0) {\n      this.cartItems.delete(id);\n      return undefined;\n    }\n\n    item.quantity = quantity;\n    this.cartItems.set(id, item);\n    return item;\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    return this.cartItems.delete(id);\n  }\n\n  async clearCart(sessionId: string): Promise<boolean> {\n    const itemsToDelete = Array.from(this.cartItems.values())\n      .filter(item => item.sessionId === sessionId);\n    \n    itemsToDelete.forEach(item => this.cartItems.delete(item.id));\n    return true;\n  }\n\n  // Blog Posts methods\n  async getBlogPosts(): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values()).filter(post => post.isPublished);\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    return this.blogPosts.get(id);\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    return Array.from(this.blogPosts.values()).find(post => post.slug === slug);\n  }\n\n  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {\n    const id = randomUUID();\n    const post: BlogPost = {\n      ...insertPost,\n      id,\n      imageUrl: insertPost.imageUrl || null,\n      isPublished: insertPost.isPublished ?? true,\n      language: insertPost.language || 'uz',\n      source: insertPost.source || 'admin',\n      excerpt: insertPost.excerpt || null,\n      tags: insertPost.tags || null,\n      isAutoGenerated: insertPost.isAutoGenerated ?? false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.blogPosts.set(id, post);\n    return post;\n  }\n\n  async updateBlogPost(id: string, updates: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {\n    const post = this.blogPosts.get(id);\n    if (!post) return undefined;\n\n    const updatedPost = {\n      ...post,\n      ...updates,\n      id: post.id, // Preserve original ID\n      createdAt: post.createdAt, // Preserve creation date\n      updatedAt: new Date(), // Update modification date\n    };\n\n    this.blogPosts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async deleteBlogPost(id: string): Promise<boolean> {\n    return this.blogPosts.delete(id);\n  }\n\n  // Search implementation\n  async searchAll(query: string): Promise<{ products: Product[]; blogPosts: BlogPost[] }> {\n    const searchQuery = query.toLowerCase().trim();\n    \n    if (!searchQuery) {\n      return { products: [], blogPosts: [] };\n    }\n\n    console.log('üîç Qidiruv:', { searchQuery, totalProducts: this.products.size });\n    \n    // Debug: List all products first\n    console.log('üìã Barcha mahsulotlar:');\n    Array.from(this.products.values()).forEach(product => {\n      console.log('- ', { id: product.id, nameUz: product.nameUz, isActive: product.isActive });\n    });\n\n    // Search products\n    const products = Array.from(this.products.values()).filter(product => {\n      const nameUzMatch = product.nameUz.toLowerCase().includes(searchQuery);\n      const nameRuMatch = product.nameRu.toLowerCase().includes(searchQuery);\n      const descUzMatch = product.descriptionUz && product.descriptionUz.toLowerCase().includes(searchQuery);\n      const descRuMatch = product.descriptionRu && product.descriptionRu.toLowerCase().includes(searchQuery);\n      \n      const matches = nameUzMatch || nameRuMatch || descUzMatch || descRuMatch;\n      \n      console.log('üîç Tekshiruv:', { \n        id: product.id, \n        nameUz: product.nameUz, \n        searchQuery,\n        nameUzLower: product.nameUz.toLowerCase(),\n        nameUzMatch,\n        matches,\n        isActive: product.isActive\n      });\n      \n      if (matches) {\n        console.log('‚úÖ Topildi:', { \n          id: product.id, \n          nameUz: product.nameUz, \n          isActive: product.isActive,\n          nameUzMatch,\n          nameRuMatch \n        });\n      }\n      \n      return product.isActive && matches;\n    });\n\n    // Search blog posts\n    const blogPosts = Array.from(this.blogPosts.values()).filter(post => {\n      return post.isPublished && (\n        post.title.toLowerCase().includes(searchQuery) ||\n        post.content.toLowerCase().includes(searchQuery)\n      );\n    });\n\n    return { products, blogPosts };\n  }\n\n  // Chat Messages implementation\n  async getChatHistory(sessionId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(message => message.sessionId === sessionId)\n      .sort((a, b) => new Date(a.createdAt || '').getTime() - new Date(b.createdAt || '').getTime());\n  }\n\n  async saveChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      id,\n      userId: insertMessage.userId || null,\n      userName: insertMessage.userName || null,\n      userPhone: insertMessage.userPhone || null,\n      response: insertMessage.response || null,\n      createdAt: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async updateChatResponse(messageId: string, response: string): Promise<ChatMessage | undefined> {\n    const message = this.chatMessages.get(messageId);\n    if (!message) return undefined;\n\n    const updatedMessage = {\n      ...message,\n      response,\n    };\n\n    this.chatMessages.set(messageId, updatedMessage);\n    return updatedMessage;\n  }\n\n  // User Activities implementation\n  async logUserActivity(insertActivity: InsertUserActivity): Promise<UserActivity | undefined> {\n    const id = randomUUID();\n    const activity: UserActivity = {\n      ...insertActivity,\n      id,\n      userId: insertActivity.userId || null,\n      targetId: insertActivity.targetId || null,\n      targetType: insertActivity.targetType || null,\n      metadata: insertActivity.metadata || null,\n      ipAddress: insertActivity.ipAddress || null,\n      userAgent: insertActivity.userAgent || null,\n      timestamp: new Date(),\n    };\n    this.userActivities.set(id, activity);\n    return activity;\n  }\n\n  async getUserActivities(filters?: {\n    userId?: string;\n    sessionId?: string;\n    activityType?: string;\n    dateFrom?: Date;\n    dateTo?: Date;\n    limit?: number;\n  }): Promise<UserActivity[]> {\n    let activities = Array.from(this.userActivities.values());\n\n    if (filters) {\n      if (filters.userId) {\n        activities = activities.filter(activity => activity.userId === filters.userId);\n      }\n      if (filters.sessionId) {\n        activities = activities.filter(activity => activity.sessionId === filters.sessionId);\n      }\n      if (filters.activityType) {\n        activities = activities.filter(activity => activity.activityType === filters.activityType);\n      }\n      if (filters.dateFrom) {\n        activities = activities.filter(activity => \n          new Date(activity.timestamp || '') >= filters.dateFrom!\n        );\n      }\n      if (filters.dateTo) {\n        activities = activities.filter(activity => \n          new Date(activity.timestamp || '') <= filters.dateTo!\n        );\n      }\n    }\n\n    // Sort by timestamp descending (most recent first)\n    activities.sort((a, b) => \n      new Date(b.timestamp || '').getTime() - new Date(a.timestamp || '').getTime()\n    );\n\n    // Apply limit if specified\n    if (filters?.limit) {\n      activities = activities.slice(0, filters.limit);\n    }\n\n    return activities;\n  }\n\n  // Favorites methods\n  async getFavorites(userId: string): Promise<Favorite[]> {\n    return Array.from(this.favorites.values()).filter(fav => fav.userId === userId);\n  }\n\n  async addToFavorites(insertFavorite: InsertFavorite): Promise<Favorite> {\n    // Check if already exists\n    const existingFavorite = Array.from(this.favorites.values()).find(\n      fav => fav.userId === insertFavorite.userId && fav.productId === insertFavorite.productId\n    );\n    \n    if (existingFavorite) {\n      return existingFavorite;\n    }\n\n    const id = randomUUID();\n    const favorite: Favorite = {\n      ...insertFavorite,\n      id,\n      createdAt: new Date(),\n    };\n    this.favorites.set(id, favorite);\n    return favorite;\n  }\n\n  async removeFromFavorites(userId: string, productId: string): Promise<boolean> {\n    const favorite = Array.from(this.favorites.values()).find(\n      fav => fav.userId === userId && fav.productId === productId\n    );\n    \n    if (favorite) {\n      return this.favorites.delete(favorite.id);\n    }\n    return false;\n  }\n\n  async isFavorite(userId: string, productId: string): Promise<boolean> {\n    const favorite = Array.from(this.favorites.values()).find(\n      fav => fav.userId === userId && fav.productId === productId\n    );\n    return !!favorite;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":32055},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, json, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull().default(\"customer\"), // customer, seller, admin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nameUz: text(\"name_uz\").notNull(),\n  nameRu: text(\"name_ru\").notNull(),\n  descriptionUz: text(\"description_uz\"),\n  descriptionRu: text(\"description_ru\"),\n  image: text(\"image\"),\n  icon: text(\"icon\"), // Lucide React icon name (e.g., \"Package\", \"Shirt\", \"Utensils\")\n  slug: text(\"slug\").notNull().unique(),\n  parentId: varchar(\"parent_id\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nameUz: text(\"name_uz\").notNull(),\n  nameRu: text(\"name_ru\").notNull(),\n  descriptionUz: text(\"description_uz\"),\n  descriptionRu: text(\"description_ru\"),\n  categoryId: varchar(\"category_id\").notNull(),\n  sellerId: varchar(\"seller_id\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  wholesalePrice: decimal(\"wholesale_price\", { precision: 10, scale: 2 }).notNull(),\n  minQuantity: integer(\"min_quantity\").default(1),\n  wholesaleMinQuantity: integer(\"wholesale_min_quantity\").default(1),\n  stockQuantity: integer(\"stock_quantity\").default(0),\n  unit: text(\"unit\").notNull(), // kg, piece, box, etc.\n  specifications: json(\"specifications\").$type<Record<string, string>>(),\n  images: text(\"images\").array(),\n  videoUrl: text(\"video_url\"),\n  slug: text(\"slug\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  discountId: varchar(\"discount_id\"), // chegirma ID'si (ixtiyoriy)\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }), // chegirma miqdori\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, shipped, delivered, cancelled\n  deliveryMethod: text(\"delivery_method\").notNull().default(\"olib_ketish\"), // olib_ketish, kuryer\n  paymentMethod: text(\"payment_method\").notNull().default(\"naqd\"), // naqd, karta, qr_kod\n  paymentStatus: text(\"payment_status\").notNull().default(\"kutmoqda\"), // kutmoqda, to'langan, bekor_qilingan\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  customerEmail: text(\"customer_email\"),\n  shippingAddress: text(\"shipping_address\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Chegirmalar tizimi uchun jadval\nexport const discounts = pgTable(\"discounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(), // chegirma kodi masalan \"YANGI10\"\n  type: text(\"type\").notNull(), // \"percentage\" yoki \"fixed\"\n  value: integer(\"value\").notNull(), // foiz yoki so'm miqdori\n  isActive: boolean(\"is_active\").default(true), // chegirma faolmi\n  validFrom: timestamp(\"valid_from\").notNull(), // chegirma qachondan boshlab amal qiladi\n  validUntil: timestamp(\"valid_until\").notNull(), // chegirma qachon tugaydi\n  maxUses: integer(\"max_uses\").default(0), // maksimal foydalanish soni, 0 = cheksiz\n  usedCount: integer(\"used_count\").default(0), // hozirgacha foydalanilgan soni\n  targetType: text(\"target_type\").notNull().default(\"all_products\"), // \"all_products\", \"specific_products\", \"specific_categories\"\n  targetIds: jsonb(\"target_ids\").$type<string[]>(), // maxsus mahsulotlar/kategoriyalar uchun ID'lar\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sevimlilar tizimi uchun jadval\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(), // foydalanuvchi ID'si\n  productId: varchar(\"product_id\").notNull(), // mahsulot ID'si\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Push notification obunalari uchun jadval\nexport const pushSubscriptions = pgTable(\"push_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"), // foydalanuvchi ID'si (ixtiyoriy, guest uchun null bo'lishi mumkin)\n  subscription: jsonb(\"subscription\").notNull(), // brauzerdan keladigan to'liq subscription obyekti\n  userAgent: text(\"user_agent\"), // qaysi brauzer/qurilma\n  isActive: boolean(\"is_active\").default(true), // obuna faolmi\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertDiscountSchema = createInsertSchema(discounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  usedCount: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPushSubscriptionSchema = createInsertSchema(pushSubscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type Discount = typeof discounts.$inferSelect;\nexport type InsertDiscount = z.infer<typeof insertDiscountSchema>;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type PushSubscription = typeof pushSubscriptions.$inferSelect;\nexport type InsertPushSubscription = z.infer<typeof insertPushSubscriptionSchema>;\n\n// Blog Posts\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"), // Qisqacha mazmun\n  imageUrl: text(\"image_url\"),\n  slug: text(\"slug\").notNull().unique(),\n  tags: text(\"tags\").array(), // Kalit so'zlar va teglar\n  language: text(\"language\").notNull().default(\"uz\"), // uz, ru\n  isPublished: boolean(\"is_published\").default(true),\n  isAutoGenerated: boolean(\"is_auto_generated\").default(false), // AI tomonidan yaratilganmi\n  source: text(\"source\").default(\"admin\"), // admin, AI-Generator, manual\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Marketing Messages jadvalini qo'shamiz\nexport const marketingMessages = pgTable(\"marketing_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  imageUrl: text(\"image_url\"),\n  targetAudience: text(\"target_audience\"), // all, customers, sellers\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertMarketingMessageSchema = createInsertSchema(marketingMessages).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n});\n\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type MarketingMessage = typeof marketingMessages.$inferSelect;\nexport type InsertMarketingMessage = z.infer<typeof insertMarketingMessageSchema>;\n\n// Chat Messages\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  userId: varchar(\"user_id\"), // Optional - for logged-in users\n  userName: text(\"user_name\"), // User's name from chat form\n  userPhone: text(\"user_phone\"), // User's phone from chat form\n  message: text(\"message\").notNull(), // User message\n  response: text(\"response\"), // AI response\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// User Activities for Analytics\nexport const userActivities = pgTable(\"user_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"), // Optional - null for guests\n  sessionId: text(\"session_id\").notNull(), // Always track session\n  activityType: text(\"activity_type\").notNull(), // product_view, add_to_cart, remove_from_cart, checkout_start, order_placed, search, login, register, page_view\n  targetId: varchar(\"target_id\"), // Related object ID (product_id, category_id, etc.)\n  targetType: text(\"target_type\"), // product, category, order, page, etc.\n  metadata: json(\"metadata\").$type<Record<string, any>>(), // Additional data like search query, quantity, etc.\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertUserActivitySchema = createInsertSchema(userActivities).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type UserActivity = typeof userActivities.$inferSelect;\nexport type InsertUserActivity = z.infer<typeof insertUserActivitySchema>;\n","size_bytes":11779},"shared/seo.ts":{"content":"import type { Product, BlogPost, Category } from \"./schema\";\n\nexport interface SEOMetaTags {\n  title: string;\n  description: string;\n  keywords: string[];\n  ogTitle: string;\n  ogDescription: string;\n  ogImage?: string;\n  ogUrl?: string;\n  twitterCard: string;\n  twitterTitle: string;\n  twitterDescription: string;\n  twitterImage?: string;\n  canonicalUrl?: string;\n  structuredData?: object;\n}\n\n// Asosiy sayt meta-teglari\nexport const DEFAULT_SEO: SEOMetaTags = {\n  title: \"OptomMarket.uz - O'zbekistondagi Eng Yirik Optom Savdo Platformasi\",\n  description: \"Polietilen paketlar, bir martalik idishlar, elektronika va kiyim-kechakni optom narxlarda xarid qiling. Ishonchli yetkazib berish va sifatli mahsulotlar OptomMarket.uz da!\",\n  keywords: [\n    \"optom savdo\", \"optom market\", \"polietilen paketlar\", \"bir martalik idishlar\", \n    \"optom narx\", \"elektronika optom\", \"kiyim optom\", \"O'zbekiston\", \"wholesale\"\n  ],\n  ogTitle: \"OptomMarket.uz - O'zbekistondagi Eng Yirik Optom Savdo Platformasi\",\n  ogDescription: \"Polietilen paketlar, bir martalik idishlar va boshqa mahsulotlarni optom narxlarda xarid qiling!\",\n  ogImage: \"/og-image.jpg\",\n  twitterCard: \"summary_large_image\",\n  twitterTitle: \"OptomMarket.uz - Optom Savdo Platformasi\",\n  twitterDescription: \"O'zbekistondagi eng ishonchli optom savdo platformasi!\"\n};\n\n// Mahsulot uchun meta-teglar generatori\nexport function generateProductMetaTags(product: Partial<Product>): SEOMetaTags {\n  const title = `${product.nameUz || 'Mahsulot'} - Optom Narxda | OptomMarket.uz`;\n  const description = `${product.nameUz || 'Mahsulot'}ni optom narxda xarid qiling. ${product.descriptionUz ? product.descriptionUz.substring(0, 120) + '...' : 'Sifatli mahsulot, tez yetkazib berish.'}`;\n  \n  const keywords = [\n    (product.nameUz || '').toLowerCase(),\n    'optom narx',\n    'optom savdo',\n    'wholesale',\n    'OptomMarket'\n  ];\n\n  // Kategoriya nomlarini qo'shish\n  if (product.categoryId) {\n    keywords.push(`${product.categoryId} optom`);\n  }\n\n  const structuredData: any = {\n    \"@context\": \"https://schema.org/\",\n    \"@type\": \"Product\",\n    \"name\": product.nameUz,\n    \"description\": product.descriptionUz,\n    \"sku\": product.id,\n    \"brand\": {\n      \"@type\": \"Brand\",\n      \"name\": \"OptomMarket.uz\"\n    },\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"url\": `https://optommarket.uz/products/${product.slug}`,\n      \"priceCurrency\": \"UZS\",\n      \"price\": product.wholesalePrice || product.price,\n      \"availability\": (product.stockQuantity || 0) > 0 ? \"https://schema.org/InStock\" : \"https://schema.org/OutOfStock\",\n      \"seller\": {\n        \"@type\": \"Organization\",\n        \"name\": \"OptomMarket.uz\"\n      }\n    }\n  };\n\n  if (product.images && product.images.length > 0) {\n    structuredData.image = product.images[0];\n  }\n\n  return {\n    title,\n    description,\n    keywords,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: product.images?.[0] || DEFAULT_SEO.ogImage,\n    ogUrl: `https://optommarket.uz/products/${product.slug}`,\n    twitterCard: \"summary_large_image\",\n    twitterTitle: title,\n    twitterDescription: description,\n    twitterImage: product.images?.[0] || DEFAULT_SEO.ogImage,\n    canonicalUrl: `https://optommarket.uz/products/${product.slug}`,\n    structuredData\n  };\n}\n\n// Blog post uchun meta-teglar generatori\nexport function generateBlogPostMetaTags(post: BlogPost): SEOMetaTags {\n  const title = `${post.title} | OptomMarket.uz Blog`;\n  const description = post.excerpt || (post.content.substring(0, 150) + '...');\n  \n  const keywords = [\n    'optom savdo blog',\n    'biznes maslahatlari',\n    'OptomMarket blog',\n    'wholesale tips'\n  ];\n\n  // Blog post teglarini qo'shish\n  if (post.tags) {\n    keywords.push(...post.tags);\n  }\n\n  const structuredData: any = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Article\",\n    \"headline\": post.title,\n    \"description\": description,\n    \"author\": {\n      \"@type\": \"Organization\",\n      \"name\": \"OptomMarket.uz\"\n    },\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"OptomMarket.uz\",\n      \"logo\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://optommarket.uz/logo.png\"\n      }\n    },\n    \"datePublished\": post.createdAt,\n    \"dateModified\": post.updatedAt,\n    \"mainEntityOfPage\": {\n      \"@type\": \"WebPage\",\n      \"@id\": `https://optommarket.uz/blog/${post.slug}`\n    }\n  };\n\n  if (post.imageUrl) {\n    structuredData.image = {\n      \"@type\": \"ImageObject\",\n      \"url\": post.imageUrl\n    };\n  }\n\n  return {\n    title,\n    description,\n    keywords,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: post.imageUrl || DEFAULT_SEO.ogImage,\n    ogUrl: `https://optommarket.uz/blog/${post.slug}`,\n    twitterCard: \"summary_large_image\",\n    twitterTitle: title,\n    twitterDescription: description,\n    twitterImage: post.imageUrl || DEFAULT_SEO.ogImage,\n    canonicalUrl: `https://optommarket.uz/blog/${post.slug}`,\n    structuredData\n  };\n}\n\n// Kategoriya uchun meta-teglar generatori\nexport function generateCategoryMetaTags(category: Category): SEOMetaTags {\n  const title = `${category.nameUz} - Optom Narxda | OptomMarket.uz`;\n  const description = `${category.nameUz} kategoriyasidagi mahsulotlarni optom narxda xarid qiling. ${category.descriptionUz || 'Keng assortiment, sifatli mahsulotlar va qulay narxlar OptomMarket.uz da!'}`;\n  \n  const keywords = [\n    category.nameUz.toLowerCase(),\n    `${category.nameUz.toLowerCase()} optom`,\n    'optom savdo',\n    'wholesale',\n    'OptomMarket'\n  ];\n\n  const structuredData = {\n    \"@context\": \"https://schema.org/\",\n    \"@type\": \"CollectionPage\",\n    \"name\": category.nameUz,\n    \"description\": description,\n    \"url\": `https://optommarket.uz/category/${category.slug}`,\n    \"mainEntity\": {\n      \"@type\": \"ItemList\",\n      \"name\": category.nameUz\n    }\n  };\n\n  return {\n    title,\n    description,\n    keywords,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: category.image || DEFAULT_SEO.ogImage,\n    ogUrl: `https://optommarket.uz/category/${category.slug}`,\n    twitterCard: \"summary_large_image\",\n    twitterTitle: title,\n    twitterDescription: description,\n    twitterImage: category.image || DEFAULT_SEO.ogImage,\n    canonicalUrl: `https://optommarket.uz/category/${category.slug}`,\n    structuredData\n  };\n}\n\n// Katalog sahifasi uchun meta-teglar\nexport function generateCatalogMetaTags(): SEOMetaTags {\n  const title = \"Katalog - Barcha Mahsulotlar | OptomMarket.uz\";\n  const description = \"OptomMarket.uz da barcha kategoriyalar va mahsulotlarni ko'rib chiqing. Polietilen paketlar, bir martalik idishlar, elektronika va boshqa mahsulotlar optom narxlarda!\";\n  \n  const keywords = [\n    'katalog', 'mahsulotlar katalogi', 'optom katalog', 'barcha mahsulotlar',\n    'polietilen paketlar', 'bir martalik idishlar', 'wholesale catalog'\n  ];\n\n  return {\n    title,\n    description,\n    keywords,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: DEFAULT_SEO.ogImage,\n    ogUrl: \"https://optommarket.uz/catalog\",\n    twitterCard: \"summary_large_image\",\n    twitterTitle: title,\n    twitterDescription: description,\n    twitterImage: DEFAULT_SEO.ogImage,\n    canonicalUrl: \"https://optommarket.uz/catalog\"\n  };\n}\n\n// Blog sahifasi uchun meta-teglar\nexport function generateBlogMetaTags(): SEOMetaTags {\n  const title = \"Blog - Biznes Maslahatlari va Yangiliklar | OptomMarket.uz\";\n  const description = \"Optom savdo, biznes rivojlantirish va mahsulot tanlash bo'yicha foydali maqolalar. OptomMarket.uz blogida eng so'nggi yangiliklar va maslahatlar!\";\n  \n  const keywords = [\n    'optom savdo blog', 'biznes maslahatlari', 'wholesale blog', 'business tips',\n    'optom biznes', 'savdo maslahatlari', 'OptomMarket blog'\n  ];\n\n  return {\n    title,\n    description,\n    keywords,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: DEFAULT_SEO.ogImage,\n    ogUrl: \"https://optommarket.uz/blog\",\n    twitterCard: \"summary_large_image\",\n    twitterTitle: title,\n    twitterDescription: description,\n    twitterImage: DEFAULT_SEO.ogImage,\n    canonicalUrl: \"https://optommarket.uz/blog\"\n  };\n}\n\n// Aloqa sahifasi uchun meta-teglar\nexport function generateContactMetaTags(): SEOMetaTags {\n  const title = \"Biz Bilan Bog'laning | OptomMarket.uz\";\n  const description = \"OptomMarket.uz bilan bog'laning. Bizning manzil, telefon raqam va email. Savol va takliflaringizni yuboring - biz har doim yordamga tayyormiz!\";\n  \n  const keywords = [\n    'aloqa', 'bog\\'laning', 'telefon', 'manzil', 'email',\n    'OptomMarket aloqa', 'contact', 'support'\n  ];\n\n  const structuredData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"ContactPage\",\n    \"name\": \"Biz Bilan Bog'laning\",\n    \"description\": description,\n    \"url\": \"https://optommarket.uz/contact\",\n    \"mainEntity\": {\n      \"@type\": \"Organization\",\n      \"name\": \"OptomMarket.uz\",\n      \"telephone\": \"+998 71 123-45-67\",\n      \"email\": \"info@optommarket.uz\",\n      \"url\": \"https://optommarket.uz\"\n    }\n  };\n\n  return {\n    title,\n    description,\n    keywords,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: DEFAULT_SEO.ogImage,\n    ogUrl: \"https://optommarket.uz/contact\",\n    twitterCard: \"summary\",\n    twitterTitle: title,\n    twitterDescription: description,\n    twitterImage: DEFAULT_SEO.ogImage,\n    canonicalUrl: \"https://optommarket.uz/contact\",\n    structuredData\n  };\n}","size_bytes":9346},"client/public/service-worker.js":{"content":"// Service Worker - Push notification qabul qilish uchun\n\n// Service Worker o'rnatilayotganda\nself.addEventListener('install', (event) => {\n  console.log('Service Worker o\\'rnatildi');\n  self.skipWaiting(); // Yangi service worker'ni darhol faollashtirish\n});\n\n// Service Worker faollashganda  \nself.addEventListener('activate', (event) => {\n  console.log('Service Worker faollashtirildi');\n  event.waitUntil(\n    self.clients.claim() // Barcha ochiq tab'larni boshqarish\n  );\n});\n\n// Push notification kelganda\nself.addEventListener('push', (event) => {\n  console.log('Push notification keldi:', event);\n  \n  if (!event.data) {\n    console.log('Push event ma\\'lumotlari yo\\'q');\n    return;\n  }\n\n  try {\n    const data = event.data.json();\n    console.log('Push ma\\'lumotlari:', data);\n    \n    const options = {\n      body: data.body,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: data.tag || 'optombazar-notification',\n      data: {\n        url: data.url || '/',\n        timestamp: data.data?.timestamp || Date.now(),\n      },\n      actions: [\n        {\n          action: 'open',\n          title: 'Ko\\'rish'\n        },\n        {\n          action: 'close',\n          title: 'Yopish'\n        }\n      ],\n      requireInteraction: false, // Avtomatik ko'rsatish\n      vibrate: [200, 100, 200], // Vibratsiya naqshi\n      silent: false,\n      renotify: true,\n    };\n\n    event.waitUntil(\n      self.registration.showNotification(data.title, options)\n    );\n  } catch (error) {\n    console.error('Push notification ko\\'rsatishda xatolik:', error);\n    // Fallback notification\n    event.waitUntil(\n      self.registration.showNotification('OptomBazar.uz', {\n        body: 'Yangilik mavjud!',\n        icon: '/icon-192x192.png',\n      })\n    );\n  }\n});\n\n// Notification bosilganda\nself.addEventListener('notificationclick', (event) => {\n  console.log('Notification bosildi:', event);\n  \n  const notification = event.notification;\n  const action = event.action;\n  \n  if (action === 'close') {\n    notification.close();\n    return;\n  }\n  \n  // Notification yopish\n  notification.close();\n  \n  // Sahifani ochish yoki fokuslash\n  const urlToOpen = notification.data?.url || '/';\n  \n  event.waitUntil(\n    self.clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true\n    }).then((clientList) => {\n      // Agar sahifa allaqachon ochiq bo'lsa, uni fokuslash\n      for (let i = 0; i < clientList.length; i++) {\n        const client = clientList[i];\n        if (client.url.includes(urlToOpen) && 'focus' in client) {\n          return client.focus();\n        }\n      }\n      \n      // Agar sahifa ochiq bo'lmasa, yangi tab ochish\n      if (self.clients.openWindow) {\n        return self.clients.openWindow(urlToOpen);\n      }\n    })\n  );\n});\n\n// Background sync uchun (offline holat)\nself.addEventListener('sync', (event) => {\n  console.log('Background sync:', event);\n  \n  if (event.tag === 'push-subscription-sync') {\n    event.waitUntil(syncPushSubscription());\n  }\n});\n\n// Push subscription'ni sync qilish funksiyasi\nasync function syncPushSubscription() {\n  try {\n    const registration = await self.registration;\n    const subscription = await registration.pushManager.getSubscription();\n    \n    if (subscription) {\n      console.log('Push subscription syncing...');\n      // Bu yerda server bilan sync qilish logic'i bo'lishi mumkin\n    }\n  } catch (error) {\n    console.error('Push subscription sync xatoligi:', error);\n  }\n}","size_bytes":3460},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/components/language-provider\";\nimport { CartProvider } from \"@/context/CartContext\";\nimport { AuthProvider } from \"@/context/AuthContext\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport AllCategoriesPage from \"@/pages/AllCategoriesPage\";\nimport Products from \"@/pages/products\";\nimport Contact from \"@/pages/contact\";\nimport Catalog from \"@/pages/catalog\";\nimport CategoryDetail from \"@/pages/category-detail\";\nimport ProductDetailsPage from \"@/pages/ProductDetailsPage\";\nimport CartPage from \"@/pages/CartPage\";\nimport CheckoutPage from \"@/pages/CheckoutPage\";\nimport RegisterPage from \"@/pages/RegisterPage\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport ProfilePage from \"@/pages/ProfilePage\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport AdminRoute from \"@/components/AdminRoute\";\nimport OrderSuccessPage from \"@/pages/OrderSuccessPage\";\nimport AdminDashboardPage from \"@/pages/admin/AdminDashboardPage\";\nimport AdminProductsPage from \"@/pages/admin/AdminProductsPage\";\nimport AdminOrdersPage from \"@/pages/admin/AdminOrdersPage\";\nimport AdminBlogPage from \"@/pages/admin/AdminBlogPage\";\nimport AdminCategoriesPage from \"@/pages/admin/AdminCategoriesPage\";\nimport AdminSEOPage from \"@/pages/admin/AdminSEOPage\";\nimport AdminDiscountsPage from \"@/pages/admin/AdminDiscountsPage\";\nimport AdminPushNotificationsPage from \"@/pages/admin/AdminPushNotificationsPage\";\nimport AdminAnalyticsPage from \"@/pages/admin/AdminAnalyticsPage\";\nimport AdminMarketingPage from \"@/pages/admin/AdminMarketingPage\";\nimport AdminMarketingConfigPage from \"@/pages/admin/AdminMarketingConfigPage\";\nimport ReportsPage from \"@/pages/admin/ReportsPage\";\nimport BlogPage from \"@/pages/BlogPage\";\nimport BlogPostPage from \"@/pages/BlogPostPage\";\nimport SearchPage from \"@/pages/SearchPage\";\nimport FavoritesPage from \"@/pages/FavoritesPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { AIChatWidget } from \"@/components/AIChatWidget\";\nimport { MobileBottomNav } from \"@/components/MobileBottomNav\";\nimport { Header } from \"@/components/header\";\nimport { AppDownloadPrompt } from \"@/components/AppDownloadPrompt\";\nimport { AppInstallPrompt } from \"@/components/AppInstallPrompt\";\nimport { PushNotificationSetup } from \"@/components/PushNotificationSetup\";\nimport { HelmetProvider } from 'react-helmet-async';\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/categories\" component={AllCategoriesPage} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/catalog\" component={Catalog} />\n      <Route path=\"/category/:slug\">\n        {(params) => <CategoryDetail params={params} />}\n      </Route>\n      <Route path=\"/products/:slug\">\n        {(params) => <ProductDetailsPage />}\n      </Route>\n      <Route path=\"/cart\" component={CartPage} />\n      <Route path=\"/checkout\" component={CheckoutPage} />\n      <Route path=\"/register\" component={RegisterPage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/profile\">\n        {() => (\n          <ProtectedRoute>\n            <ProfilePage />\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/favorites\" component={FavoritesPage} />\n      <Route path=\"/admin\">\n        {() => (\n          <AdminRoute>\n            <AdminDashboardPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/products\">\n        {() => (\n          <AdminRoute>\n            <AdminProductsPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/orders\">\n        {() => (\n          <AdminRoute>\n            <AdminOrdersPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/blog\">\n        {() => (\n          <AdminRoute>\n            <AdminBlogPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/categories\">\n        {() => (\n          <AdminRoute>\n            <AdminCategoriesPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/seo\">\n        {() => (\n          <AdminRoute>\n            <AdminSEOPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/reports\">\n        {() => (\n          <AdminRoute>\n            <ReportsPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/discounts\">\n        {() => (\n          <AdminRoute>\n            <AdminDiscountsPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/push-notifications\">\n        {() => (\n          <AdminRoute>\n            <AdminPushNotificationsPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/analytics\">\n        {() => (\n          <AdminRoute>\n            <AdminAnalyticsPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/marketing\">\n        {() => (\n          <AdminRoute>\n            <AdminMarketingPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/marketing/config\">\n        {() => (\n          <AdminRoute>\n            <AdminMarketingConfigPage />\n          </AdminRoute>\n        )}\n      </Route>\n      <Route path=\"/order-success\" component={OrderSuccessPage} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/blog\" component={BlogPage} />\n      <Route path=\"/blog/:slug\" component={BlogPostPage} />\n      <Route path=\"/search\" component={SearchPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <HelmetProvider>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider>\n          <LanguageProvider>\n            <AuthProvider>\n              <CartProvider>\n                <TooltipProvider>\n                  <Toaster />\n                  <Header />\n                  <main className=\"pb-20 md:pb-0\">\n                    <Router />\n                  </main>\n                  <MobileBottomNav />\n                  <AIChatWidget />\n                  <AppDownloadPrompt />\n                  <AppInstallPrompt />\n                </TooltipProvider>\n              </CartProvider>\n            </AuthProvider>\n          </LanguageProvider>\n        </ThemeProvider>\n      </QueryClientProvider>\n    </HelmetProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6631},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 20 14.3% 4.1%;\n    --card: 0 0% 100%;\n    --card-foreground: 20 14.3% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 20 14.3% 4.1%;\n    --primary: 217 91% 60%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 210 40% 98%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 98%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 98%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 60 9.1% 97.8%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 217 91% 60%;\n    --radius: 0.75rem;\n    \n    /* Custom gradient colors */\n    --gradient-primary: linear-gradient(135deg, #3b82f6 0%, #ef4444 100%);\n    --gradient-secondary: linear-gradient(135deg, #06b6d4 0%, #8b5cf6 100%);\n    --gradient-accent: linear-gradient(135deg, #f59e0b 0%, #ef4444 100%);\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 90%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n    overflow-x: hidden;\n  }\n}\n\n@layer utilities {\n  .font-inter {\n    font-family: 'Inter', sans-serif;\n  }\n  \n  /* Modern gradient utilities */\n  .gradient-primary {\n    background: var(--gradient-primary);\n  }\n  \n  .gradient-secondary {\n    background: var(--gradient-secondary);\n  }\n  \n  .gradient-accent {\n    background: var(--gradient-accent);\n  }\n  \n  /* Glass morphism effect */\n  .glass {\n    backdrop-filter: blur(16px) saturate(180%);\n    background-color: rgba(255, 255, 255, 0.75);\n    border: 1px solid rgba(255, 255, 255, 0.125);\n  }\n  \n  .glass-dark {\n    backdrop-filter: blur(16px) saturate(180%);\n    background-color: rgba(17, 25, 40, 0.75);\n    border: 1px solid rgba(255, 255, 255, 0.125);\n  }\n  \n  /* Modern shadows */\n  .shadow-modern {\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  }\n  \n  .shadow-glow {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);\n  }\n  \n  /* Smooth animations */\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .animate-bounce-slow {\n    animation: bounce 3s infinite;\n  }\n}\n\n/* Custom utility classes for the design */\n.text-primary {\n  color: var(--blue-primary);\n}\n\n.bg-primary {\n  background-color: var(--blue-primary);\n}\n\n.border-primary {\n  border-color: var(--blue-primary);\n}\n\n.hover\\:bg-blue-700:hover {\n  background-color: var(--blue-700);\n}\n\n.hover\\:text-primary:hover {\n  color: var(--blue-primary);\n}\n\n.text-success {\n  color: var(--success);\n}\n\n.bg-success {\n  background-color: var(--success);\n}\n\n.text-warning {\n  color: var(--warning);\n}\n\n.bg-warning {\n  background-color: var(--warning);\n}\n\n/* Custom keyframes */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes glow {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 30px rgba(59, 130, 246, 0.8);\n  }\n}\n\n/* Smooth scroll behavior */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--primary));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary) / 0.8);\n}\n","size_bytes":4348},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/cron/blog-scheduler.ts":{"content":"import * as cron from 'node-cron';\nimport { generateBlogPost } from '../services/ai-content-generator';\nimport { sendBlogPostToChannel } from '../services/telegram-bot';\nimport type { IStorage } from '../storage';\n\nlet isSchedulerActive = false;\n\n// Blog post yaratish va saqlash funksiyasi\nasync function createAndSaveBlogPost(storage: IStorage, language: 'uz' | 'ru' = 'uz'): Promise<void> {\n  try {\n    console.log(`${language.toUpperCase()} tilida yangi blog post yaratilmoqda...`);\n    \n    // AI orqali kontent yaratish\n    const blogContent = await generateBlogPost(language, storage);\n    \n    // Ma'lumotlar bazasiga saqlash\n    const blogPost = await storage.createBlogPost({\n      title: blogContent.title,\n      content: blogContent.content,\n      excerpt: blogContent.excerpt,\n      slug: blogContent.slug,\n      tags: blogContent.tags,\n      language: language,\n      isAutoGenerated: true,\n      source: 'AI-Generator',\n      isPublished: true,\n      imageUrl: null\n    });\n\n    console.log(`Blog post yaratildi va saqlandi: ${blogPost.title}`);\n\n    // Telegram kanaliga yuborish\n    try {\n      await sendBlogPostToChannel(blogPost);\n      console.log('Blog post Telegram kanaliga yuborildi');\n    } catch (telegramError) {\n      console.error('Telegram kanaliga yuborishda xatolik:', telegramError);\n    }\n\n  } catch (error) {\n    console.error('Blog post yaratishda xatolik:', error);\n    throw error;\n  }\n}\n\n// Yangi mahsulotlarni tekshirish va yuborish\nasync function checkAndSendNewProducts(storage: IStorage): Promise<void> {\n  try {\n    // Bugungi yangi mahsulotlarni olish\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const allProducts = await storage.getProducts();\n    const newProducts = allProducts.filter(product => {\n      if (!product.createdAt) return false;\n      const productDate = new Date(product.createdAt);\n      productDate.setHours(0, 0, 0, 0);\n      return productDate.getTime() === today.getTime();\n    });\n\n    if (newProducts.length > 0) {\n      console.log(`${newProducts.length} ta yangi mahsulot topildi`);\n      \n      // Har bir yangi mahsulotni Telegram'ga yuborish\n      for (const product of newProducts) {\n        try {\n          const { sendProductToChannel } = await import('../services/telegram-bot');\n          await sendProductToChannel(product);\n          \n          // Mahsulotlar orasida 5 soniya kutish\n          await new Promise(resolve => setTimeout(resolve, 5000));\n        } catch (error) {\n          console.error(`Mahsulotni yuborishda xatolik: ${product.nameUz}`, error);\n        }\n      }\n    } else {\n      console.log('Bugun yangi mahsulotlar qo\\'shilmagan');\n      \n      // Agar yangi mahsulotlar bo'lmasa, tasodifiy mahsulotni \"tavsiya\" sifatida yuborish\n      const featuredProducts = allProducts.filter(p => p.isFeatured && p.isActive);\n      if (featuredProducts.length > 0) {\n        const randomProduct = featuredProducts[Math.floor(Math.random() * featuredProducts.length)];\n        \n        try {\n          const { sendProductToChannel } = await import('../services/telegram-bot');\n          await sendProductToChannel(randomProduct);\n          console.log(`Tavsiya etilgan mahsulot yuborildi: ${randomProduct.nameUz}`);\n        } catch (error) {\n          console.error('Tavsiya etilgan mahsulotni yuborishda xatolik:', error);\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Mahsulotlarni tekshirishda xatolik:', error);\n  }\n}\n\n// Marketing xabarlarini yuborish funksiyasi\nasync function sendMarketingCampaign(storage: IStorage): Promise<void> {\n  try {\n    const marketingMessages = [\n      {\n        title: \"üî• MAXSUS CHEGIRMA!\",\n        content: `OptomBazar.uz da barcha plastik idishlar uchun 15% chegirma!\n        \nüìÖ Muddati: 3 kun\nüí∞ Minimal buyurtma: 500,000 so'm\nüöö Bepul yetkazib berish Toshkent bo'ylab\n\nUshbu imkoniyatni boy bermang! Bugun buyurtma bering.`,\n        imageUrl: null\n      },\n      {\n        title: \"üéØ YANGI MIJOZLAR UCHUN\",\n        content: `Birinchi buyurtmangizga 20% chegirma!\n\n‚úÖ Sifatli mahsulotlar\n‚úÖ Tez yetkazib berish  \n‚úÖ Professional xizmat\n‚úÖ Optom narxlar\n\nRo'yxatdan o'ting va chegirmangizni oling!`,\n        imageUrl: null\n      },\n      {\n        title: \"üì¶ OMMABOP MAHSULOTLAR\",\n        content: `Eng ko'p sotilayotgan mahsulotlarimiz:\n\nü•á Polietilen paketlar - 25,000 so'm/kg dan\nü•à Bir martalik idishlar - 15,000 so'm/to'plam dan  \nü•â Plastik konteynerlar - 35,000 so'm/dona dan\n\nBugun buyurtma bering va eng yaxshi narxlardan foydalaning!`,\n        imageUrl: null\n      }\n    ];\n\n    // Tasodifiy marketing xabarini tanlash\n    const randomMessage = marketingMessages[Math.floor(Math.random() * marketingMessages.length)];\n    \n    const { sendMarketingMessage } = await import('../services/telegram-bot');\n    await sendMarketingMessage(randomMessage as any);\n    \n    console.log(`Marketing xabari yuborildi: ${randomMessage.title}`);\n  } catch (error) {\n    console.error('Marketing kampaniyasida xatolik:', error);\n  }\n}\n\n// Asosiy scheduler funksiyasi\nexport function startBlogScheduler(storage: IStorage): void {\n  if (isSchedulerActive) {\n    console.log('Blog scheduler allaqachon faol');\n    return;\n  }\n\n  console.log('Blog scheduler ishga tushirilmoqda...');\n  \n  // Har 2 soatda blog post yaratish (08:00 dan 20:00 gacha)\n  cron.schedule('0 8-20/2 * * *', async () => {\n    console.log('Blog post yaratish vazifasi boshlandi...');\n    \n    try {\n      // O'zbek va rus tillarini navbat bilan tanlash\n      const currentHour = new Date().getHours();\n      const language = currentHour % 4 === 0 ? 'uz' : 'ru';\n      \n      await createAndSaveBlogPost(storage, language);\n    } catch (error) {\n      console.error('Blog post yaratishda xatolik:', error);\n    }\n  }, {\n    timezone: \"Asia/Tashkent\"\n  });\n\n  // Har kuni ertalab soat 9:00 da yangi mahsulotlarni tekshirish\n  cron.schedule('0 9 * * *', async () => {\n    console.log('Kunlik mahsulot tekshiruvi boshlandi...');\n    \n    try {\n      await checkAndSendNewProducts(storage);\n    } catch (error) {\n      console.error('Kunlik mahsulot tekshiruvida xatolik:', error);\n    }\n  }, {\n    timezone: \"Asia/Tashkent\"\n  });\n\n  // Kechqurun soat 18:00 da qo'shimcha mahsulot reklamasi\n  cron.schedule('0 18 * * *', async () => {\n    console.log('Kechki mahsulot reklamasi boshlandi...');\n    \n    try {\n      const allProducts = await storage.getProducts();\n      const activeProducts = allProducts.filter(p => p.isActive);\n      \n      if (activeProducts.length > 0) {\n        const randomProduct = activeProducts[Math.floor(Math.random() * activeProducts.length)];\n        const { sendProductToChannel } = await import('../services/telegram-bot');\n        await sendProductToChannel(randomProduct);\n        console.log(`Kechki reklama yuborildi: ${randomProduct.nameUz}`);\n      }\n    } catch (error) {\n      console.error('Kechki reklama yuborishda xatolik:', error);\n    }\n  }, {\n    timezone: \"Asia/Tashkent\"\n  });\n\n  // Haftalik marketing kampaniyasi - har dushanba va juma 14:00 da\n  cron.schedule('0 14 * * 1,5', async () => {\n    console.log('Haftalik marketing kampaniyasi boshlandi...');\n    \n    try {\n      await sendMarketingCampaign(storage);\n    } catch (error) {\n      console.error('Marketing kampaniyasida xatolik:', error);\n    }\n  }, {\n    timezone: \"Asia/Tashkent\"\n  });\n\n  // Haftalik hisobot - har yakshanba 20:00 da\n  cron.schedule('0 20 * * 0', async () => {\n    console.log('Haftalik hisobot yuborish boshlandi...');\n    \n    try {\n      const { sendWeeklyReport } = await import('../services/telegram-bot');\n      await sendWeeklyReport(storage);\n    } catch (error) {\n      console.error('Haftalik hisorot yuborishda xatolik:', error);\n    }\n  }, {\n    timezone: \"Asia/Tashkent\"\n  });\n\n  // Oylik maxsus aksiya - har oyning 1-sanasida 10:00 da\n  cron.schedule('0 10 1 * *', async () => {\n    console.log('Oylik maxsus aksiya e\\'lon qilinmoqda...');\n    \n    try {\n      const { announceSpecialOffer } = await import('../services/telegram-bot');\n      const nextMonth = new Date();\n      nextMonth.setMonth(nextMonth.getMonth() + 1);\n      \n      await announceSpecialOffer({\n        title: \"OYLIK MAXSUS AKSIYA\",\n        description: \"Ushbu oyda barcha mahsulotlarga maxsus chegirmalar! Optom xaridlar uchun qo'shimcha bonuslar.\",\n        discount: 20,\n        validUntil: nextMonth,\n        minOrder: 1000000\n      });\n    } catch (error) {\n      console.error('Oylik aksiya e\\'lon qilishda xatolik:', error);\n    }\n  }, {\n    timezone: \"Asia/Tashkent\"\n  });\n\n  isSchedulerActive = true;\n  console.log('Blog scheduler muvaffaqiyatli ishga tushirildi!');\n  console.log('- Blog postlar: har 2 soatda (08:00-20:00)');\n  console.log('- Yangi mahsulotlar: har kuni 09:00');\n  console.log('- Kechki reklama: har kuni 18:00');\n  console.log('- Marketing: dushanba va juma 14:00');\n  console.log('- Haftalik hisorot: yakshanba 20:00');\n  console.log('- Oylik aksiya: har oyning 1-sanasida 10:00');\n}\n\n// Scheduler'ni to'xtatish\nexport function stopBlogScheduler(): void {\n  if (!isSchedulerActive) {\n    console.log('Blog scheduler allaqachon to\\'xtatilgan');\n    return;\n  }\n  \n  cron.getTasks().forEach((task, name) => {\n    task.destroy();\n  });\n  \n  isSchedulerActive = false;\n  console.log('Blog scheduler to\\'xtatildi');\n}\n\n// Test funksiyasi - darhol blog post yaratish\nexport async function createTestBlogPost(storage: IStorage, language: 'uz' | 'ru' = 'uz'): Promise<void> {\n  console.log('Test blog post yaratilmoqda...');\n  await createAndSaveBlogPost(storage, language);\n}\n\n// Test funksiyasi - darhol marketing xabari yuborish\nexport async function sendTestMarketingMessage(storage: IStorage): Promise<void> {\n  console.log('Test marketing xabari yuborilmoqda...');\n  await sendMarketingCampaign(storage);\n}\n\n// Scheduler statusini tekshirish\nexport function isSchedulerRunning(): boolean {\n  return isSchedulerActive;\n}\n","size_bytes":9915},"server/middleware/adminAuth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { storage } from '../storage';\n\nexport async function adminAuth(req: Request, res: Response, next: NextFunction) {\n  try {\n    // Check if user is authenticated\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Tizimga kirish talab qilinadi\" });\n    }\n\n    // Get user from storage\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"Foydalanuvchi topilmadi\" });\n    }\n\n    // Check if user has admin role\n    if (user.role !== 'admin') {\n      return res.status(403).json({ message: \"Ruxsat yo'q. Administrator huquqlari talab qilinadi.\" });\n    }\n\n    // Add user to request for further use\n    (req as any).user = user;\n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n}","size_bytes":882},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage.js\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\n\nexport async function requireAuth(req: Request, res: Response, next: NextFunction) {\n  try {\n    // Check if user is authenticated\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Tizimga kirish talab qilinadi\" });\n    }\n\n    // Get user from storage\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"Foydalanuvchi topilmadi\" });\n    }\n\n    // Add user to request for further use\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n}\n\nexport function requireRole(role: string) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Avtorizatsiya talab qilinadi\" });\n      }\n\n      if (req.user.role !== role) {\n        return res.status(403).json({ \n          message: `Ruxsat yo'q. ${role} huquqlari talab qilinadi.` \n        });\n      }\n\n      next();\n    } catch (error) {\n      res.status(500).json({ message: \"Server xatoligi\" });\n    }\n  };\n}","size_bytes":1305},"server/routes/ai-test.ts":{"content":"import type { Express } from \"express\";\nimport { generateBlogPost, testAIContentGenerator } from \"../services/ai-content-generator\";\nimport { sendBlogPostToChannel, sendTestMessage, getBotInfo } from \"../services/telegram-bot\";\nimport { createTestBlogPost } from \"../cron/blog-scheduler\";\n\nexport function registerAITestRoutes(app: Express, storage: any) {\n\n// Test AI Content Generator\napp.post(\"/api/ai/test-ai\", async (req, res) => {\n  try {\n    console.log('AI content generator test ishga tushirilmoqda...');\n    \n    const { language = 'uz' } = req.body;\n    \n    if (!['uz', 'ru'].includes(language)) {\n      return res.status(400).json({ \n        success: false, \n        message: 'Language uz yoki ru bo\\'lishi kerak' \n      });\n    }\n\n    const blogContent = await generateBlogPost(language);\n    \n    res.json({\n      success: true,\n      message: `${language.toUpperCase()} tilida blog post muvaffaqiyatli yaratildi`,\n      data: blogContent\n    });\n  } catch (error) {\n    console.error('AI test xatoligi:', error);\n    res.status(500).json({\n      success: false,\n      message: 'AI test qilishda xatolik yuz berdi',\n      error: error instanceof Error ? error.message : 'Noma\\'lum xatolik'\n    });\n  }\n});\n\n// Test Telegram Bot\napp.post(\"/api/ai/test-telegram\", async (req, res) => {\n  try {\n    console.log('Telegram bot test qilinmoqda...');\n    \n    // Bot ma'lumotlarini olish\n    const botInfo = await getBotInfo();\n    \n    // Test xabari yuborish\n    const messageResult = await sendTestMessage();\n    \n    res.json({\n      success: true,\n      message: 'Telegram bot test muvaffaqiyatli o\\'tdi',\n      data: {\n        bot: botInfo,\n        messageSent: messageResult\n      }\n    });\n  } catch (error) {\n    console.error('Telegram test xatoligi:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Telegram bot test qilishda xatolik yuz berdi',\n      error: error instanceof Error ? error.message : 'Noma\\'lum xatolik'\n    });\n  }\n});\n\n// AI blog post yaratish va Telegram'ga yuborish\napp.post(\"/api/ai/create-blog\", async (req, res) => {\n  try {\n    console.log('AI blog post yaratish va Telegram\\'ga yuborish...');\n    \n    const { language = 'uz' } = req.body;\n    \n    if (!['uz', 'ru'].includes(language)) {\n      return res.status(400).json({ \n        success: false, \n        message: 'Language uz yoki ru bo\\'lishi kerak' \n      });\n    }\n\n    await createTestBlogPost(storage, language);\n    \n    res.json({\n      success: true,\n      message: `${language.toUpperCase()} tilida blog post yaratildi va Telegram kanaliga yuborildi`\n    });\n  } catch (error) {\n    console.error('Blog yaratish xatoligi:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Blog post yaratishda xatolik yuz berdi',\n      error: error instanceof Error ? error.message : 'Noma\\'lum xatolik'\n    });\n  }\n});\n\n// Barcha testlarni bir vaqtda o'tkazish\napp.post(\"/api/ai/test-all\", async (req, res) => {\n  try {\n    console.log('Barcha AI va Telegram testlari ishga tushirilmoqda...');\n    \n    const results = {\n      aiTest: { success: false, data: null, error: null },\n      telegramTest: { success: false, data: null, error: null },\n      blogCreation: { success: false, data: null, error: null }\n    };\n\n    // AI Content Generator test\n    try {\n      const aiResult = await testAIContentGenerator();\n      results.aiTest.success = true;\n      results.aiTest.data = aiResult;\n    } catch (error) {\n      results.aiTest.error = error instanceof Error ? error.message : 'Noma\\'lum xatolik';\n    }\n\n    // Telegram Bot test\n    try {\n      const botInfo = await getBotInfo();\n      const messageResult = await sendTestMessage();\n      results.telegramTest.success = true;\n      results.telegramTest.data = { bot: botInfo, messageSent: messageResult };\n    } catch (error) {\n      results.telegramTest.error = error instanceof Error ? error.message : 'Noma\\'lum xatolik';\n    }\n\n    // Blog yaratish test\n    try {\n      await createTestBlogPost(storage, 'uz');\n      results.blogCreation.success = true;\n      results.blogCreation.data = 'Blog post yaratildi va yuborildi';\n    } catch (error) {\n      results.blogCreation.error = error instanceof Error ? error.message : 'Noma\\'lum xatolik';\n    }\n\n    const successCount = Object.values(results).filter(r => r.success).length;\n    \n    res.json({\n      success: successCount > 0,\n      message: `${successCount}/3 test muvaffaqiyatli o'tdi`,\n      results: results\n    });\n  } catch (error) {\n    console.error('Umumiy test xatoligi:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Testlarni o\\'tkazishda xatolik yuz berdi',\n      error: error instanceof Error ? error.message : 'Noma\\'lum xatolik'\n    });\n  }\n});\n\n// AI servislar statusini tekshirish\napp.get(\"/api/ai/status\", async (req, res) => {\n  const status = {\n    googleAI: !!process.env.GOOGLE_AI_API_KEY,\n    telegramBot: !!process.env.TELEGRAM_BOT_TOKEN,\n    envVars: {\n      GOOGLE_AI_API_KEY: process.env.GOOGLE_AI_API_KEY ? 'SET' : 'NOT_SET',\n      TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN ? 'SET' : 'NOT_SET',\n      TELEGRAM_CHANNEL_ID: process.env.TELEGRAM_CHANNEL_ID || '@optombazaruzb'\n    }\n  };\n\n  res.json({\n    success: true,\n    message: 'AI servislari status ma\\'lumotlari',\n    data: status\n  });\n});\n\n}","size_bytes":5323},"server/routes/analytics.ts":{"content":"import express from 'express';\nimport { adminAuth } from '../middleware/adminAuth';\n\nconst router = express.Router();\n\n// Mock analytics data for development\nconst mockAnalyticsData = {\n  users: 1234,\n  pageViews: 5678,\n  conversionRate: 2.3,\n  averageSessionDuration: '3:45',\n  topTrafficSources: [\n    { source: 'Google', percentage: 65 },\n    { source: 'Direct', percentage: 20 },\n    { source: 'Social Media', percentage: 10 },\n    { source: 'Referral', percentage: 5 },\n  ],\n  deviceBreakdown: {\n    mobile: 60,\n    desktop: 30,\n    tablet: 10,\n  },\n  countryBreakdown: [\n    { country: 'Uzbekistan', percentage: 85 },\n    { country: 'Kazakhstan', percentage: 8 },\n    { country: 'Russia', percentage: 4 },\n    { country: 'Other', percentage: 3 },\n  ],\n};\n\nconst mockSeoMetrics = {\n  coreWebVitals: {\n    LCP: '2.1s',\n    FID: '95ms',\n    CLS: '0.05',\n  },\n  mobileScore: 92,\n  desktopScore: 98,\n  totalPages: 156,\n  indexedPages: 142,\n};\n\nconst mockSearchConsoleData = {\n  impressions: 23456,\n  clicks: 1234,\n  clickThroughRate: 5.3,\n  averagePosition: 12.4,\n  topQueries: [\n    {\n      query: 'optom mahsulotlar',\n      clicks: 234,\n      impressions: 4567,\n      position: 3.2,\n    },\n    {\n      query: 'ulgurji savdo',\n      clicks: 189,\n      impressions: 3456,\n      position: 4.1,\n    },\n    {\n      query: 'wholesale products uzbekistan',\n      clicks: 145,\n      impressions: 2890,\n      position: 2.8,\n    },\n    {\n      query: 'optombazar',\n      clicks: 312,\n      impressions: 1456,\n      position: 1.2,\n    },\n  ],\n};\n\n// Get Google Analytics data\nrouter.get('/google-analytics', adminAuth, (req, res) => {\n  try {\n    // In a real implementation, this would fetch from Google Analytics API\n    res.json(mockAnalyticsData);\n  } catch (error) {\n    console.error('Error fetching Google Analytics data:', error);\n    res.status(500).json({ error: 'Failed to fetch analytics data' });\n  }\n});\n\n// Get SEO metrics\nrouter.get('/seo-metrics', adminAuth, (req, res) => {\n  try {\n    // In a real implementation, this would fetch from PageSpeed Insights API\n    res.json(mockSeoMetrics);\n  } catch (error) {\n    console.error('Error fetching SEO metrics:', error);\n    res.status(500).json({ error: 'Failed to fetch SEO metrics' });\n  }\n});\n\n// Get Search Console data\nrouter.get('/search-console', adminAuth, (req, res) => {\n  try {\n    // In a real implementation, this would fetch from Google Search Console API\n    res.json(mockSearchConsoleData);\n  } catch (error) {\n    console.error('Error fetching Search Console data:', error);\n    res.status(500).json({ error: 'Failed to fetch Search Console data' });\n  }\n});\n\n// Get performance metrics\nrouter.get('/performance', adminAuth, (req, res) => {\n  try {\n    const performanceData = {\n      serverResponse: '250ms',\n      firstContentfulPaint: '1.2s',\n      largestContentfulPaint: '2.1s',\n      cumulativeLayoutShift: '0.05',\n      totalBlockingTime: '150ms',\n    };\n    \n    res.json(performanceData);\n  } catch (error) {\n    console.error('Error fetching performance metrics:', error);\n    res.status(500).json({ error: 'Failed to fetch performance metrics' });\n  }\n});\n\nexport default router;","size_bytes":3164},"server/routes/discounts.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { eq, and, lte, gte, isNull, or } from \"drizzle-orm\";\nimport { db } from \"../db.js\";\nimport { discounts, insertDiscountSchema, orders } from \"../../shared/schema.js\";\nimport { requireAuth, requireRole } from \"../middleware/auth\";\n\nconst router = Router();\n\n// Barcha faol chegirmalarni olish (faqat admin uchun)\nrouter.get(\"/\", requireAuth, requireRole(\"admin\"), async (req, res) => {\n  try {\n    const allDiscounts = await db\n      .select()\n      .from(discounts)\n      .orderBy(discounts.createdAt);\n\n    res.json(allDiscounts);\n  } catch (error) {\n    console.error(\"Chegirmalarni olishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Yangi chegirma yaratish (faqat admin uchun)\nrouter.post(\"/\", requireAuth, requireRole(\"admin\"), async (req, res) => {\n  try {\n    const validatedData = insertDiscountSchema.parse(req.body);\n    \n    const newDiscount = await db\n      .insert(discounts)\n      .values([validatedData])\n      .returning();\n\n    res.status(201).json(newDiscount[0]);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Noto'g'ri ma'lumotlar\", \n        errors: error.errors \n      });\n    }\n    console.error(\"Chegirma yaratishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Chegirmani tahrirlash (faqat admin uchun)\nrouter.put(\"/:id\", requireAuth, requireRole(\"admin\"), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const validatedData = insertDiscountSchema.partial().parse(req.body);\n    \n    const updatedDiscount = await db\n      .update(discounts)\n      .set(validatedData)\n      .where(eq(discounts.id, id))\n      .returning();\n\n    if (updatedDiscount.length === 0) {\n      return res.status(404).json({ message: \"Chegirma topilmadi\" });\n    }\n\n    res.json(updatedDiscount[0]);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Noto'g'ri ma'lumotlar\", \n        errors: error.errors \n      });\n    }\n    console.error(\"Chegirmani tahrirlashda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Chegirmani o'chirish (faqat admin uchun)\nrouter.delete(\"/:id\", requireAuth, requireRole(\"admin\"), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const deletedDiscount = await db\n      .delete(discounts)\n      .where(eq(discounts.id, id))\n      .returning();\n\n    if (deletedDiscount.length === 0) {\n      return res.status(404).json({ message: \"Chegirma topilmadi\" });\n    }\n\n    res.json({ message: \"Chegirma muvaffaqiyatli o'chirildi\" });\n  } catch (error) {\n    console.error(\"Chegirmani o'chirishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Chegirma kodini tekshirish va qo'llash\nrouter.post(\"/apply\", async (req, res) => {\n  try {\n    const { code } = z.object({ code: z.string() }).parse(req.body);\n    \n    const now = new Date();\n    \n    // Chegirma kodini topish va tekshirish\n    const discount = await db\n      .select()\n      .from(discounts)\n      .where(\n        and(\n          eq(discounts.code, code.toUpperCase()),\n          eq(discounts.isActive, true),\n          lte(discounts.validFrom, now),\n          gte(discounts.validUntil, now),\n          or(\n            eq(discounts.maxUses, 0), // cheksiz foydalanish\n            gte(discounts.maxUses, discounts.usedCount)\n          )\n        )\n      )\n      .limit(1);\n\n    if (discount.length === 0) {\n      return res.status(404).json({ \n        message: \"Chegirma kodi noto'g'ri yoki muddati tugagan\" \n      });\n    }\n\n    const foundDiscount = discount[0];\n\n    // Chegirma ma'lumotlarini qaytarish\n    res.json({\n      id: foundDiscount.id,\n      code: foundDiscount.code,\n      type: foundDiscount.type,\n      value: foundDiscount.value,\n      targetType: foundDiscount.targetType,\n      targetIds: foundDiscount.targetIds,\n      message: \"Chegirma muvaffaqiyatli qo'llandi\"\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Chegirma kodi kiritilmagan\" \n      });\n    }\n    console.error(\"Chegirma kodini tekshirishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\nexport default router;","size_bytes":4395},"server/routes/favorites.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { storage } from \"../storage.js\";\nimport { requireAuth } from \"../middleware/auth\";\n\nconst router = Router();\n\n// Foydalanuvchining barcha sevimli mahsulotlarini olish\nrouter.get(\"/\", requireAuth, async (req, res) => {\n  try {\n    const userId = req.user!.id;\n    \n    // Sevimli mahsulotlarni storage orqali olish\n    const userFavorites = await storage.getFavorites(userId);\n    \n    // Har bir sevimli mahsulot uchun mahsulot ma'lumotlarini olish\n    const favoritesWithProducts = await Promise.all(\n      userFavorites.map(async (favorite) => {\n        const product = await storage.getProduct(favorite.productId);\n        return {\n          ...favorite,\n          product\n        };\n      })\n    );\n\n    res.json(favoritesWithProducts);\n  } catch (error) {\n    console.error(\"Sevimli mahsulotlarni olishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Mahsulotni sevimlilar ro'yxatiga qo'shish\nrouter.post(\"/\", requireAuth, async (req, res) => {\n  try {\n    const userId = req.user!.id;\n    const { productId } = z.object({ productId: z.string() }).parse(req.body);\n    \n    // Mahsulot mavjudligini tekshirish\n    const product = await storage.getProduct(productId);\n    if (!product) {\n      return res.status(404).json({ message: \"Mahsulot topilmadi\" });\n    }\n\n    // Allaqachon sevimlilar ro'yxatida emasligini tekshirish\n    const isAlreadyFavorite = await storage.isFavorite(userId, productId);\n    if (isAlreadyFavorite) {\n      return res.status(409).json({ \n        message: \"Mahsulot allaqachon sevimlilar ro'yxatida\" \n      });\n    }\n\n    // Sevimlilar ro'yxatiga qo'shish\n    const newFavorite = await storage.addToFavorites({ userId, productId });\n\n    res.status(201).json({\n      ...newFavorite,\n      message: \"Mahsulot sevimlilar ro'yxatiga qo'shildi\"\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Noto'g'ri ma'lumotlar\", \n        errors: error.errors \n      });\n    }\n    console.error(\"Sevimlilar ro'yxatiga qo'shishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Mahsulotni sevimlilar ro'yxatidan o'chirish\nrouter.delete(\"/:productId\", requireAuth, async (req, res) => {\n  try {\n    const userId = req.user!.id;\n    const { productId } = req.params;\n    \n    const isRemoved = await storage.removeFromFavorites(userId, productId);\n\n    if (!isRemoved) {\n      return res.status(404).json({ \n        message: \"Sevimlilar ro'yxatida bunday mahsulot topilmadi\" \n      });\n    }\n\n    res.json({ message: \"Mahsulot sevimlilar ro'yxatidan o'chirildi\" });\n  } catch (error) {\n    console.error(\"Sevimlilar ro'yxatidan o'chirishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\n// Mahsulot sevimlilar ro'yxatida borligini tekshirish\nrouter.get(\"/check/:productId\", requireAuth, async (req, res) => {\n  try {\n    const userId = req.user!.id;\n    const { productId } = req.params;\n    \n    const isFavorite = await storage.isFavorite(userId, productId);\n    const userFavorites = await storage.getFavorites(userId);\n    const favorite = userFavorites.find(f => f.productId === productId);\n\n    res.json({ \n      isFavorite,\n      favoriteId: favorite ? favorite.id : null\n    });\n  } catch (error) {\n    console.error(\"Sevimlilar holatini tekshirishda xatolik:\", error);\n    res.status(500).json({ message: \"Server xatoligi\" });\n  }\n});\n\nexport default router;","size_bytes":3544},"server/routes/marketing.ts":{"content":"import express from 'express';\nimport { adminAuth } from '../middleware/adminAuth';\n\nconst router = express.Router();\n\n// Mock marketing data for development\nconst mockMarketingMetrics = {\n  adSpend: 5690000, // UZS\n  roas: 3.2, // Return on Ad Spend\n  conversionRate: 2.8,\n  newCustomers: 147,\n  campaigns: [\n    {\n      name: 'Google Ads - Optom mahsulotlar',\n      platform: 'google',\n      impressions: 12560,\n      clicks: 834,\n      ctr: 6.6,\n      conversions: 23,\n      cost: 2850000,\n      status: 'active'\n    },\n    {\n      name: 'Facebook - Ulgurji savdo',\n      platform: 'facebook',\n      impressions: 8945,\n      clicks: 567,\n      ctr: 6.3,\n      conversions: 18,\n      cost: 1950000,\n      status: 'active'\n    },\n    {\n      name: 'Instagram - Biznes mahsulotlar',\n      platform: 'instagram',\n      impressions: 5670,\n      clicks: 289,\n      ctr: 5.1,\n      conversions: 8,\n      cost: 890000,\n      status: 'active'\n    }\n  ],\n  conversionGoals: [\n    {\n      name: 'Purchase',\n      description: 'Buyurtma yakunlandi',\n      value: 'purchase',\n      conversions: 45,\n      rate: 2.8\n    },\n    {\n      name: 'Sign Up',\n      description: 'Yangi foydalanuvchi',\n      value: 'sign_up',\n      conversions: 127,\n      rate: 8.4\n    },\n    {\n      name: 'Contact',\n      description: 'Aloqa formasi yuborildi',\n      value: 'contact',\n      conversions: 89,\n      rate: 5.6\n    }\n  ]\n};\n\n// Get marketing metrics\nrouter.get('/metrics', adminAuth, (req, res) => {\n  try {\n    res.json(mockMarketingMetrics);\n  } catch (error) {\n    console.error('Error fetching marketing metrics:', error);\n    res.status(500).json({ error: 'Failed to fetch marketing metrics' });\n  }\n});\n\n// Get campaign performance\nrouter.get('/campaigns', adminAuth, (req, res) => {\n  try {\n    res.json(mockMarketingMetrics.campaigns);\n  } catch (error) {\n    console.error('Error fetching campaigns:', error);\n    res.status(500).json({ error: 'Failed to fetch campaigns' });\n  }\n});\n\n// Get conversion goals\nrouter.get('/conversion-goals', adminAuth, (req, res) => {\n  try {\n    res.json(mockMarketingMetrics.conversionGoals);\n  } catch (error) {\n    console.error('Error fetching conversion goals:', error);\n    res.status(500).json({ error: 'Failed to fetch conversion goals' });\n  }\n});\n\n// Track marketing event\nrouter.post('/track-event', (req, res) => {\n  try {\n    const { eventType, eventData, userId, sessionId } = req.body;\n    \n    // In real implementation, this would save to database\n    console.log('Marketing event tracked:', {\n      eventType,\n      eventData,\n      userId,\n      sessionId,\n      timestamp: new Date()\n    });\n    \n    res.json({ success: true, message: 'Event tracked successfully' });\n  } catch (error) {\n    console.error('Error tracking marketing event:', error);\n    res.status(500).json({ error: 'Failed to track event' });\n  }\n});\n\n// UTM parameter tracking\nrouter.post('/track-utm', (req, res) => {\n  try {\n    const { \n      utm_source, \n      utm_medium, \n      utm_campaign, \n      utm_term, \n      utm_content,\n      page_url,\n      referrer,\n      user_agent\n    } = req.body;\n    \n    // In real implementation, this would save to database\n    console.log('UTM tracking:', {\n      utm_source,\n      utm_medium,\n      utm_campaign,\n      utm_term,\n      utm_content,\n      page_url,\n      referrer,\n      user_agent,\n      timestamp: new Date()\n    });\n    \n    res.json({ success: true, message: 'UTM parameters tracked' });\n  } catch (error) {\n    console.error('Error tracking UTM parameters:', error);\n    res.status(500).json({ error: 'Failed to track UTM parameters' });\n  }\n});\n\n// A/B test tracking\nrouter.post('/track-ab-test', (req, res) => {\n  try {\n    const { testName, variant, userId, conversionEvent } = req.body;\n    \n    console.log('A/B test event:', {\n      testName,\n      variant,\n      userId,\n      conversionEvent,\n      timestamp: new Date()\n    });\n    \n    res.json({ success: true, message: 'A/B test tracked' });\n  } catch (error) {\n    console.error('Error tracking A/B test:', error);\n    res.status(500).json({ error: 'Failed to track A/B test' });\n  }\n});\n\nexport default router;","size_bytes":4152},"server/services/ai-content-generator.ts":{"content":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Google Gemini AI konfiguratsiyasi\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY!);\n\ninterface BlogPostContent {\n  title: string;\n  content: string;\n  excerpt: string;\n  tags: string[];\n  slug: string;\n}\n\n// Blog post mavzulari\nconst topics = [\n  {\n    uz: \"Optom savdo biznesini boshlash uchun maslahatlar\",\n    ru: \"–°–æ–≤–µ—Ç—ã –ø–æ –Ω–∞—á–∞–ª—É –æ–ø—Ç–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞\"\n  },\n  {\n    uz: \"Plastik idishlar va paketlar: sifat va narx balansi\",\n    ru: \"–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ—Å—É–¥–∞ –∏ –ø–∞–∫–µ—Ç—ã: –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã\"\n  },\n  {\n    uz: \"Bir martalik idishlar bozorining istiqbollari\",\n    ru: \"–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä—ã–Ω–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ—Å—É–¥—ã\"\n  },\n  {\n    uz: \"Restoran va kafe uchun optom yetkazib berish\",\n    ru: \"–û–ø—Ç–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –∫–∞—Ñ–µ\"\n  },\n  {\n    uz: \"Ekologik toza mahsulotlar: trend yoki zarurat\",\n    ru: \"–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: —Ç—Ä–µ–Ω–¥ –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å\"\n  },\n  {\n    uz: \"Optom xaridlardan qanday qilib maksimal foyda olish mumkin\",\n    ru: \"–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É –æ—Ç –æ–ø—Ç–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫\"\n  },\n  {\n    uz: \"Kichik biznes uchun optom yetkazib beruvchilarni tanlash\",\n    ru: \"–í—ã–±–æ—Ä –æ–ø—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞\"\n  },\n  {\n    uz: \"Sifatli polietilen paketlar: tanlab olish mezonlari\",\n    ru: \"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã: –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞\"\n  }\n];\n\n// Slug yaratish funksiyasi\nfunction generateSlug(title: string): string {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9–∞-—è\\u0430-\\u044f—ë\\u04d1-\\u04ff\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '')\n    .substring(0, 100) + '-' + Date.now();\n}\n\n// Tags generatsiya qilish\nfunction generateTags(title: string, language: 'uz' | 'ru'): string[] {\n  const commonTagsUz = [\n    'optom savdo', 'biznes', 'plastik idishlar', 'bir martalik',\n    'restoran', 'kafe', 'paketlar', 'sifat', 'narx', 'yetkazib berish'\n  ];\n  \n  const commonTagsRu = [\n    '–æ–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', '–±–∏–∑–Ω–µ—Å', '–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ—Å—É–¥–∞', '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è',\n    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–ø–∞–∫–µ—Ç—ã', '–∫–∞—á–µ—Å—Ç–≤–æ', '—Ü–µ–Ω–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞'\n  ];\n\n  const baseTags = language === 'uz' ? commonTagsUz : commonTagsRu;\n  \n  // Title'dan kalit so'zlarni ajratib olish\n  const titleWords = title.toLowerCase().split(' ');\n  const relevantTags = baseTags.filter(tag => \n    titleWords.some(word => tag.includes(word) || word.includes(tag))\n  );\n  \n  // 3-5 ta eng mos tegni qaytarish\n  return relevantTags.slice(0, Math.min(5, Math.max(3, relevantTags.length)));\n}\n\n// Ichki linklar generatsiya qilish funksiyasi\nasync function generateInternalLinks(content: string, storage?: any): Promise<string> {\n  if (!storage) return content;\n\n  try {\n    // Mavjud blog postlar va mahsulotlarni olish\n    const [blogPosts, products, categories] = await Promise.all([\n      storage.getBlogPosts?.() || [],\n      storage.getProducts?.() || [],\n      storage.getCategories?.() || []\n    ]);\n\n    let updatedContent = content;\n\n    // Blog postlar uchun ichki linklar\n    for (const post of blogPosts.slice(0, 3)) { // Faqat 3 taga\n      if (post.isPublished && post.slug && post.title) {\n        const keyWords = post.title.toLowerCase().split(' ').slice(0, 3);\n        for (const word of keyWords) {\n          if (word.length > 4 && updatedContent.toLowerCase().includes(word)) {\n            const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n            const match = updatedContent.match(regex);\n            if (match && match.length === 1) { // Faqat bir marta link qilish\n              updatedContent = updatedContent.replace(regex, \n                `[${word}](https://optombazar.uz/blog/${post.slug})`);\n              break; // Har bir post uchun faqat bir link\n            }\n          }\n        }\n      }\n    }\n\n    // Mahsulotlar uchun ichki linklar\n    for (const product of products.slice(0, 2)) { // Faqat 2 taga\n      if (product.isActive && product.slug && product.nameUz) {\n        const keyWords = product.nameUz.toLowerCase().split(' ').slice(0, 2);\n        for (const word of keyWords) {\n          if (word.length > 4 && updatedContent.toLowerCase().includes(word)) {\n            const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n            const match = updatedContent.match(regex);\n            if (match && match.length === 1) {\n              updatedContent = updatedContent.replace(regex, \n                `[${word}](https://optombazar.uz/products/${product.slug})`);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Kategoriyalar uchun ichki linklar\n    for (const category of categories.slice(0, 2)) {\n      if (category.isActive && category.slug && category.nameUz) {\n        const keyWords = category.nameUz.toLowerCase().split(' ').slice(0, 2);\n        for (const word of keyWords) {\n          if (word.length > 4 && updatedContent.toLowerCase().includes(word)) {\n            const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n            const match = updatedContent.match(regex);\n            if (match && match.length === 1) {\n              updatedContent = updatedContent.replace(regex, \n                `[${word}](https://optombazar.uz/category/${category.slug})`);\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return updatedContent;\n  } catch (error) {\n    console.error('Ichki linklar generatsiya xatoligi:', error);\n    return content; // Xatolik bo'lsa asl kontentni qaytarish\n  }\n}\n\nexport async function generateBlogPost(language: 'uz' | 'ru' = 'uz', storage?: any): Promise<BlogPostContent> {\n  try {\n    // Tasodifiy mavzu tanlash\n    const randomTopic = topics[Math.floor(Math.random() * topics.length)];\n    const topicTitle = language === 'uz' ? randomTopic.uz : randomTopic.ru;\n\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n    const prompt = language === 'uz' \n      ? `OptomBazar.uz - O'zbekistondagi optom savdo platformasi uchun \"${topicTitle}\" mavzusida professional blog post yozing.\n\nMUHIM ESLATMA: Hech qanday yulduzcha (*) yoki maxsus belgi ishlatmang! Faqat toza matn yozing.\n\nTalablar:\n1. Jozibali va SEO-optimallashgan sarlavha yarating (belgilarsiz)\n2. 800-1200 so'zlik toza kontent yozing\n3. Amaliy maslahatlar va foydali ma'lumotlar bering\n4. OptomBazar.uz platformasi haqida tabiiy holda eslatib o'ting\n5. Formal va professional yozuv uslubida yozing\n6. O'zbek tilida yozing\n7. Hech qanday formatlash belgilari ishlatmang\n\nFormat:\nSARLAVHA: [blog post sarlavhasi - faqat matn]\nQISQACHA: [150-200 so'zlik qisqacha mazmun - faqat matn]\nCONTENT: [asosiy kontent - faqat matn]`\n\n      : `–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥-–ø–æ—Å—Ç –¥–ª—è OptomBazar.uz - –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–ø—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ –Ω–∞ —Ç–µ–º—É \"${topicTitle}\".\n\n–í–ê–ñ–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ (*) –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤! –ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤)\n2. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—ä–µ–º–æ–º 800-1200 —Å–ª–æ–≤\n3. –î–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n4. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–ø–æ–º—è–Ω–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É OptomBazar.uz\n5. –ü–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ\n6. –ü–∏—à–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n7. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–§–æ—Ä–º–∞—Ç:\n–ó–ê–ì–û–õ–û–í–û–ö: [–∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–≥-–ø–æ—Å—Ç–∞ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç]\n–ö–†–ê–¢–ö–û–ï: [–∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ 150-200 —Å–ª–æ–≤ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç]\n–ö–û–ù–¢–ï–ù–¢: [–æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç]`;\n\n    const result = await model.generateContent(prompt);\n    const response = result.response.text();\n\n    // Javobni parsla≈ü\n    const titleMatch = response.match(/(?:SARLAVHA|–ó–ê–ì–û–õ–û–í–û–ö):\\s*(.+)/);\n    const excerptMatch = response.match(/(?:QISQACHA|–ö–†–ê–¢–ö–û–ï):\\s*([\\s\\S]+?)(?=(?:CONTENT|–ö–û–ù–¢–ï–ù–¢):)/);\n    const contentMatch = response.match(/(?:CONTENT|–ö–û–ù–¢–ï–ù–¢):\\s*([\\s\\S]+)/);\n\n    if (!titleMatch || !contentMatch) {\n      throw new Error('AI javobini parselab bo\\'lmadi');\n    }\n\n    const title = titleMatch[1].trim();\n    const excerpt = excerptMatch ? excerptMatch[1].trim() : title.substring(0, 150) + '...';\n    let content = contentMatch[1].trim();\n    const slug = generateSlug(title);\n    const tags = generateTags(title, language);\n\n    // Ichki linklar qo'shish\n    if (storage) {\n      content = await generateInternalLinks(content, storage);\n    }\n\n    return {\n      title,\n      content,\n      excerpt,\n      tags,\n      slug\n    };\n\n  } catch (error) {\n    console.error('AI kontent generatsiyasida xatolik:', error);\n    throw new Error('Blog post yaratishda xatolik yuz berdi');\n  }\n}\n\n// Test funksiyasi\nexport async function testAIContentGenerator() {\n  try {\n    console.log('AI kontent generator test qilinmoqda...');\n    \n    const uzPost = await generateBlogPost('uz');\n    console.log('O\\'zbek tilida post yaratildi:');\n    console.log('Sarlavha:', uzPost.title);\n    console.log('Teglar:', uzPost.tags);\n    console.log('Slug:', uzPost.slug);\n    \n    const ruPost = await generateBlogPost('ru');\n    console.log('\\nRus tilida post yaratildi:');\n    console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', ruPost.title);\n    console.log('–¢–µ–≥–∏:', ruPost.tags);\n    console.log('–°–ª–∞–≥:', ruPost.slug);\n    \n    return { uzPost, ruPost };\n  } catch (error) {\n    console.error('Test xatoligi:', error);\n    throw error;\n  }\n}","size_bytes":10150},"server/services/sitemap-generator.ts":{"content":"import { DatabaseStorage } from \"../database-storage\";\n\nexport class SitemapGenerator {\n  private storage: DatabaseStorage;\n\n  constructor(storage: DatabaseStorage) {\n    this.storage = storage;\n  }\n\n  async generateSitemap(): Promise<string> {\n    const baseUrl = 'https://optombazar.uz';\n    const currentDate = new Date().toISOString();\n\n    let sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n        xmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\"\n        xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\n        xmlns:mobile=\"http://www.google.com/schemas/sitemap-mobile/1.0\"\n        xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"\n        xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\">\n\n  <!-- Asosiy sahifalar -->\n  <url>\n    <loc>${baseUrl}/</loc>\n    <lastmod>${currentDate}</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>1.0</priority>\n  </url>\n  \n  <url>\n    <loc>${baseUrl}/catalog</loc>\n    <lastmod>${currentDate}</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.9</priority>\n  </url>\n  \n  <url>\n    <loc>${baseUrl}/blog</loc>\n    <lastmod>${currentDate}</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>0.8</priority>\n  </url>\n  \n  <url>\n    <loc>${baseUrl}/contact</loc>\n    <lastmod>${currentDate}</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.7</priority>\n  </url>\n\n`;\n\n    try {\n      // Kategoriyalarni sitemap'ga qo'shish\n      const categories = await this.storage.getCategories();\n      for (const category of categories) {\n        if (category.isActive && category.slug) {\n          sitemap += `  <url>\n    <loc>${baseUrl}/category/${category.slug}</loc>\n    <lastmod>${currentDate}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.8</priority>\n  </url>\n`;\n        }\n      }\n\n      // Mahsulotlarni sitemap'ga qo'shish\n      const products = await this.storage.getProducts();\n      for (const product of products) {\n        if (product.isActive && product.slug) {\n          const productLastMod = product.createdAt ? product.createdAt.toISOString() : currentDate;\n          sitemap += `  <url>\n    <loc>${baseUrl}/products/${product.slug}</loc>\n    <lastmod>${productLastMod}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.7</priority>`;\n          \n          // Mahsulot rasmlarini qo'shish\n          if (product.images && product.images.length > 0) {\n            for (const image of product.images) {\n              sitemap += `\n    <image:image>\n      <image:loc>${image}</image:loc>\n      <image:title>${product.nameUz}</image:title>\n      <image:caption>${product.descriptionUz || ''}</image:caption>\n    </image:image>`;\n            }\n          }\n          sitemap += `\n  </url>\n`;\n        }\n      }\n\n      // Blog postlarni sitemap'ga qo'shish\n      const blogPosts = await this.storage.getBlogPosts();\n      for (const post of blogPosts) {\n        if (post.isPublished && post.slug) {\n          const postLastMod = post.updatedAt ? post.updatedAt.toISOString() : \n                              (post.createdAt ? post.createdAt.toISOString() : currentDate);\n          sitemap += `  <url>\n    <loc>${baseUrl}/blog/${post.slug}</loc>\n    <lastmod>${postLastMod}</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.6</priority>`;\n          \n          // Blog post rasmini qo'shish\n          if (post.imageUrl) {\n            sitemap += `\n    <image:image>\n      <image:loc>${post.imageUrl}</image:loc>\n      <image:title>${post.title}</image:title>\n      <image:caption>${post.excerpt || ''}</image:caption>\n    </image:image>`;\n          }\n          sitemap += `\n  </url>\n`;\n        }\n      }\n\n    } catch (error) {\n      console.error('Sitemap generatsiya xatoligi:', error);\n    }\n\n    sitemap += '</urlset>';\n    return sitemap;\n  }\n\n  generateRobotsTxt(): string {\n    const baseUrl = 'https://optombazar.uz';\n    \n    return `User-agent: *\nAllow: /\n\n# Asosiy sahifalar\nAllow: /\nAllow: /catalog\nAllow: /blog\nAllow: /contact\nAllow: /products/\nAllow: /category/\nAllow: /blog/\n\n# Static fayllar\nAllow: /assets/\nAllow: /images/\nAllow: /*.css\nAllow: /*.js\nAllow: /*.png\nAllow: /*.jpg\nAllow: /*.jpeg\nAllow: /*.gif\nAllow: /*.svg\nAllow: /*.webp\nAllow: /*.ico\n\n# Admin panelni bloklash\nDisallow: /admin/\nDisallow: /api/\n\n# Vaqtinchalik sahifalar\nDisallow: /cart\nDisallow: /checkout\nDisallow: /profile\nDisallow: /login\nDisallow: /register\n\n# Sitemap'ni ko'rsatish\nSitemap: ${baseUrl}/sitemap.xml\n\n# Crawl-delay (ixtiyoriy)\nCrawl-delay: 1\n\n# Maxsus bot'lar uchun qoidalar\nUser-agent: Googlebot\nAllow: /\nCrawl-delay: 1\n\nUser-agent: Bingbot\nAllow: /\nCrawl-delay: 2\n\nUser-agent: YandexBot\nAllow: /\nCrawl-delay: 1`;\n  }\n\n  async generateSitemapIndex(): Promise<string> {\n    const baseUrl = 'https://optombazar.uz';\n    const currentDate = new Date().toISOString();\n\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <sitemap>\n    <loc>${baseUrl}/sitemap.xml</loc>\n    <lastmod>${currentDate}</lastmod>\n  </sitemap>\n</sitemapindex>`;\n  }\n}","size_bytes":5113},"server/services/telegram-bot.ts":{"content":"import TelegramBot from 'node-telegram-bot-api';\nimport { storage } from '../storage.js';\n\nlet bot: TelegramBot | null = null;\n\n// Telegram bot'ni ishga tushirish\nexport function initializeTelegramBot(): boolean {\n  const token = process.env.TELEGRAM_BOT_TOKEN;\n  \n  if (!token) {\n    console.log('TELEGRAM_BOT_TOKEN topilmadi. Telegram bot funksiyalari o\\'chirilgan.');\n    return false;\n  }\n\n  try {\n    bot = new TelegramBot(token, { polling: true });\n    \n    // Start komandasi\n    bot.onText(/\\/start/, (msg) => {\n      const chatId = msg.chat.id;\n      const welcomeMessage = `\nüéâ *Xush kelibsiz OptomMarket.uz ga!*\n\nBiz O'zbekistondagi eng yirik optom savdo platformasimiz. Bizning bot orqali siz:\n\n‚úÖ Yangi mahsulotlar haqida bilib olishingiz mumkin\n‚úÖ Maxsus takliflar va chegirmalardan foydalanishingiz mumkin  \n‚úÖ Buyurtma berish va kuzatish imkoniyati\n‚úÖ 24/7 mijozlar xizmati\n\nüåê Saytimiz: https://optommarket.uz\nüì± Mobil ilova: App Store va Google Play'da tez orada!\n\nSavol yoki takliflaringiz bo'lsa, bizga yozing! üí¨\n      `;\n      \n      bot?.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });\n    });\n\n    // Help komandasi\n    bot.onText(/\\/help/, (msg) => {\n      const chatId = msg.chat.id;\n      const helpMessage = `\nüìã *Mavjud komandalar:*\n\n/start - Botni ishga tushirish\n/help - Yordam\n/products - Yangi mahsulotlar\n/contact - Bog'lanish ma'lumotlari\n/about - Biz haqimizda\n\nüí¨ Shuningdek, menga istalgan savolingizni yozishingiz mumkin!\n      `;\n      \n      bot?.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });\n    });\n\n    // Products komandasi\n    bot.onText(/\\/products/, async (msg) => {\n      const chatId = msg.chat.id;\n      \n      try {\n        const products = await storage.getProducts(undefined, true);\n        const featuredProducts = products.slice(0, 5);\n        \n        if (featuredProducts.length === 0) {\n          bot?.sendMessage(chatId, 'üîç Hozircha tavsiya etilgan mahsulotlar yo\\'q.');\n          return;\n        }\n\n        let message = 'üî• *Tavsiya etilgan mahsulotlar:*\\n\\n';\n        \n        featuredProducts.forEach((product: any, index: number) => {\n          message += `${index + 1}. *${product.nameUz}*\\n`;\n          message += `üí∞ Narx: ${Number(product.wholesalePrice).toLocaleString()} so'm\\n`;\n          if (product.descriptionUz) {\n            message += `üìù ${product.descriptionUz.substring(0, 100)}...\\n`;\n          }\n          message += `üîó https://optommarket.uz/products/${product.slug}\\n\\n`;\n        });\n        \n        message += 'üåê Barcha mahsulotlar: https://optommarket.uz/catalog';\n        \n        bot?.sendMessage(chatId, message, { parse_mode: 'Markdown' });\n      } catch (error) {\n        console.error('Telegram bot products error:', error);\n        bot?.sendMessage(chatId, '‚ùå Mahsulotlarni yuklashda xatolik yuz berdi.');\n      }\n    });\n\n    // Contact komandasi\n    bot.onText(/\\/contact/, (msg) => {\n      const chatId = msg.chat.id;\n      const contactMessage = `\nüìû *Bog'lanish ma'lumotlari:*\n\nüåê Sayt: https://optommarket.uz\nüìß Email: info@optommarket.uz\nüì± Telefon: +998 90 123 45 67\n\nüìç Manzil: Toshkent, O'zbekiston\n\nüïí Ish vaqti: \nDushanba - Juma: 9:00 - 18:00\nShanba: 9:00 - 14:00\nYakshanba: Dam olish kuni\n\nüí¨ Telegram orqali ham murojaat qilishingiz mumkin!\n      `;\n      \n      bot?.sendMessage(chatId, contactMessage, { parse_mode: 'Markdown' });\n    });\n\n    // About komandasi\n    bot.onText(/\\/about/, (msg) => {\n      const chatId = msg.chat.id;\n      const aboutMessage = `\nüè¢ *OptomMarket.uz haqida:*\n\nBiz O'zbekistondagi eng yirik optom savdo platformasimiz. 2024-yildan beri faoliyat yuritamiz va minglab mijozlarga xizmat ko'rsatamiz.\n\nüéØ *Bizning maqsadimiz:*\n‚Ä¢ Sifatli mahsulotlarni eng qulay narxlarda taklif qilish\n‚Ä¢ Tez va ishonchli yetkazib berish xizmati\n‚Ä¢ 24/7 mijozlar bilan ishlash\n\nüì¶ *Mahsulot turlari:*\n‚Ä¢ Polietilen paketlar\n‚Ä¢ Bir martalik idishlar  \n‚Ä¢ Elektronika\n‚Ä¢ Kiyim-kechak\n‚Ä¢ Va boshqa ko'plab kategoriyalar\n\nüöÄ Bizning saytimizga tashrif buyuring: https://optommarket.uz\n      `;\n      \n      bot?.sendMessage(chatId, aboutMessage, { parse_mode: 'Markdown' });\n    });\n\n    // Boshqa xabarlar uchun javob\n    bot.on('message', (msg) => {\n      const chatId = msg.chat.id;\n      const text = msg.text;\n      \n      // Komandalar emas, oddiy xabar bo'lsa\n      if (text && !text.startsWith('/')) {\n        const responseMessage = `\nRahmat xabaringiz uchun! üòä\n\nSizning so'rovingiz bo'yicha tez orada javob beramiz. \n\nTezroq javob olish uchun:\nüåê Saytimizga tashrif buyuring: https://optommarket.uz\nüìû Telefon: +998 90 123 45 67\nüìß Email: info@optommarket.uz\n\nYoki quyidagi komandalardan foydalaning:\n/help - Yordam\n/products - Mahsulotlar\n/contact - Bog'lanish\n        `;\n        \n        bot?.sendMessage(chatId, responseMessage);\n      }\n    });\n\n    console.log('Telegram bot muvaffaqiyatli ishga tushdi!');\n    return true;\n  } catch (error) {\n    console.error('Telegram bot xatoligi:', error);\n    return false;\n  }\n}\n\n// Yangi mahsulot e'lon qilish\nexport async function announceNewProduct(product: any): Promise<boolean> {\n  if (!bot) {\n    console.log('Telegram bot ishlamayapti');\n    return false;\n  }\n\n  try {\n    const message = `üÜï *YANGI MAHSULOT!*\n\nüì¶ *${product.nameUz}*\n\nüí∞ Narx: ${Number(product.wholesalePrice).toLocaleString()} so'm\nüìè Birlik: ${product.unit}\nüì¶ Minimal miqdor: ${product.minQuantity} ${product.unit}\n\n${product.descriptionUz ? `üìù ${product.descriptionUz.substring(0, 200)}...` : ''}\n\nüîó Batafsil: https://optommarket.uz/products/${product.slug}\nüõí Buyurtma berish: https://optommarket.uz\n\n#yangi_mahsulot #optom #OptomMarket`;\n\n    // Bu yerda barcha obunachilarga yuborish kerak\n    // Hozircha faqat console'ga chiqaramiz\n    console.log('Yangi mahsulot e\\'loni:', message);\n    return true;\n  } catch (error) {\n    console.error('Yangi mahsulot e\\'lon qilishda xatolik:', error);\n    return false;\n  }\n}\n\n// Haftalik hisobot yuborish\nexport async function sendWeeklyReport(): Promise<boolean> {\n  if (!bot) {\n    console.log('Telegram bot ishlamayapti');\n    return false;\n  }\n\n  try {\n    const today = new Date();\n    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n    \n    // Ma'lumotlarni olish\n    const allProducts = await storage.getProducts();\n    const newProductsThisWeek = allProducts.filter((p: any) => \n      new Date(p.createdAt || p.updatedAt) >= weekAgo\n    );\n\n    const message = `üìä *HAFTALIK HISOBOT*\n\nüìÖ Muddat: ${weekAgo.toLocaleDateString('uz-UZ')} - ${today.toLocaleDateString('uz-UZ')}\n\nüìà *Statistika:*\nüÜï Yangi mahsulotlar: ${newProductsThisWeek.length} ta\nüì¶ Jami mahsulotlar: ${allProducts.length} ta\n\nüí∞ *Eng ommabop mahsulotlar:*\n${allProducts.filter((p: any) => p.isFeatured).slice(0, 3).map((p: any, i: number) => \n  `${i + 1}. ${p.nameUz} - ${Number(p.wholesalePrice).toLocaleString()} so'm`\n).join('\\n')}\n\nüåê Sayt: https://optommarket.uz\nüì± Telegram: @optommarketuz\n\n#hisobot #statistika #OptomMarket`;\n\n    console.log('Haftalik hisobot:', message);\n    return true;\n  } catch (error) {\n    console.error('Haftalik hisobot yuborishda xatolik:', error);\n    return false;\n  }\n}\n\n// Maxsus aksiya e'lon qilish\nexport async function announceSpecialOffer(offerData: {\n  title: string;\n  description: string;\n  discount: number;\n  validUntil: Date;\n  minOrder?: number;\n}): Promise<boolean> {\n  if (!bot) {\n    console.log('Telegram bot ishlamayapti');\n    return false;\n  }\n\n  try {\n    const message = `üéâ *MAXSUS AKSIYA!*\n\nüî• *${offerData.title}*\n\nüìù ${offerData.description}\n\nüí• Chegirma: ${offerData.discount}%\n‚è∞ Amal qilish muddati: ${offerData.validUntil.toLocaleDateString('uz-UZ')}\n${offerData.minOrder ? `üí∞ Minimal buyurtma: ${offerData.minOrder.toLocaleString()} so'm` : ''}\n\nüöÄ Chegirmadan foydalanish uchun tezroq buyurtma bering!\n\nüõí Buyurtma: https://optommarket.uz\nüìû Telefon: +998 90 123 45 67\n\n#aksiya #chegirma #OptomMarket`;\n\n    console.log('Maxsus aksiya e\\'loni:', message);\n    return true;\n  } catch (error) {\n    console.error('Maxsus aksiya e\\'lon qilishda xatolik:', error);\n    return false;\n  }\n}\n\n// Blog postni kanalga yuborish\nexport async function sendBlogPostToChannel(blogPost: {\n  title: string;\n  content: string;\n  imageUrl?: string;\n  url: string;\n}): Promise<boolean> {\n  if (!bot) {\n    console.log('Telegram bot ishlamayapti');\n    return false;\n  }\n\n  try {\n    const message = `üì¢ *${blogPost.title}*\\n\\n${blogPost.content.substring(0, 300)}...\\n\\nüîó Batafsil: ${blogPost.url}`;\n    \n    // Bu yerda kanal ID sini o'zgartiring\n    const channelId = process.env.TELEGRAM_CHANNEL_ID || '';\n    \n    if (blogPost.imageUrl) {\n      await bot.sendPhoto(channelId, blogPost.imageUrl, {\n        caption: message,\n        parse_mode: 'Markdown'\n      });\n    } else {\n      await bot.sendMessage(channelId, message, { parse_mode: 'Markdown' });\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Blog post yuborishda xatolik:', error);\n    return false;\n  }\n}\n\n// Test xabari yuborish\nexport async function sendTestMessage(chatId: string): Promise<boolean> {\n  if (!bot) {\n    console.log('Telegram bot ishlamayapti');\n    return false;\n  }\n\n  try {\n    await bot.sendMessage(chatId, '‚úÖ Test xabari muvaffaqiyatli yuborildi!');\n    return true;\n  } catch (error) {\n    console.error('Test xabari yuborishda xatolik:', error);\n    return false;\n  }\n}\n\n// Bot haqida ma'lumot olish\nexport async function getBotInfo(): Promise<{\n  id: number;\n  username: string;\n  firstName: string;\n  isActive: boolean;\n} | null> {\n  if (!bot) {\n    console.log('Telegram bot ishlamayapti');\n    return null;\n  }\n\n  try {\n    const me = await bot.getMe();\n    return {\n      id: me.id,\n      username: me.username || '',\n      firstName: me.first_name,\n      isActive: true\n    };\n  } catch (error) {\n    console.error('Bot ma\\'lumotlarini olishda xatolik:', error);\n    return null;\n  }\n}\n","size_bytes":10012},"server/utils/activityLogger.ts":{"content":"import { Request } from \"express\";\nimport { IStorage } from \"../storage\";\nimport { InsertUserActivity } from \"@shared/schema\";\n\nexport interface ActivityLogParams {\n  activityType: 'product_view' | 'add_to_cart' | 'remove_from_cart' | 'checkout_start' | \n                'order_placed' | 'search' | 'login' | 'register' | 'page_view' | \n                'category_view' | 'blog_view' | 'contact_form';\n  targetId?: string;\n  targetType?: 'product' | 'category' | 'order' | 'page' | 'blog' | 'form';\n  metadata?: Record<string, any>;\n}\n\nexport class ActivityLogger {\n  constructor(private storage: IStorage) {}\n\n  async logActivity(\n    req: Request, \n    params: ActivityLogParams\n  ): Promise<void> {\n    try {\n      // Get user ID from session if authenticated\n      const userId = (req as any).user?.id || null;\n      \n      // Get or create session ID\n      const sessionId = req.sessionID || `guest_${Date.now()}_${Math.random()}`;\n      \n      // Get IP address (handle proxies)\n      const ipAddress = req.ip || \n                       req.connection.remoteAddress || \n                       (req.headers['x-forwarded-for'] as string)?.split(',')[0]?.trim() ||\n                       'unknown';\n      \n      // Get user agent\n      const userAgent = req.headers['user-agent'] || 'unknown';\n\n      const activityData: InsertUserActivity = {\n        userId,\n        sessionId,\n        activityType: params.activityType,\n        targetId: params.targetId || null,\n        targetType: params.targetType || null,\n        metadata: params.metadata || null,\n        ipAddress,\n        userAgent\n      };\n\n      // Only log if we have a storage implementation that supports it\n      if (this.storage.logUserActivity) {\n        await this.storage.logUserActivity(activityData);\n      }\n    } catch (error) {\n      console.error('Failed to log user activity:', error);\n      // Don't throw error to avoid disrupting main application flow\n    }\n  }\n\n  // Convenience methods for common activities\n  async logProductView(req: Request, productId: string, productSlug?: string): Promise<void> {\n    await this.logActivity(req, {\n      activityType: 'product_view',\n      targetId: productId,\n      targetType: 'product',\n      metadata: productSlug ? { slug: productSlug } : undefined\n    });\n  }\n\n  async logCategoryView(req: Request, categoryId: string, categorySlug?: string): Promise<void> {\n    await this.logActivity(req, {\n      activityType: 'category_view',\n      targetId: categoryId,\n      targetType: 'category',\n      metadata: categorySlug ? { slug: categorySlug } : undefined\n    });\n  }\n\n  async logSearch(req: Request, query: string, resultsCount?: number): Promise<void> {\n    await this.logActivity(req, {\n      activityType: 'search',\n      metadata: { \n        query: query.toLowerCase(),\n        resultsCount: resultsCount || 0\n      }\n    });\n  }\n\n  async logCartAction(\n    req: Request, \n    action: 'add_to_cart' | 'remove_from_cart', \n    productId: string, \n    quantity?: number\n  ): Promise<void> {\n    await this.logActivity(req, {\n      activityType: action,\n      targetId: productId,\n      targetType: 'product',\n      metadata: quantity ? { quantity } : undefined\n    });\n  }\n\n  async logOrderPlaced(req: Request, orderId: string, totalAmount?: string): Promise<void> {\n    await this.logActivity(req, {\n      activityType: 'order_placed',\n      targetId: orderId,\n      targetType: 'order',\n      metadata: totalAmount ? { totalAmount } : undefined\n    });\n  }\n\n  async logUserAuth(req: Request, action: 'login' | 'register', userId?: string): Promise<void> {\n    await this.logActivity(req, {\n      activityType: action,\n      targetId: userId,\n      targetType: 'page'\n    });\n  }\n\n  async logPageView(req: Request, page: string): Promise<void> {\n    await this.logActivity(req, {\n      activityType: 'page_view',\n      targetType: 'page',\n      metadata: { page }\n    });\n  }\n}\n\n// Middleware factory for automatic page view tracking\nexport function createPageViewMiddleware(activityLogger: ActivityLogger) {\n  return (req: Request, res: any, next: any) => {\n    // Only log page views for main pages, not API calls\n    if (!req.path.startsWith('/api')) {\n      // Extract page name from path\n      const page = req.path === '/' ? 'home' : req.path.slice(1).split('/')[0];\n      activityLogger.logPageView(req, page).catch(console.error);\n    }\n    next();\n  };\n}","size_bytes":4394},"client/src/components/AIChatWidget.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { MessageCircle, Send, X, Bot, User, Loader2 } from 'lucide-react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useLanguage } from './language-provider';\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  response: string | null;\n  createdAt: string;\n  isUser?: boolean;\n}\n\ninterface ChatResponse {\n  id: string;\n  message: string;\n  response: string;\n  createdAt: string;\n}\n\nexport function AIChatWidget() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputMessage, setInputMessage] = useState('');\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [sessionId, setSessionId] = useState<string>('');\n  const [chatStarted, setChatStarted] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [userPhone, setUserPhone] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { language } = useLanguage();\n\n  // Auto-open chat after 30 seconds\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (!isOpen && !localStorage.getItem('chat_auto_opened')) {\n        setIsOpen(true);\n        localStorage.setItem('chat_auto_opened', 'true');\n      }\n    }, 30000); // 30 seconds\n\n    return () => clearTimeout(timer);\n  }, [isOpen]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Load chat history when session starts\n  const { data: chatHistory } = useQuery({\n    queryKey: ['/api/chat/history', sessionId],\n    enabled: isOpen && chatStarted && sessionId !== '',\n  });\n\n  useEffect(() => {\n    if (chatHistory && Array.isArray(chatHistory)) {\n      const formattedMessages: ChatMessage[] = [];\n      chatHistory.forEach((msg: any) => {\n        if (msg.message) {\n          formattedMessages.push({\n            id: `${msg.id}_user`,\n            message: msg.message,\n            response: null,\n            createdAt: msg.createdAt,\n            isUser: true,\n          });\n        }\n        if (msg.response) {\n          formattedMessages.push({\n            id: `${msg.id}_ai`,\n            message: msg.response,\n            response: null,\n            createdAt: msg.createdAt,\n            isUser: false,\n          });\n        }\n      });\n      setMessages(formattedMessages);\n    }\n  }, [chatHistory]);\n\n  // Start chat session mutation\n  const startChatMutation = useMutation({\n    mutationFn: async (data: { name: string; phone: string }) => {\n      const response = await fetch('/api/chat/start', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to start chat');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSessionId(data.sessionId);\n      setChatStarted(true);\n      setUserName(data.name);\n      setUserPhone(data.phone);\n    },\n    onError: (error) => {\n      console.error('Chat start error:', error);\n    }\n  });\n\n  const chatMutation = useMutation({\n    mutationFn: async (data: { message: string; sessionId: string; userName: string; userPhone: string }) => {\n      const response = await fetch('/api/chat/message', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n      \n      return response.json() as Promise<ChatResponse>;\n    },\n    onSuccess: (data) => {\n      // Add AI response to messages\n      setMessages(prev => [\n        ...prev,\n        {\n          id: `${data.id}_ai`,\n          message: data.response,\n          response: null,\n          createdAt: data.createdAt,\n          isUser: false,\n        }\n      ]);\n    },\n    onError: (error) => {\n      console.error('Chat error:', error);\n      // Add error message\n      setMessages(prev => [\n        ...prev,\n        {\n          id: `error_${Date.now()}`,\n          message: language === 'uz' \n            ? 'Kechirasiz, xatolik yuz berdi. Iltimos qaytadan urinib ko\\'ring.' \n            : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',\n          response: null,\n          createdAt: new Date().toISOString(),\n          isUser: false,\n        }\n      ]);\n    }\n  });\n\n  const handleStartChat = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!userName.trim() || !userPhone.trim() || startChatMutation.isPending) return;\n    \n    startChatMutation.mutate({\n      name: userName.trim(),\n      phone: userPhone.trim(),\n    });\n  };\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n\n    const userMessage = inputMessage.trim();\n    setInputMessage('');\n\n    // Add user message to UI immediately\n    const userMsgObj: ChatMessage = {\n      id: `user_${Date.now()}`,\n      message: userMessage,\n      response: null,\n      createdAt: new Date().toISOString(),\n      isUser: true,\n    };\n\n    setMessages(prev => [...prev, userMsgObj]);\n\n    // Send to API\n    chatMutation.mutate({\n      message: userMessage,\n      sessionId,\n      userName,\n      userPhone,\n    });\n  };\n\n  return (\n    <>\n      {/* Chat Toggle Button */}\n      <div className=\"fixed bottom-24 right-6 z-50 md:bottom-6\">\n        {!isOpen && (\n          <Button\n            onClick={() => setIsOpen(true)}\n            size=\"lg\"\n            className=\"rounded-full h-14 w-14 bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600 shadow-lg hover:shadow-xl transition-all duration-300 ml-[4px] mr-[4px] pt-[5px] pb-[5px] pl-[31px] pr-[31px] animate-pulse hover:animate-none\"\n          >\n            <MessageCircle className=\"h-6 w-6\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <div className=\"fixed bottom-24 right-6 z-50 md:bottom-6 w-96 sm:w-80 xs:w-72 h-[520px] bg-white dark:bg-gray-800 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 flex flex-col max-w-[calc(100vw-3rem)]\">\n          {/* Header */}\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 bg-gradient-to-r from-blue-600 to-red-500 text-white rounded-t-lg\">\n            <CardTitle className=\"text-sm font-medium\">\n              {!chatStarted \n                ? (language === 'uz' ? 'Suhbatni boshlash' : '–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä')\n                : (language === 'uz' ? 'AI Yordamchi' : 'AI –ü–æ–º–æ—â–Ω–∏–∫')\n              }\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                setIsOpen(false);\n                setChatStarted(false);\n                setUserName('');\n                setUserPhone('');\n                setMessages([]);\n                setSessionId('');\n              }}\n              className=\"h-6 w-6 p-0 text-white hover:bg-white/20\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </CardHeader>\n\n          {/* Content - Form or Messages */}\n          <CardContent className=\"flex-1 p-0 overflow-hidden\">\n            {!chatStarted ? (\n              // Start Chat Form\n              <div className=\"flex flex-col justify-center h-full px-6 py-4\">\n                <div className=\"text-center mb-6\">\n                  <Bot className=\"h-12 w-12 mx-auto mb-4 text-blue-600\" />\n                  <h3 className=\"text-lg font-semibold mb-2 text-gray-900 dark:text-white\">\n                    {language === 'uz' \n                      ? 'Salom! Sizga yordam berishga tayyorman' \n                      : '–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º'}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {language === 'uz' \n                      ? 'Suhbatni boshlash uchun ismingiz va telefon raqamingizni kiriting' \n                      : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'}\n                  </p>\n                </div>\n                \n                <form onSubmit={handleStartChat} className=\"space-y-4\">\n                  <div>\n                    <Input\n                      type=\"text\"\n                      placeholder={language === 'uz' ? \"Ismingiz\" : \"–í–∞—à–µ –∏–º—è\"}\n                      value={userName}\n                      onChange={(e) => setUserName(e.target.value)}\n                      required\n                      className=\"w-full\"\n                    />\n                  </div>\n                  <div>\n                    <Input\n                      type=\"tel\"\n                      placeholder={language === 'uz' ? \"Telefon raqam (+998901234567)\" : \"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+998901234567)\"}\n                      value={userPhone}\n                      onChange={(e) => setUserPhone(e.target.value)}\n                      required\n                      className=\"w-full\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600\"\n                    disabled={startChatMutation.isPending || !userName.trim() || !userPhone.trim()}\n                  >\n                    {startChatMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        {language === 'uz' ? 'Boshlanmoqda...' : '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è...'}\n                      </>\n                    ) : (\n                      language === 'uz' ? 'Suhbatni boshlash' : '–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä'\n                    )}\n                  </Button>\n                </form>\n              </div>\n            ) : (\n              // Messages Area\n              <ScrollArea className=\"h-full px-4 py-3 max-h-[380px]\">\n                {messages.length === 0 && (\n                  <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground\">\n                    <Bot className=\"h-8 w-8 mb-2\" />\n                    <p className=\"text-sm\">\n                      {language === 'uz' \n                        ? `Salom ${userName}! Sizga qanday yordam bera olaman?` \n                        : `–ü—Ä–∏–≤–µ—Ç ${userName}! –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?`}\n                    </p>\n                  </div>\n                )}\n              \n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex items-start gap-3 mb-6 ${\n                    message.isUser ? 'justify-end' : 'justify-start'\n                  }`}\n                >\n                  {!message.isUser && (\n                    <div className=\"flex-shrink-0\">\n                      <Bot className=\"h-6 w-6 text-blue-600\" />\n                    </div>\n                  )}\n                  \n                  <div\n                    className={`max-w-[85%] p-3 rounded-lg text-sm leading-[1.5] ${\n                      message.isUser\n                        ? 'bg-gradient-to-r from-blue-600 to-red-500 text-white'\n                        : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white border border-gray-200 dark:border-gray-600'\n                    }`}\n                  >\n                    <div className=\"whitespace-pre-wrap break-words font-medium\">\n                      {message.message}\n                    </div>\n                  </div>\n                  \n                  {message.isUser && (\n                    <div className=\"flex-shrink-0\">\n                      <User className=\"h-6 w-6 text-gray-600\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n\n              {chatMutation.isPending && (\n                <div className=\"flex items-start gap-2 mb-4\">\n                  <Bot className=\"h-6 w-6 text-blue-600\" />\n                  <div className=\"bg-gray-100 dark:bg-gray-700 p-3 rounded-lg text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      {language === 'uz' ? 'AI yozmoqda...' : 'AI –ø–µ—á–∞—Ç–∞–µ—Ç...'}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n                <div ref={messagesEndRef} />\n              </ScrollArea>\n            )}\n          </CardContent>\n\n          {/* Input - Only show when chat started */}\n          {chatStarted && (\n            <div className=\"p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 mt-auto\">\n            <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n              <Input\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                placeholder={\n                  language === 'uz' \n                    ? 'Savolingizni yozing...' \n                    : '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...'\n                }\n                disabled={chatMutation.isPending}\n                className=\"flex-1 text-sm\"\n              />\n              <Button\n                type=\"submit\"\n                size=\"sm\"\n                disabled={!inputMessage.trim() || chatMutation.isPending}\n                className=\"bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600 px-3\"\n              >\n                {chatMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <Send className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </form>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":14269},"client/src/components/AdminRoute.tsx":{"content":"import { ReactNode } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\ninterface AdminRouteProps {\n  children: ReactNode;\n}\n\nexport default function AdminRoute({ children }: AdminRouteProps) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!isAuthenticated) {\n        // Not logged in, redirect to login\n        setLocation('/login');\n      } else if (user?.role !== 'admin') {\n        // Logged in but not admin, redirect to home\n        setLocation('/');\n      }\n    }\n  }, [isAuthenticated, isLoading, user, setLocation]);\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated or not admin, redirect will happen via useEffect\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-2\">Ruxsat yo'q</h1>\n          <p className=\"text-gray-600\">Bu sahifaga faqat administratorlar kira oladi.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":1599},"client/src/components/AppDownloadPrompt.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useLanguage } from './language-provider';\n\nexport function AppDownloadPrompt() {\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isDismissed, setIsDismissed] = useState(false);\n  const { language } = useLanguage();\n\n  useEffect(() => {\n    // Agar avval dismiss qilingan bo'lsa, ko'rsatmaslik\n    const dismissed = localStorage.getItem('appDownloadPromptDismissed');\n    if (dismissed) {\n      setIsDismissed(true);\n      return;\n    }\n\n    // 5 minut (300,000 ms) timer o'rnatish\n    const timer = setTimeout(() => {\n      if (!isDismissed) {\n        setShowPrompt(true);\n      }\n    }, 300000); // 5 minut\n\n    return () => clearTimeout(timer);\n  }, [isDismissed]);\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    setIsDismissed(true);\n    // LocalStorage'ga saqlash - 24 soat davomida ko'rsatmaslik\n    const expiryTime = Date.now() + (24 * 60 * 60 * 1000); // 24 soat\n    localStorage.setItem('appDownloadPromptDismissed', expiryTime.toString());\n  };\n\n  const handleDownload = (store: 'ios' | 'android') => {\n    if (store === 'ios') {\n      window.open('https://apps.apple.com/uz/app/optom-bazar/id6477342838', '_blank');\n    } else {\n      window.open('https://play.google.com/store/apps/details?id=com.uzmobdev.optom_bazar', '_blank');\n    }\n    handleDismiss();\n  };\n\n  // Agar ko'rsatilmasa yoki dismiss qilingan bo'lsa, hech narsa qaytarmaslik\n  if (!showPrompt || isDismissed) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"max-w-md w-full mx-auto animate-in slide-in-from-bottom duration-300\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex justify-between items-start mb-4\">\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                {language === 'uz' ? 'Bizni yuklab oling!' : '–°–∫–∞—á–∞–π—Ç–µ –Ω–∞—Å!'}\n              </h3>\n              <p className=\"text-gray-600 text-sm\">\n                {language === 'uz' \n                  ? 'Mobil ilovamiz orqali yanada qulay xarid qiling. Tezroq, osonroq va har doim qo\\'lingizda!'\n                  : '–î–µ–ª–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ —É–¥–æ–±–Ω–µ–µ —á–µ—Ä–µ–∑ –Ω–∞—à–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ë—ã—Å—Ç—Ä–µ–µ, –ø—Ä–æ—â–µ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!'\n                }\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDismiss}\n              className=\"ml-2 h-8 w-8 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n            {/* App Store Button */}\n            <Button\n              onClick={() => handleDownload('ios')}\n              className=\"flex items-center justify-center bg-black hover:bg-gray-800 text-white p-3 h-auto\"\n              data-testid=\"button-download-ios\"\n            >\n              <svg className=\"w-8 h-8 mr-3\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n              </svg>\n              <div className=\"text-left\">\n                <div className=\"text-xs opacity-75\">Download on the</div>\n                <div className=\"text-sm font-semibold\">App Store</div>\n              </div>\n            </Button>\n\n            {/* Google Play Button */}\n            <Button\n              onClick={() => handleDownload('android')}\n              className=\"flex items-center justify-center bg-black hover:bg-gray-800 text-white p-3 h-auto\"\n              data-testid=\"button-download-android\"\n            >\n              <svg className=\"w-8 h-8 mr-3\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n              </svg>\n              <div className=\"text-left\">\n                <div className=\"text-xs opacity-75\">GET IT ON</div>\n                <div className=\"text-sm font-semibold\">Google Play</div>\n              </div>\n            </Button>\n          </div>\n\n          <div className=\"mt-4 text-center\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleDismiss}\n              className=\"text-gray-500\"\n            >\n              {language === 'uz' ? 'Keyinroq' : '–ü–æ–∑–∂–µ'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5329},"client/src/components/MarketingTracker.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { initializeMarketingTracking, cleanupMarketingData } from '@/utils/marketing';\n\nexport function MarketingTracker() {\n  const [location] = useLocation();\n\n  // Initialize marketing tracking on component mount\n  useEffect(() => {\n    initializeMarketingTracking();\n    \n    // Clean up old marketing data\n    cleanupMarketingData();\n  }, []);\n\n  // Track page changes\n  useEffect(() => {\n    // Track page view with current location\n    if (typeof window !== 'undefined' && window.dataLayer) {\n      window.dataLayer.push({\n        event: 'page_view',\n        page_path: location,\n        page_location: window.location.href,\n        page_title: document.title\n      });\n    }\n  }, [location]);\n\n  return null; // This component doesn't render anything\n}","size_bytes":833},"client/src/components/MobileBottomNav.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Home, Grid3X3, ShoppingCart, Heart, User, Download } from 'lucide-react';\nimport { useLanguage } from './language-provider';\nimport { useCart } from '@/context/CartContext';\nimport { useEffect, useState } from 'react';\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\nexport function MobileBottomNav() {\n  const [location] = useLocation();\n  const { language } = useLanguage();\n  const { cartItems } = useCart();\n  const [canInstall, setCanInstall] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  const cartItemsCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: BeforeInstallPromptEvent) => {\n      e.preventDefault();\n      setCanInstall(true);\n      (window as any).deferredPrompt = e;\n    };\n\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setCanInstall(false);\n    };\n\n    // PWA allaqachon o'rnatilganligini tekshirish\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      setIsInstalled(true);\n    }\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    const deferredPrompt = (window as any).deferredPrompt;\n    if (deferredPrompt) {\n      try {\n        await deferredPrompt.prompt();\n        const { outcome } = await deferredPrompt.userChoice;\n        \n        if (outcome === 'accepted') {\n          setCanInstall(false);\n        }\n        \n        (window as any).deferredPrompt = null;\n      } catch (error) {\n        console.error('O\\'rnatishda xatolik:', error);\n      }\n    }\n  };\n\n  const navItems = [\n    {\n      href: '/',\n      icon: Home,\n      labelUz: 'Bosh sahifa',\n      labelRu: '–ì–ª–∞–≤–Ω–∞—è',\n    },\n    {\n      href: '/catalog',\n      icon: Grid3X3,\n      labelUz: 'Katalog',\n      labelRu: '–ö–∞—Ç–∞–ª–æ–≥',\n    },\n    {\n      href: '/cart',\n      icon: ShoppingCart,\n      labelUz: 'Savat',\n      labelRu: '–ö–æ—Ä–∑–∏–Ω–∞',\n      badge: cartItemsCount > 0 ? cartItemsCount : undefined,\n    },\n    {\n      href: '/favorites',\n      icon: Heart,\n      labelUz: 'Saralangan',\n      labelRu: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',\n    },\n    {\n      href: '/profile',\n      icon: User,\n      labelUz: 'Kabinet',\n      labelRu: '–ö–∞–±–∏–Ω–µ—Ç',\n    },\n  ];\n\n  // Agar ilova o'rnatilish mumkin bo'lsa, \"Yuklab olish\" tugmasini qo'shish\n  const finalNavItems = canInstall && !isInstalled \n    ? [\n        ...navItems.slice(0, 2),\n        {\n          href: '#install',\n          icon: Download,\n          labelUz: 'Ilova',\n          labelRu: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',\n          isInstallButton: true,\n        },\n        ...navItems.slice(2, 4),\n        navItems[4] // Profile tugmasi\n      ]\n    : navItems;\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 z-50 bg-black dark:bg-black border-t border-gray-800 shadow-lg md:hidden\">\n      <div className=\"flex items-center justify-around py-2\">\n        {finalNavItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          const label = language === 'uz' ? item.labelUz : item.labelRu;\n\n          // Ilova o'rnatish tugmasi uchun alohida handler\n          if ((item as any).isInstallButton) {\n            return (\n              <button\n                key={item.href}\n                onClick={handleInstallClick}\n                className=\"flex flex-col items-center justify-center px-2 py-2 rounded-lg transition-colors text-green-400 hover:text-green-300 hover:bg-green-900/30\"\n                data-testid=\"button-install-mobile\"\n              >\n                <div className=\"relative\">\n                  <Icon className=\"h-5 w-5\" />\n                </div>\n                <span className=\"text-xs mt-1 leading-none\">{label}</span>\n              </button>\n            );\n          }\n\n          return (\n            <Link key={item.href} href={item.href}>\n              <button\n                className={`flex flex-col items-center justify-center px-2 py-2 rounded-lg transition-colors ${\n                  isActive\n                    ? 'text-blue-400 bg-blue-900/30'\n                    : 'text-white hover:text-blue-300'\n                }`}\n              >\n                <div className=\"relative\">\n                  <Icon className=\"h-5 w-5\" />\n                  {'badge' in item && item.badge && (\n                    <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                      {item.badge > 99 ? '99+' : item.badge}\n                    </span>\n                  )}\n                </div>\n                <span className=\"text-xs mt-1 leading-none\">{label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}","size_bytes":5289},"client/src/components/MobileTopNav.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { useLanguage } from './language-provider';\nimport { Link, useLocation } from 'wouter';\nimport { Search, Globe, X, Phone, User } from 'lucide-react';\nimport { UzbekistanFlag, RussiaFlag } from '@/components/ui/flag-icons';\nimport logoImage from '@assets/optombazar logo_1755690917356.png';\n\nexport function MobileTopNav() {\n  const { language, setLanguage } = useLanguage();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showSearch, setShowSearch] = useState(false);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/search?q=${encodeURIComponent(searchQuery.trim())}`);\n      setShowSearch(false);\n      setSearchQuery('');\n    }\n  };\n\n  return (\n    <nav className=\"md:hidden fixed top-0 w-full bg-background shadow-md z-50\">\n      {/* Mobile Top Bar */}\n      <div className=\"bg-blue-600 text-white py-1 px-4\">\n        <div className=\"flex justify-between items-center text-xs\">\n          <div className=\"flex items-center space-x-2\">\n            <Phone className=\"h-3 w-3\" />\n            <span>+998 71 123-45-67</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Link href=\"/login\" className=\"hover:text-blue-200\">\n              <User className=\"h-3 w-3 inline mr-1\" />\n              Kirish\n            </Link>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center justify-between px-4 h-14\">\n        {/* Logo */}\n        <Link href=\"/\" className=\"flex items-center\">\n          <img \n            src={logoImage} \n            alt=\"Optombazar.uz\" \n            className=\"h-8 w-auto\"\n          />\n        </Link>\n\n        {/* Right Actions */}\n        <div className=\"flex items-center gap-2\">\n          {/* Search Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowSearch(!showSearch)}\n            className=\"p-2\"\n          >\n            {showSearch ? <X className=\"h-5 w-5\" /> : <Search className=\"h-5 w-5\" />}\n          </Button>\n\n          {/* Language Selector */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                {language === 'uz' ? (\n                  <UzbekistanFlag className=\"w-5 h-5\" />\n                ) : (\n                  <RussiaFlag className=\"w-5 h-5\" />\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => setLanguage('uz')} className=\"gap-2\">\n                <UzbekistanFlag className=\"w-4 h-4\" />\n                O'zbek\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setLanguage('ru')} className=\"gap-2\">\n                <RussiaFlag className=\"w-4 h-4\" />\n                –†—É—Å—Å–∫–∏–π\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      {/* Mobile Search Bar (Expandable) */}\n      {showSearch && (\n        <div className=\"px-4 pb-3 border-t border-gray-100\">\n          <form onSubmit={handleSearch} className=\"flex gap-2\">\n            <Input\n              type=\"text\"\n              placeholder={language === 'uz' ? 'Qidiruv...' : '–ü–æ–∏—Å–∫...'}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1\"\n              autoFocus\n            />\n            <Button\n              type=\"submit\"\n              size=\"sm\"\n              className=\"bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600\"\n            >\n              <Search className=\"h-4 w-4\" />\n            </Button>\n          </form>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":4122},"client/src/components/ProtectedRoute.tsx":{"content":"import { ReactNode } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/login');\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated, redirect will happen via useEffect\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}","size_bytes":1065},"client/src/components/PushNotificationSetup.tsx":{"content":"import { useEffect } from 'react';\nimport { usePushNotification } from '@/hooks/usePushNotification';\nimport { useLanguage } from '@/components/language-provider';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Bell, BellOff, Loader2 } from 'lucide-react';\n\ninterface PushNotificationSetupProps {\n  autoRequest?: boolean; // Avtomatik ruxsat so'rashmi\n  showCard?: boolean; // Karta ko'rinishida ko'rsatishmi\n}\n\nexport function PushNotificationSetup({ \n  autoRequest = false, \n  showCard = true \n}: PushNotificationSetupProps) {\n  const { language } = useLanguage();\n  const { \n    isSupported, \n    permission, \n    isSubscribed, \n    isLoading, \n    error,\n    subscribe, \n    unsubscribe \n  } = usePushNotification();\n\n  // Avtomatik ruxsat so'rash (faqat bir marta)\n  useEffect(() => {\n    if (autoRequest && isSupported && permission === 'default' && !isSubscribed) {\n      const hasAskedBefore = localStorage.getItem('push-permission-asked');\n      if (!hasAskedBefore) {\n        // 2 soniya kutib so'rash (sahifa yuklangandan keyin)\n        const timer = setTimeout(() => {\n          subscribe();\n          localStorage.setItem('push-permission-asked', 'true');\n        }, 2000);\n        \n        return () => clearTimeout(timer);\n      }\n    }\n  }, [autoRequest, isSupported, permission, isSubscribed, subscribe]);\n\n  // Agar brauzer qo'llab-quvvatlamasa\n  if (!isSupported) {\n    return showCard ? (\n      <Card className=\"border-yellow-200 bg-yellow-50 dark:bg-yellow-950/20 dark:border-yellow-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-yellow-700 dark:text-yellow-300\">\n            <BellOff className=\"h-5 w-5\" />\n            {language === 'uz' ? 'Bildirishnoma qo\\'llab-quvvatlanmaydi' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'}\n          </CardTitle>\n          <CardDescription className=\"text-yellow-600 dark:text-yellow-400\">\n            {language === 'uz' \n              ? 'Sizning brauzeringiz push notification\\'larni qo\\'llab-quvvatlamaydi'\n              : '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'\n            }\n          </CardDescription>\n        </CardHeader>\n      </Card>\n    ) : null;\n  }\n\n  // Agar ruxsat rad etilgan bo'lsa\n  if (permission === 'denied') {\n    return showCard ? (\n      <Card className=\"border-red-200 bg-red-50 dark:bg-red-950/20 dark:border-red-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-red-700 dark:text-red-300\">\n            <BellOff className=\"h-5 w-5\" />\n            {language === 'uz' ? 'Bildirishnoma ruxsati rad etilgan' : '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}\n          </CardTitle>\n          <CardDescription className=\"text-red-600 dark:text-red-400\">\n            {language === 'uz' \n              ? 'Bildirishnomalarni yoqish uchun brauzer sozlamalarida ruxsat bering'\n              : '–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞'\n            }\n          </CardDescription>\n        </CardHeader>\n      </Card>\n    ) : null;\n  }\n\n  const handleToggleSubscription = () => {\n    if (isSubscribed) {\n      unsubscribe();\n    } else {\n      subscribe();\n    }\n  };\n\n  const content = (\n    <>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-blue-700 dark:text-blue-300\">\n          <Bell className=\"h-5 w-5\" />\n          {language === 'uz' ? 'Yangiliklar haqida xabardor bo\\'ling' : '–ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π'}\n        </CardTitle>\n        <CardDescription>\n          {language === 'uz' \n            ? 'Yangi mahsulotlar va chegirmalar haqida birinchi bo\\'lib bilib oling'\n            : '–£–∑–Ω–∞–≤–∞–π—Ç–µ –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö –ø–µ—Ä–≤—ã–º–∏'\n          }\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {error && (\n            <div className=\"text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-950/20 p-3 rounded\">\n              {error}\n            </div>\n          )}\n          \n          <Button \n            onClick={handleToggleSubscription}\n            disabled={isLoading}\n            className={isSubscribed ? \"bg-gray-600 hover:bg-gray-700\" : \"bg-blue-600 hover:bg-blue-700\"}\n            size=\"lg\"\n            data-testid={isSubscribed ? \"button-unsubscribe-push\" : \"button-subscribe-push\"}\n          >\n            {isLoading && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n            {isSubscribed ? (\n              <>\n                <BellOff className=\"h-4 w-4 mr-2\" />\n                {language === 'uz' ? 'Obunani bekor qilish' : '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'}\n              </>\n            ) : (\n              <>\n                <Bell className=\"h-4 w-4 mr-2\" />\n                {language === 'uz' ? 'Obuna bo\\'lish' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'}\n              </>\n            )}\n          </Button>\n          \n          {isSubscribed && (\n            <div className=\"text-sm text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-950/20 p-3 rounded\">\n              {language === 'uz' \n                ? '‚úì Siz yangiliklar haqida bildirishnomalar olasiz'\n                : '‚úì –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö'\n              }\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </>\n  );\n\n  return showCard ? (\n    <Card className=\"border-blue-200 bg-blue-50 dark:bg-blue-950/20 dark:border-blue-800\">\n      {content}\n    </Card>\n  ) : (\n    <div>{content}</div>\n  );\n}","size_bytes":5720},"client/src/components/SEOHead.tsx":{"content":"import { Helmet } from 'react-helmet-async';\nimport type { SEOMetaTags } from '@shared/seo';\n\ninterface SEOHeadProps {\n  seo: SEOMetaTags;\n}\n\nexport function SEOHead({ seo }: SEOHeadProps) {\n  return (\n    <Helmet>\n      {/* Basic Meta Tags */}\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"keywords\" content={seo.keywords.join(', ')} />\n      \n      {/* Canonical URL */}\n      {seo.canonicalUrl && <link rel=\"canonical\" href={seo.canonicalUrl} />}\n      \n      {/* Open Graph / Facebook */}\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={seo.ogTitle} />\n      <meta property=\"og:description\" content={seo.ogDescription} />\n      {seo.ogImage && <meta property=\"og:image\" content={seo.ogImage} />}\n      {seo.ogUrl && <meta property=\"og:url\" content={seo.ogUrl} />}\n      <meta property=\"og:site_name\" content=\"OptomBazar.uz\" />\n      \n      {/* Twitter */}\n      <meta name=\"twitter:card\" content={seo.twitterCard} />\n      <meta name=\"twitter:title\" content={seo.twitterTitle} />\n      <meta name=\"twitter:description\" content={seo.twitterDescription} />\n      {seo.twitterImage && <meta name=\"twitter:image\" content={seo.twitterImage} />}\n      \n      {/* Additional SEO Meta Tags */}\n      <meta name=\"robots\" content=\"index, follow\" />\n      <meta name=\"language\" content=\"uz\" />\n      <meta name=\"author\" content=\"OptomBazar.uz\" />\n      \n      {/* Structured Data */}\n      {seo.structuredData && (\n        <script type=\"application/ld+json\">\n          {JSON.stringify(seo.structuredData)}\n        </script>\n      )}\n    </Helmet>\n  );\n}","size_bytes":1656},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun, Monitor } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function ThemeToggle() {\n  const { setTheme, theme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"h-9 w-9 px-0\"\n          data-testid=\"theme-toggle-button\"\n        >\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Mavzuni o'zgartirish</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"bg-card text-card-foreground border-border\">\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")}\n          className={`cursor-pointer ${theme === 'light' ? 'bg-accent' : ''}`}\n          data-testid=\"theme-light\"\n        >\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Yorug'</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")}\n          className={`cursor-pointer ${theme === 'dark' ? 'bg-accent' : ''}`}\n          data-testid=\"theme-dark\"\n        >\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Qorong'u</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")}\n          className={`cursor-pointer ${theme === 'system' ? 'bg-accent' : ''}`}\n          data-testid=\"theme-system\"\n        >\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>Tizim</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1964},"client/src/components/category-card.tsx":{"content":"import { useLanguage } from './language-provider';\nimport { Category } from '@shared/schema';\n\ninterface CategoryCardProps {\n  category: Category;\n  onClick?: () => void;\n}\n\nexport function CategoryCard({ category, onClick }: CategoryCardProps) {\n  const { language } = useLanguage();\n  \n  const name = language === 'uz' ? category.nameUz : category.nameRu;\n  const description = language === 'uz' ? category.descriptionUz : category.descriptionRu;\n\n  return (\n    <div \n      className=\"bg-white rounded-xl shadow-sm hover:shadow-lg transition-shadow p-6 text-center group cursor-pointer\"\n      onClick={onClick}\n      data-testid={`card-category-${category.slug}`}\n    >\n      {category.image && (\n        <img \n          src={category.image} \n          alt={name} \n          className=\"w-full h-32 object-cover rounded-lg mb-4\"\n          data-testid={`img-category-${category.slug}`}\n        />\n      )}\n      <h3 className=\"text-xl font-semibold text-gray-900 mb-2 group-hover:text-primary transition-colors\" data-testid={`text-category-name-${category.slug}`}>\n        {name}\n      </h3>\n      {description && (\n        <p className=\"text-gray-600 mb-4\" data-testid={`text-category-description-${category.slug}`}>\n          {description}\n        </p>\n      )}\n      <div className=\"text-sm text-success font-medium\" data-testid={`text-category-count-${category.slug}`}>\n        1000+ {language === 'uz' ? 'mahsulot' : '—Ç–æ–≤–∞—Ä–æ–≤'}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1472},"client/src/components/footer.tsx":{"content":"import { useLanguage } from './language-provider';\nimport logoImage from '@assets/optombazar logo_1755690917356.png';\n\nexport function Footer() {\n  const { t, language } = useLanguage();\n\n  return (\n    <footer className=\"bg-black dark:bg-black text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center mb-4\">\n              <img \n                src={logoImage} \n                alt=\"OptomMarket.uz\" \n                className=\"h-10 w-auto filter brightness-0 invert\"\n              />\n            </div>\n            <p className=\"text-white text-sm mb-4\">\n              O'zbekiston uchun ishonchli optom bozor platformasi. Sizning biznesingiz uchun eng yaxshi yechimlar.\n            </p>\n            \n            {/* Mobile Apps Section */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-white font-semibold mb-3\">Mobil ilovalarimiz</h3>\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <a \n                  href=\"https://apps.apple.com/uz/app/optom-bazar/id6477342838\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center bg-black hover:bg-gray-800 transition-colors rounded-lg px-4 py-2 w-fit\"\n                  data-testid=\"link-app-store\"\n                >\n                  <svg className=\"w-6 h-6 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                  </svg>\n                  <div className=\"text-left\">\n                    <div className=\"text-xs text-white\">{language === 'uz' ? 'Yuklab oling' : '–°–∫–∞—á–∞—Ç—å –≤'}</div>\n                    <div className=\"text-sm font-semibold\">App Store</div>\n                  </div>\n                </a>\n                \n                <a \n                  href=\"https://play.google.com/store/apps/details?id=com.uzmobdev.optom_bazar\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center bg-black hover:bg-gray-800 transition-colors rounded-lg px-4 py-2 w-fit\"\n                  data-testid=\"link-google-play\"\n                >\n                  <svg className=\"w-6 h-6 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n                  </svg>\n                  <div className=\"text-left\">\n                    <div className=\"text-xs text-white\">{language === 'uz' ? 'Oling' : '–î–æ—Å—Ç—É–ø–Ω–æ –≤'}</div>\n                    <div className=\"text-sm font-semibold\">Google Play</div>\n                  </div>\n                </a>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\" data-testid=\"link-social-twitter\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\" data-testid=\"link-social-facebook\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z\"/>\n                </svg>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\" data-testid=\"link-social-instagram\">\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 5.079 3.158 9.417 7.618 11.174-.105-.949-.199-2.403.041-3.439.219-.937 1.406-5.957 1.406-5.957s-.359-.72-.359-1.781c0-1.663.967-2.911 2.168-2.911 1.024 0 1.518.769 1.518 1.688 0 1.029-.653 2.567-.992 3.992-.285 1.193.6 2.165 1.775 2.165 2.128 0 3.768-2.245 3.768-5.487 0-2.861-2.063-4.869-5.008-4.869-3.41 0-5.409 2.562-5.409 5.199 0 1.033.394 2.143.889 2.741.098.118.112.221.083.343-.09.379-.293 1.199-.334 1.363-.053.225-.172.271-.402.165-1.495-.69-2.433-2.878-2.433-4.646 0-3.776 2.748-7.252 7.92-7.252 4.158 0 7.392 2.967 7.392 6.923 0 4.135-2.607 7.462-6.233 7.462-1.214 0-2.357-.629-2.75-1.378l-.748 2.853c-.271 1.043-1.002 2.35-1.492 3.146C9.57 23.812 10.763 24.009 12.017 24.009c6.624 0 11.99-5.367 11.99-11.988C24.007 5.367 18.641.001 12.017.001z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">{t('quickLinks')}</h3>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-about\">{t('aboutUs')}</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-categories\">{t('categories')}</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-products\">{t('products')}</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-seller\">{t('becomeSellerFooter')}</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-help\">{t('help')}</a></li>\n            </ul>\n          </div>\n\n          {/* Categories */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">{t('categories')}</h3>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-category-bags\">Polietilen Paketlar</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-category-disposable\">Bir Martalik Idishlar</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-category-electronics\">Elektronika</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-category-clothing\">Kiyim-Kechak</a></li>\n              <li><a href=\"#\" className=\"text-white hover:text-gray-300 transition-colors\" data-testid=\"link-footer-category-other\">Boshqa Kategoriyalar</a></li>\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">{t('contactInfo')}</h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-center\">\n                <svg className=\"w-5 h-5 text-primary mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"></path>\n                </svg>\n                <span className=\"text-white\" data-testid=\"text-phone\">+998996448444</span>\n              </li>\n              <li className=\"flex items-center\">\n                <svg className=\"w-5 h-5 text-primary mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"></path>\n                </svg>\n                <span className=\"text-white\" data-testid=\"text-email\">akramjon2504@gmail.com</span>\n              </li>\n              <li className=\"flex items-start\">\n                <svg className=\"w-5 h-5 text-primary mr-3 mt-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n                </svg>\n                <span className=\"text-white\" data-testid=\"text-address\">{t('address')}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-white text-sm\" data-testid=\"text-copyright\">\n            {t('copyright')}\n          </p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-white hover:text-gray-300 text-sm transition-colors\" data-testid=\"link-privacy\">{t('privacyPolicy')}</a>\n            <a href=\"#\" className=\"text-white hover:text-gray-300 text-sm transition-colors\" data-testid=\"link-terms\">{t('termsOfUse')}</a>\n            <a href=\"#\" className=\"text-white hover:text-gray-300 text-sm transition-colors\" data-testid=\"link-cookies\">{t('cookiePolicy')}</a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":10927},"client/src/components/header.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from './language-provider';\nimport { useAuth } from '@/context/AuthContext';\nimport { useCart } from '@/context/CartContext';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Badge } from './ui/badge';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from './ui/dropdown-menu';\nimport { \n  Search, ShoppingCart, User, Heart, Phone, Mail, \n  Facebook, Instagram, ChevronDown, Folder, BookOpen, \n  MessageCircle, Settings, Menu, X\n} from 'lucide-react';\nimport { ThemeToggle } from './theme-toggle';\nimport logoImage from '@assets/optombazar logo_1755690917356.png';\n\ninterface Category {\n  id: string;\n  nameUz: string;\n  nameRu: string;\n  slug: string;\n  parentId: string | null;\n}\n\nexport function Header() {\n  const [, setLocation] = useLocation();\n  const { language } = useLanguage();\n  const { user, logout } = useAuth();\n  const { cartItems = [] } = useCart();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const isAuthenticated = !!user;\n  const cartItemsCount = cartItems.reduce((sum: number, item: any) => sum + item.quantity, 0);\n\n  // Fetch categories for navigation\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      return response.json();\n    },\n  });\n\n  // Get main categories (no parent) - show more categories  \n  const mainCategories = categories.filter(cat => !cat.parentId).slice(0, 12);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/search?q=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  return (\n    <header className=\"sticky top-0 z-40 bg-white/95 dark:bg-gray-900/95 backdrop-blur-md border-b border-gray-200/50 dark:border-gray-700/50 shadow-lg\">\n      {/* Top Bar */}\n      <div className=\"bg-gradient-to-r from-gray-800 to-gray-900 text-white py-2 hidden md:block\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center text-sm\">\n            {/* Contact Info */}\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Phone className=\"h-4 w-4\" />\n                <span>+998 90 123 45 67</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Mail className=\"h-4 w-4\" />\n                <span>info@optommarket.uz</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Social Media & Mobile Apps */}\n              <div className=\"flex items-center space-x-3\">\n                <a href=\"https://www.facebook.com/optommarket.uz\" target=\"_blank\" rel=\"noopener noreferrer\" \n                   className=\"hover:text-blue-200 transition-colors\">\n                  <Facebook className=\"h-4 w-4\" />\n                </a>\n                <a href=\"https://www.instagram.com/optommarket_uz/\" target=\"_blank\" rel=\"noopener noreferrer\"\n                   className=\"hover:text-blue-200 transition-colors\">\n                  <Instagram className=\"h-4 w-4\" />\n                </a>\n                <a href=\"https://t.me/optommarketuz\" target=\"_blank\" rel=\"noopener noreferrer\"\n                   className=\"hover:text-blue-200 transition-colors\">\n                  <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.568 8.16l-1.58 7.44c-.12.54-.44.67-.89.42l-2.46-1.81-1.19 1.14c-.13.13-.24.24-.49.24l.17-2.43 4.33-3.91c.19-.17-.04-.26-.29-.1L9.39 13.47l-2.4-.75c-.52-.16-.53-.52.11-.77l9.39-3.61c.43-.16.81.1.67.76z\"/>\n                  </svg>\n                </a>\n              </div>\n              \n              <div className=\"h-4 w-px bg-white/30\"></div>\n              \n              {/* Authentication Links */}\n              {!isAuthenticated ? (\n                <div className=\"flex items-center space-x-3\">\n                  <Link href=\"/login\" className=\"hover:text-blue-200 transition-colors\">\n                    {language === 'uz' ? 'Kirish' : '–í–æ–π—Ç–∏'}\n                  </Link>\n                  <span className=\"text-white/50\">|</span>\n                  <Link href=\"/register\" className=\"hover:text-blue-200 transition-colors\">\n                    {language === 'uz' ? 'Ro\\'yxatdan o\\'tish' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}\n                  </Link>\n                </div>\n              ) : (\n                <Link href=\"/profile\" className=\"hover:text-blue-200 transition-colors\">\n                  <User className=\"h-4 w-4 inline mr-1\" />\n                  {language === 'uz' ? 'Kabinet' : '–ö–∞–±–∏–Ω–µ—Ç'}\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main Header */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <img \n                src={logoImage} \n                alt=\"OptomMarket.uz\" \n                className=\"h-10 w-auto\"\n              />\n            </Link>\n          </div>\n\n          {/* Main Navigation Menu */}\n          <nav className=\"hidden lg:flex items-center space-x-6 ml-8\">\n            {/* Primary Navigation Links */}\n            <Link \n              href=\"/catalog\" \n              className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium\"\n            >\n              <Folder className=\"h-4 w-4\" />\n              {language === 'uz' ? 'Katalog' : '–ö–∞—Ç–∞–ª–æ–≥'}\n            </Link>\n            \n            <Link \n              href=\"/blog\" \n              className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium\"\n            >\n              <BookOpen className=\"h-4 w-4\" />\n              {language === 'uz' ? 'Blog' : '–ë–ª–æ–≥'}\n            </Link>\n            \n            <Link \n              href=\"/contact\" \n              className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors font-medium\"\n            >\n              <MessageCircle className=\"h-4 w-4\" />\n              {language === 'uz' ? 'Aloqa' : '–ö–æ–Ω—Ç–∞–∫—Ç—ã'}\n            </Link>\n          </nav>\n\n          {/* Right Section */}\n          <div className=\"flex items-center gap-2 md:gap-4\">\n            {/* Search Bar - Responsive width */}\n            <div className=\"flex-1 max-w-xs md:max-w-md\">\n              <form onSubmit={handleSearch} className=\"flex\">\n                <Input\n                  type=\"text\"\n                  placeholder={language === 'uz' ? 'Qidiruv...' : '–ü–æ–∏—Å–∫...'}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  className=\"ml-1 bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600\"\n                >\n                  <Search className=\"h-4 w-4\" />\n                </Button>\n              </form>\n            </div>\n\n            {/* Theme Toggle */}\n            <ThemeToggle />\n\n            {/* Favorites */}\n            {user && (\n              <Link href=\"/favorites\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Heart className=\"h-5 w-5\" />\n                </Button>\n              </Link>\n            )}\n\n            {/* Shopping Cart */}\n            <Link href=\"/cart\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                {cartItemsCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                  >\n                    {cartItemsCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n\n            {/* User Menu */}\n            <div className=\"hidden md:block\">\n              {user ? (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <User className=\"h-4 w-4 mr-1\" />\n                      {user?.username}\n                      <ChevronDown className=\"h-3 w-3 ml-1\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        {language === 'uz' ? 'Profil' : '–ü—Ä–æ—Ñ–∏–ª—å'}\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/orders\">\n                        <ShoppingCart className=\"mr-2 h-4 w-4\" />\n                        {language === 'uz' ? 'Buyurtmalar' : '–ó–∞–∫–∞–∑—ã'}\n                      </Link>\n                    </DropdownMenuItem>\n                    {user?.role === 'admin' && (\n                      <>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem asChild>\n                          <Link href=\"/admin\">\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            {language === 'uz' ? 'Admin panel' : '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'}\n                          </Link>\n                        </DropdownMenuItem>\n                      </>\n                    )}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={logout}>\n                      {language === 'uz' ? 'Chiqish' : '–í—ã–π—Ç–∏'}\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Link href=\"/login\">\n                  <Button size=\"sm\">\n                    <User className=\"h-4 w-4 mr-1\" />\n                    {language === 'uz' ? 'Kirish' : '–í–æ–π—Ç–∏'}\n                  </Button>\n                </Link>\n              )}\n            </div>\n\n            {/* Mobile Menu Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            >\n              {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"px-4 py-2 space-y-2\">\n            <Link \n              href=\"/catalog\" \n              className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {language === 'uz' ? 'Katalog' : '–ö–∞—Ç–∞–ª–æ–≥'}\n            </Link>\n            <Link \n              href=\"/blog\" \n              className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {language === 'uz' ? 'Blog' : '–ë–ª–æ–≥'}\n            </Link>\n            <Link \n              href=\"/contact\" \n              className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {language === 'uz' ? 'Aloqa' : '–ö–æ–Ω—Ç–∞–∫—Ç—ã'}\n            </Link>\n            \n            {!user ? (\n              <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n                <Link \n                  href=\"/login\" \n                  className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {language === 'uz' ? 'Kirish' : '–í–æ–π—Ç–∏'}\n                </Link>\n                <Link \n                  href=\"/register\" \n                  className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {language === 'uz' ? 'Ro\\'yxatdan o\\'tish' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}\n                </Link>\n              </div>\n            ) : (\n              <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n                <Link \n                  href=\"/profile\" \n                  className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {language === 'uz' ? 'Profil' : '–ü—Ä–æ—Ñ–∏–ª—å'}\n                </Link>\n                <Link \n                  href=\"/orders\" \n                  className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {language === 'uz' ? 'Buyurtmalar' : '–ó–∞–∫–∞–∑—ã'}\n                </Link>\n                {user?.role === 'admin' && (\n                  <Link \n                    href=\"/admin\" \n                    className=\"block py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    {language === 'uz' ? 'Admin panel' : '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'}\n                  </Link>\n                )}\n                <button \n                  onClick={() => {\n                    logout();\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"block w-full text-left py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\"\n                >\n                  {language === 'uz' ? 'Chiqish' : '–í—ã–π—Ç–∏'}\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":15082},"client/src/components/language-provider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Language, getTranslation } from '@/lib/translations';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<Language>('uz');\n\n  useEffect(() => {\n    const saved = localStorage.getItem('language') as Language;\n    if (saved && (saved === 'uz' || saved === 'ru')) {\n      setLanguage(saved);\n    }\n  }, []);\n\n  const handleSetLanguage = (lang: Language) => {\n    setLanguage(lang);\n    localStorage.setItem('language', lang);\n  };\n\n  const t = (key: string) => getTranslation(language, key);\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":1213},"client/src/components/product-card.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useLanguage } from './language-provider';\nimport { useCart } from '@/context/CartContext';\nimport { useAuth } from '@/context/AuthContext';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { Heart } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Product } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\n\ninterface ProductCardProps {\n  product: Product;\n  onAddToCart?: (product: Product) => void;\n}\n\nexport function ProductCard({ product, onAddToCart }: ProductCardProps) {\n  const { language, t } = useLanguage();\n  const { addToCart } = useCart();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const name = language === 'uz' ? product.nameUz : product.nameRu;\n  const description = language === 'uz' ? product.descriptionUz : product.descriptionRu;\n  \n  const stockStatus = (product.stockQuantity || 0) > 100 ? 'inStock' : \n                     (product.stockQuantity || 0) > 0 ? 'lowStock' : 'outOfStock';\n  \n  const statusColors = {\n    inStock: 'text-green-800 bg-green-100 dark:text-green-200 dark:bg-green-900/30',\n    lowStock: 'text-yellow-800 bg-yellow-100 dark:text-yellow-200 dark:bg-yellow-900/30',\n    outOfStock: 'text-red-800 bg-red-100 dark:text-red-200 dark:bg-red-900/30'\n  };\n\n  // Check if product is in favorites\n  const { data: favoriteStatus } = useQuery({\n    queryKey: ['/api/favorites/check', product.id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/favorites/check/${product.id}`);\n      return response.json();\n    },\n    enabled: !!user,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Add to favorites mutation\n  const addToFavoritesMutation = useMutation({\n    mutationFn: () => apiRequest('POST', '/api/favorites', { productId: product.id }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites/check', product.id] });\n      toast({\n        title: language === 'uz' ? \"Sevimlilar ro'yxatiga qo'shildi\" : \"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === 'uz' ? \"Xatolik\" : \"–û—à–∏–±–∫–∞\",\n        description: error.message || (language === 'uz' ? \"Sevimlilar ro'yxatiga qo'shishda xatolik\" : \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove from favorites mutation\n  const removeFromFavoritesMutation = useMutation({\n    mutationFn: () => apiRequest('DELETE', `/api/favorites/${product.id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites/check', product.id] });\n      toast({\n        title: language === 'uz' ? \"Sevimlilar ro'yxatidan o'chirildi\" : \"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === 'uz' ? \"Xatolik\" : \"–û—à–∏–±–∫–∞\",\n        description: error.message || (language === 'uz' ? \"Sevimlilar ro'yxatidan o'chirishda xatolik\" : \"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    try {\n      await addToCart(product.id, product.minQuantity || 1);\n      if (onAddToCart) {\n        onAddToCart(product);\n      }\n    } catch (error) {\n      console.error('Failed to add to cart:', error);\n    }\n  };\n\n  const handleToggleFavorite = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!user) {\n      toast({\n        title: language === 'uz' ? \"Tizimga kirish talab qilinadi\" : \"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\",\n        description: language === 'uz' ? \"Sevimlilar ro'yxatidan foydalanish uchun tizimga kiring\" : \"–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (favoriteStatus?.isFavorite) {\n      removeFromFavoritesMutation.mutate();\n    } else {\n      addToFavoritesMutation.mutate();\n    }\n  };\n\n  return (\n    <Link href={`/products/${product.slug}`}>\n      <div className=\"bg-card border border-border rounded-xl hover:shadow-lg transition-all group cursor-pointer relative\" data-testid={`card-product-${product.id}`}>\n        {/* Favorites Button */}\n        {user && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className={`absolute top-2 right-2 z-10 p-2 rounded-full ${\n              favoriteStatus?.isFavorite \n                ? 'text-red-500 hover:text-red-600 bg-card/80 hover:bg-card/90' \n                : 'text-muted-foreground hover:text-red-500 bg-card/80 hover:bg-card/90'\n            }`}\n            onClick={handleToggleFavorite}\n            disabled={addToFavoritesMutation.isPending || removeFromFavoritesMutation.isPending}\n          >\n            <Heart \n              className={`h-5 w-5 ${favoriteStatus?.isFavorite ? 'fill-current' : ''}`}\n            />\n          </Button>\n        )}\n        \n        {product.images && product.images.length > 0 && (\n          <img \n            src={product.images[0]} \n            alt={name} \n            className=\"w-full h-48 object-cover rounded-t-xl\"\n            data-testid={`img-product-${product.id}`}\n          />\n        )}\n        <div className=\"p-6\">\n          <h3 className=\"font-semibold text-card-foreground mb-2 group-hover:text-primary transition-colors\" data-testid={`text-product-name-${product.id}`}>\n            {name}\n          </h3>\n        {description && (\n          <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`text-product-description-${product.id}`}>\n            {description}\n          </p>\n        )}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <span className=\"text-lg font-bold text-primary\" data-testid={`text-product-price-${product.id}`}>\n              {Number(product.price).toLocaleString()} so'm\n            </span>\n            <span className=\"text-sm text-muted-foreground ml-1\">\n              / {product.minQuantity} {product.unit}\n            </span>\n          </div>\n          <span className={`text-xs px-2 py-1 rounded-full ${statusColors[stockStatus]}`} data-testid={`status-product-stock-${product.id}`}>\n            {t(stockStatus)}\n          </span>\n        </div>\n        <Button \n          className=\"w-full bg-secondary text-secondary-foreground hover:bg-primary hover:text-primary-foreground\" \n          onClick={handleAddToCart}\n          disabled={(product.stockQuantity || 0) === 0}\n          data-testid={`button-add-to-cart-${product.id}`}\n        >\n          {t('addToCart')}\n        </Button>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":7165},"client/src/components/theme-provider.tsx":{"content":"import { ThemeProvider as NextThemesProvider } from \"next-themes\";\n\nexport function ThemeProvider({ children, ...props }: React.ComponentProps<typeof NextThemesProvider>) {\n  return (\n    <NextThemesProvider\n      attribute=\"class\"\n      defaultTheme=\"system\"\n      enableSystem\n      disableTransitionOnChange\n      {...props}\n    >\n      {children}\n    </NextThemesProvider>\n  );\n}","size_bytes":383},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun, Monitor } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useLanguage } from './language-provider';\n\nexport function ThemeToggle() {\n  const { setTheme, theme } = useTheme();\n  const { language } = useLanguage();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"transition-all duration-300\"\n          data-testid=\"theme-toggle-button\"\n        >\n          <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Mavzuni o'zgartirish</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"bg-card text-card-foreground border-border\">\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")}\n          className={`cursor-pointer ${theme === 'light' ? 'bg-accent' : ''}`}\n          data-testid=\"theme-light\"\n        >\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>{language === 'uz' ? 'Yorug\\'' : '–°–≤–µ—Ç–ª—ã–π'}</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")}\n          className={`cursor-pointer ${theme === 'dark' ? 'bg-accent' : ''}`}\n          data-testid=\"theme-dark\"\n        >\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>{language === 'uz' ? 'Qorong\\'u' : '–¢–µ–º–Ω—ã–π'}</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")}\n          className={`cursor-pointer ${theme === 'system' ? 'bg-accent' : ''}`}\n          data-testid=\"theme-system\"\n        >\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>{language === 'uz' ? 'Tizim' : '–°–∏—Å—Ç–µ–º–∞'}</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2171},"client/src/context/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<{ success: boolean; message?: string }>;\n  register: (username: string, email: string, password: string, phone?: string) => Promise<{ success: boolean; message?: string }>;\n  logout: () => Promise<void>;\n  checkAuth: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const checkAuth = async () => {\n    try {\n      const response = await fetch('/api/auth/me');\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Login failed. Please try again.' };\n    }\n  };\n\n  const register = async (username: string, email: string, password: string, phone?: string) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, email, password, phone }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Registration failed. Please try again.' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    register,\n    logout,\n    checkAuth,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":3149},"client/src/context/CartContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { queryClient as defaultQueryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface CartItemWithProduct {\n  id: string;\n  sessionId: string;\n  productId: string;\n  quantity: number;\n  createdAt: Date;\n  product?: {\n    id: string;\n    nameUz: string;\n    nameRu: string;\n    price: string;\n    wholesalePrice: string;\n    images: string[] | null;\n    slug: string;\n    unit: string;\n    stockQuantity: number;\n  };\n}\n\ninterface CartContextType {\n  cartItems: CartItemWithProduct[];\n  isLoading: boolean;\n  itemCount: number;\n  totalAmount: number;\n  addToCart: (productId: string, quantity: number) => Promise<void>;\n  updateQuantity: (itemId: string, quantity: number) => Promise<void>;\n  removeFromCart: (itemId: string) => Promise<void>;\n  clearCart: () => Promise<void>;\n  refetchCart: () => void;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\nexport function CartProvider({ children }: CartProviderProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Generate or get session ID\n  const getSessionId = () => {\n    let sessionId = localStorage.getItem('cart-session-id');\n    if (!sessionId) {\n      sessionId = 'session-' + Math.random().toString(36).substr(2, 9);\n      localStorage.setItem('cart-session-id', sessionId);\n    }\n    return sessionId;\n  };\n\n  // Fetch cart items\n  const { data: cartItems = [], isLoading, refetch } = useQuery({\n    queryKey: ['/api/cart'],\n    queryFn: async (): Promise<CartItemWithProduct[]> => {\n      const response = await fetch('/api/cart', {\n        headers: {\n          'x-session-id': getSessionId()\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch cart');\n      }\n      return response.json();\n    },\n  });\n\n  // Add to cart mutation\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      const response = await fetch('/api/cart', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-session-id': getSessionId()\n        },\n        body: JSON.stringify({ productId, quantity }),\n      });\n      if (!response.ok) throw new Error('Failed to add to cart');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"Savatga qo'shildi!\",\n        description: \"Mahsulot muvaffaqiyatli savatga qo'shildi.\",\n        duration: 3000,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Xatolik\",\n        description: \"Mahsulotni savatga qo'shishda xatolik yuz berdi.\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  // Update quantity mutation\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      const response = await fetch(`/api/cart/${itemId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-session-id': getSessionId()\n        },\n        body: JSON.stringify({ quantity }),\n      });\n      if (!response.ok) throw new Error('Failed to update quantity');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Xatolik\",\n        description: \"Miqdorni yangilashda xatolik yuz berdi.\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  // Remove from cart mutation\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      const response = await fetch(`/api/cart/${itemId}`, {\n        method: 'DELETE',\n        headers: {\n          'x-session-id': getSessionId()\n        }\n      });\n      if (!response.ok) throw new Error('Failed to remove from cart');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"O'chirildi\",\n        description: \"Mahsulot savatdan o'chirildi.\",\n        duration: 3000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Xatolik\",\n        description: \"Mahsulotni o'chirishda xatolik yuz berdi.\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  // Calculate derived values\n  const itemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\n  const totalAmount = cartItems.reduce((total, item) => {\n    if (item.product) {\n      return total + (parseFloat(item.product.wholesalePrice) * item.quantity);\n    }\n    return total;\n  }, 0);\n\n  // Context methods\n  const addToCart = async (productId: string, quantity: number) => {\n    await addToCartMutation.mutateAsync({ productId, quantity });\n  };\n\n  const updateQuantity = async (itemId: string, quantity: number) => {\n    await updateQuantityMutation.mutateAsync({ itemId, quantity });\n  };\n\n  const removeFromCart = async (itemId: string) => {\n    await removeFromCartMutation.mutateAsync(itemId);\n  };\n\n  const clearCart = async () => {\n    // Remove all items one by one\n    for (const item of cartItems) {\n      await removeFromCartMutation.mutateAsync(item.id);\n    }\n  };\n\n  const value: CartContextType = {\n    cartItems,\n    isLoading,\n    itemCount,\n    totalAmount,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    refetchCart: refetch,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n}","size_bytes":6081},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAnalytics.ts":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\nexport function useAnalytics() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('config', 'GA_MEASUREMENT_ID', {\n        page_path: location,\n        page_title: document.title,\n        page_location: window.location.href\n      });\n    }\n  }, [location]);\n\n  const trackEvent = (action: string, parameters?: Record<string, any>) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', action, {\n        event_category: 'user_interaction',\n        event_label: location,\n        ...parameters\n      });\n    }\n  };\n\n  // E-commerce tracking functions\n  const trackPurchase = (transactionId: string, value: number, currency: string = 'UZS', items: any[]) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'purchase', {\n        transaction_id: transactionId,\n        value: value,\n        currency: currency,\n        items: items\n      });\n    }\n  };\n\n  const trackAddToCart = (currency: string = 'UZS', value: number, items: any[]) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'add_to_cart', {\n        currency: currency,\n        value: value,\n        items: items\n      });\n    }\n  };\n\n  const trackRemoveFromCart = (currency: string = 'UZS', value: number, items: any[]) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'remove_from_cart', {\n        currency: currency,\n        value: value,\n        items: items\n      });\n    }\n  };\n\n  const trackViewItem = (currency: string = 'UZS', value: number, items: any[]) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'view_item', {\n        currency: currency,\n        value: value,\n        items: items\n      });\n    }\n  };\n\n  const trackBeginCheckout = (currency: string = 'UZS', value: number, items: any[]) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'begin_checkout', {\n        currency: currency,\n        value: value,\n        items: items\n      });\n    }\n  };\n\n  const trackSearch = (searchTerm: string, resultsCount?: number) => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'search', {\n        search_term: searchTerm,\n        results_count: resultsCount,\n      });\n    }\n  };\n\n  const trackSignUp = (method: string = 'email') => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'sign_up', {\n        method: method\n      });\n    }\n  };\n\n  const trackLogin = (method: string = 'email') => {\n    if (typeof window.gtag === 'function') {\n      window.gtag('event', 'login', {\n        method: method\n      });\n    }\n  };\n\n  return {\n    trackEvent,\n    trackPurchase,\n    trackAddToCart,\n    trackRemoveFromCart,\n    trackViewItem,\n    trackBeginCheckout,\n    trackSearch,\n    trackSignUp,\n    trackLogin\n  };\n}\n\n// SEO va Analytics ma'lumotlarini server'ga yuborish uchun utility\nexport const sendAnalyticsToServer = async (eventType: string, data: any) => {\n  try {\n    await fetch('/api/analytics/event', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        eventType,\n        data,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        referrer: document.referrer\n      })\n    });\n  } catch (error) {\n    console.error('Analytics event yuborishda xatolik:', error);\n  }\n};","size_bytes":3507},"client/src/hooks/useCategories.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface Category {\n  id: string;\n  nameUz: string;\n  nameRu: string;\n  descriptionUz?: string | null;\n  descriptionRu?: string | null;\n  image?: string | null;\n  slug: string;\n  parentId?: string | null;\n  isActive: boolean;\n  children: Category[];\n}\n\nexport function useCategories() {\n  return useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: async (): Promise<Category[]> => {\n      const response = await fetch(\"/api/categories\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch categories\");\n      }\n      return response.json();\n    },\n  });\n}","size_bytes":637},"client/src/hooks/useMarketing.ts":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\nexport function useMarketing() {\n  const [location] = useLocation();\n  // DataLayer ni initialize qilish\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      window.dataLayer = window.dataLayer || [];\n    }\n  }, []);\n\n  // GTM orqali event yuborish\n  const pushToDataLayer = (eventData: Record<string, any>) => {\n    if (typeof window !== 'undefined' && window.dataLayer) {\n      window.dataLayer.push(eventData);\n    }\n  };\n\n  // Facebook Pixel orqali event yuborish\n  const trackFacebookEvent = (eventName: string, parameters?: Record<string, any>) => {\n    if (typeof window !== 'undefined' && window.fbq) {\n      window.fbq('track', eventName, parameters);\n    }\n  };\n\n  // Google Ads Conversion tracking\n  const trackConversion = (conversionId: string, conversionLabel: string, value?: number) => {\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'conversion', {\n        'send_to': `${conversionId}/${conversionLabel}`,\n        'value': value,\n        'currency': 'UZS'\n      });\n    }\n  };\n\n  // Enhanced E-commerce tracking (GTM/GA4)\n  const trackPageView = (pagePath: string, pageTitle?: string) => {\n    pushToDataLayer({\n      event: 'page_view',\n      page_path: pagePath,\n      page_title: pageTitle || document.title,\n      page_location: window.location.href\n    });\n\n    // Facebook pixel page view\n    trackFacebookEvent('PageView');\n  };\n\n  const trackProductView = (productId: string, productName: string, category: string, price: number) => {\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'view_item',\n      currency: 'UZS',\n      value: price,\n      items: [{\n        item_id: productId,\n        item_name: productName,\n        category: category,\n        price: price,\n        quantity: 1\n      }]\n    });\n\n    // Facebook Pixel\n    trackFacebookEvent('ViewContent', {\n      content_ids: [productId],\n      content_name: productName,\n      content_category: category,\n      content_type: 'product',\n      value: price,\n      currency: 'UZS'\n    });\n  };\n\n  const trackAddToCart = (productId: string, productName: string, category: string, price: number, quantity: number = 1) => {\n    const value = price * quantity;\n\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'add_to_cart',\n      currency: 'UZS',\n      value: value,\n      items: [{\n        item_id: productId,\n        item_name: productName,\n        category: category,\n        price: price,\n        quantity: quantity\n      }]\n    });\n\n    // Facebook Pixel\n    trackFacebookEvent('AddToCart', {\n      content_ids: [productId],\n      content_name: productName,\n      content_category: category,\n      content_type: 'product',\n      value: value,\n      currency: 'UZS'\n    });\n  };\n\n  const trackRemoveFromCart = (productId: string, productName: string, price: number, quantity: number = 1) => {\n    const value = price * quantity;\n\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'remove_from_cart',\n      currency: 'UZS',\n      value: value,\n      items: [{\n        item_id: productId,\n        item_name: productName,\n        price: price,\n        quantity: quantity\n      }]\n    });\n  };\n\n  const trackBeginCheckout = (cartValue: number, items: any[]) => {\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'begin_checkout',\n      currency: 'UZS',\n      value: cartValue,\n      items: items\n    });\n\n    // Facebook Pixel\n    trackFacebookEvent('InitiateCheckout', {\n      value: cartValue,\n      currency: 'UZS',\n      num_items: items.length,\n      content_ids: items.map(item => item.item_id)\n    });\n  };\n\n  const trackPurchase = (orderId: string, orderValue: number, items: any[], customerData?: any) => {\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'purchase',\n      transaction_id: orderId,\n      currency: 'UZS',\n      value: orderValue,\n      items: items,\n      customer_data: customerData\n    });\n\n    // Facebook Pixel\n    trackFacebookEvent('Purchase', {\n      value: orderValue,\n      currency: 'UZS',\n      content_ids: items.map(item => item.item_id),\n      content_type: 'product',\n      num_items: items.length\n    });\n\n    // Google Ads Conversion (bu yerda real conversion ID va label kerak)\n    trackConversion('AW-CONVERSION_ID', 'PURCHASE_LABEL', orderValue);\n  };\n\n  const trackSearch = (searchTerm: string, resultsCount: number) => {\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'search',\n      search_term: searchTerm,\n      results_count: resultsCount\n    });\n\n    // Facebook Pixel\n    trackFacebookEvent('Search', {\n      search_string: searchTerm\n    });\n  };\n\n  const trackSignUp = (method: string = 'email') => {\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'sign_up',\n      method: method\n    });\n\n    // Facebook Pixel\n    trackFacebookEvent('CompleteRegistration', {\n      status: 'completed'\n    });\n  };\n\n  const trackLogin = (method: string = 'email') => {\n    // Google Analytics 4 / GTM\n    pushToDataLayer({\n      event: 'login',\n      method: method\n    });\n  };\n\n  // Ad click tracking (reklama bosishlarini kuzatish)\n  const trackAdClick = (source: string, medium: string, campaign: string) => {\n    pushToDataLayer({\n      event: 'ad_click',\n      traffic_source: source,\n      traffic_medium: medium,\n      campaign_name: campaign,\n      click_timestamp: new Date().toISOString()\n    });\n  };\n\n  // Landing page tracking (reklama sahifalariga tushish)\n  const trackLandingPage = (source: string, medium: string, campaign: string) => {\n    pushToDataLayer({\n      event: 'landing_page_view',\n      traffic_source: source,\n      traffic_medium: medium,\n      campaign_name: campaign,\n      landing_page: location\n    });\n  };\n\n  return {\n    pushToDataLayer,\n    trackPageView,\n    trackProductView,\n    trackAddToCart,\n    trackRemoveFromCart,\n    trackBeginCheckout,\n    trackPurchase,\n    trackSearch,\n    trackSignUp,\n    trackLogin,\n    trackAdClick,\n    trackLandingPage,\n    trackConversion,\n    trackFacebookEvent\n  };\n}","size_bytes":6120},"client/src/hooks/useProductBySlug.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Product } from \"./useProducts\";\n\nexport function useProductBySlug(slug: string) {\n  return useQuery({\n    queryKey: [\"/api/products\", slug],\n    queryFn: async (): Promise<Product> => {\n      const response = await fetch(`/api/products/${slug}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\"Mahsulot topilmadi\");\n        }\n        throw new Error(\"Mahsulot ma'lumotlarini yuklashda xatolik\");\n      }\n      return response.json();\n    },\n    enabled: !!slug, // Only run query if slug exists\n  });\n}","size_bytes":606},"client/src/hooks/useProducts.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport interface Product {\n  id: string;\n  nameUz: string;\n  nameRu: string;\n  descriptionUz?: string | null;\n  descriptionRu?: string | null;\n  categoryId: string;\n  sellerId: string;\n  price: string;\n  wholesalePrice: string;\n  minQuantity: number;\n  stockQuantity: number;\n  unit: string;\n  images: string[] | null;\n  slug: string;\n  isActive: boolean;\n  isFeatured: boolean;\n  createdAt: Date | null;\n}\n\nexport function useProducts(categoryId?: string, search?: string) {\n  return useQuery({\n    queryKey: [\"/api/products\", categoryId, search],\n    queryFn: async (): Promise<Product[]> => {\n      const params = new URLSearchParams();\n      if (categoryId && categoryId !== 'all') params.set('categoryId', categoryId);\n      if (search) params.set('search', search);\n      \n      const response = await fetch(`/api/products?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch products\");\n      }\n      return response.json();\n    },\n    staleTime: 0, // Always fetch fresh data\n    refetchOnWindowFocus: true, // Refetch when window gets focus\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n}","size_bytes":1202},"client/src/hooks/usePushNotification.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface PushNotificationState {\n  isSupported: boolean;\n  permission: NotificationPermission;\n  isSubscribed: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function usePushNotification() {\n  const { toast } = useToast();\n  const [state, setState] = useState<PushNotificationState>({\n    isSupported: false,\n    permission: 'default',\n    isSubscribed: false,\n    isLoading: false,\n    error: null,\n  });\n\n  // Brauzer support va permission holatini tekshirish\n  useEffect(() => {\n    const checkSupport = () => {\n      const isSupported = 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;\n      const permission = isSupported ? Notification.permission : 'denied';\n      \n      setState(prev => ({\n        ...prev,\n        isSupported,\n        permission,\n      }));\n\n      if (isSupported) {\n        checkSubscriptionStatus();\n      }\n    };\n\n    checkSupport();\n  }, []);\n\n  // Joriy obuna holatini tekshirish\n  const checkSubscriptionStatus = useCallback(async () => {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n      \n      setState(prev => ({\n        ...prev,\n        isSubscribed: !!subscription,\n      }));\n    } catch (error) {\n      console.error('Subscription holatini tekshirishda xatolik:', error);\n    }\n  }, []);\n\n  // Service Worker'ni ro'yxatdan o'tkazish\n  const registerServiceWorker = useCallback(async () => {\n    try {\n      const registration = await navigator.serviceWorker.register('/service-worker.js', {\n        scope: '/'\n      });\n      \n      console.log('Service Worker ro\\'yxatdan o\\'tkazildi:', registration);\n      return registration;\n    } catch (error) {\n      console.error('Service Worker ro\\'yxatdan o\\'tkazishda xatolik:', error);\n      throw error;\n    }\n  }, []);\n\n  // VAPID public key olish\n  const getVapidPublicKey = useCallback(async (): Promise<string> => {\n    try {\n      const response = await fetch('/api/push/vapid-public-key');\n      if (!response.ok) {\n        throw new Error('VAPID public key olishda xatolik');\n      }\n      \n      const data = await response.json();\n      return data.publicKey;\n    } catch (error) {\n      console.error('VAPID public key olishda xatolik:', error);\n      throw error;\n    }\n  }, []);\n\n  // Push notification'ga obuna bo'lish\n  const subscribe = useCallback(async () => {\n    if (!state.isSupported) {\n      throw new Error('Push notification bu brauzerda qo\\'llab-quvvatlanmaydi');\n    }\n\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    try {\n      // Ruxsat so'rash\n      const permission = await Notification.requestPermission();\n      setState(prev => ({ ...prev, permission }));\n\n      if (permission !== 'granted') {\n        throw new Error('Push notification uchun ruxsat berilmadi');\n      }\n\n      // Service Worker'ni ro'yxatdan o'tkazish\n      const registration = await registerServiceWorker();\n\n      // VAPID public key olish\n      const vapidPublicKey = await getVapidPublicKey();\n\n      // Base64 string'ni Uint8Array'ga konvert qilish\n      const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n\n      // Push Manager'dan obuna olish\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: convertedVapidKey,\n      });\n\n      // Obunani serverga yuborish\n      const response = await fetch('/api/push/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscription: subscription.toJSON(),\n          userAgent: navigator.userAgent,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Obunani serverga saqlashda xatolik');\n      }\n\n      setState(prev => ({\n        ...prev,\n        isSubscribed: true,\n        isLoading: false,\n      }));\n\n      toast({\n        title: 'Muvaffaqiyat!',\n        description: 'Push notification\\'larga muvaffaqiyatli obuna bo\\'ldingiz',\n      });\n\n    } catch (error: any) {\n      console.error('Push notification obunasida xatolik:', error);\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isLoading: false,\n      }));\n\n      toast({\n        title: 'Xatolik',\n        description: error.message || 'Push notification obunasida xatolik yuz berdi',\n        variant: 'destructive',\n      });\n    }\n  }, [state.isSupported, getVapidPublicKey, registerServiceWorker, toast]);\n\n  // Obunadan chiqish\n  const unsubscribe = useCallback(async () => {\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n\n      if (subscription) {\n        // Brauzerdan obunani o'chirish\n        await subscription.unsubscribe();\n\n        // Serverdan ham o'chirish\n        await fetch('/api/push/unsubscribe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            endpoint: subscription.endpoint,\n          }),\n        });\n      }\n\n      setState(prev => ({\n        ...prev,\n        isSubscribed: false,\n        isLoading: false,\n      }));\n\n      toast({\n        title: 'Obuna o\\'chirildi',\n        description: 'Push notification obunangiz o\\'chirildi',\n      });\n\n    } catch (error: any) {\n      console.error('Push notification obunasini o\\'chirishda xatolik:', error);\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        isLoading: false,\n      }));\n\n      toast({\n        title: 'Xatolik',\n        description: 'Obunani o\\'chirishda xatolik yuz berdi',\n        variant: 'destructive',\n      });\n    }\n  }, [toast]);\n\n  return {\n    ...state,\n    subscribe,\n    unsubscribe,\n    checkSubscriptionStatus,\n  };\n}\n\n// Base64 URL'ni Uint8Array'ga konvert qilish helper funksiyasi\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","size_bytes":6571},"client/src/hooks/useRelatedProducts.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Product } from '@shared/schema';\n\nexport function useRelatedProducts(productId: string) {\n  return useQuery<Product[]>({\n    queryKey: ['related-products', productId],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${productId}/related`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch related products');\n      }\n      return response.json();\n    },\n    enabled: !!productId, // Only run if productId is provided\n  });\n}","size_bytes":530},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/translations.ts":{"content":"export type Language = 'uz' | 'ru';\n\nexport const translations = {\n  uz: {\n    // Header\n    home: 'Bosh sahifa',\n    categories: 'Kategoriyalar',\n    products: 'Mahsulotlar',\n    contact: 'Aloqa',\n    login: 'Kirish',\n    \n    // Hero\n    heroTitle: \"O'zbekiston uchun Optom Bozor Platformasi\",\n    heroDescription: \"Polietilen paketlar, bir martalik idishlar, elektronika, kiyim-kechak va minglab boshqa mahsulotlarni optom narxlarda xarid qiling.\",\n    viewProducts: \"Mahsulotlarni ko'rish\",\n    becomeSeller: \"Sotuvchi bo'lish\",\n    \n    // Stats\n    productsCount: \"Mahsulotlar\",\n    sellers: \"Sotuvchilar\",\n    customers: \"Mamnun mijozlar\",\n    support: \"Qo'llab-quvvatlash\",\n    \n    // Categories\n    mainCategories: \"Asosiy Kategoriyalar\",\n    categoriesDescription: \"Bizning keng mahsulot turkumlarimizdan o'zingizga kerakli mahsulotlarni toping\",\n    viewMore: \"Ko'rish ‚Üí\",\n    \n    // Products\n    featuredProducts: \"Mashhur Mahsulotlar\",\n    featuredDescription: \"Eng ko'p sotilayotgan optom mahsulotlar\",\n    viewAll: \"Barchasini ko'rish\",\n    addToCart: \"Savatga qo'shish\",\n    inStock: \"Sotuvda bor\",\n    lowStock: \"Kam qoldi\", \n    outOfStock: \"Tugadi\",\n    piece: \"dona\",\n    \n    // Why Choose Us\n    whyChooseUs: \"Nega Aynan Bizni Tanlash Kerak?\",\n    whyDescription: \"Bizning afzalliklarimiz va xizmatlarimiz sizning biznesingizni rivojlantirishga yordam beradi\",\n    \n    // Contact CTA\n    businessPartner: \"Biznes Hamkoringiz Bo'lishga Tayyormisiz?\",\n    ctaDescription: \"Bugundan boshlab optom narxlarda xarid qiling va biznesingizni rivojlantiring. Bepul ro'yxatdan o'ting va maxsus takliflardan foydalaning.\",\n    registerNow: \"Hoziroq Ro'yxatdan O'tish\",\n    contactUs: \"Aloqa Qilish\",\n    \n    // Footer\n    quickLinks: \"Tezkor Havolalar\",\n    aboutUs: \"Biz Haqimizda\",\n    becomeSellerFooter: \"Sotuvchi Bo'lish\",\n    help: \"Yordam\",\n    contactInfo: \"Aloqa Ma'lumotlari\",\n    address: \"Toshkent shahri, Uchtepa tumani, O'rikzor bozori\",\n    copyright: \"¬© 2024 Optombazar.uz. Barcha huquqlar himoyalangan.\",\n    privacyPolicy: \"Maxfiylik Siyosati\",\n    termsOfUse: \"Foydalanish Shartlari\",\n    cookiePolicy: \"Cookie Policy\",\n    \n    // Search & Filters\n    search: \"Qidirish\",\n    searchPlaceholder: \"Mahsulot qidirish...\",\n    filter: \"Filtrlash\",\n    sortBy: \"Saralash\",\n    priceRange: \"Narx oralig'i\",\n    \n    // Product Details\n    description: \"Ta'rif\",\n    specifications: \"Xususiyatlari\",\n    minQuantity: \"Minimal miqdor\",\n    unit: \"Birlik\",\n    wholesalePrice: \"Optom narx\",\n    retailPrice: \"Chakana narx\",\n    \n    // Order\n    orderNow: \"Buyurtma berish\",\n    quantity: \"Miqdor\",\n    total: \"Jami\",\n    customerInfo: \"Mijoz ma'lumotlari\",\n    name: \"Ism\",\n    phone: \"Telefon\",\n    email: \"Email\",\n    shippingAddress: \"Yetkazib berish manzili\",\n    notes: \"Qo'shimcha ma'lumot\",\n    submitOrder: \"Buyurtma berish\",\n    \n    // Currency\n    currency: \"so'm\",\n    \n  },\n  ru: {\n    // Header\n    home: '–ì–ª–∞–≤–Ω–∞—è',\n    categories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',\n    products: '–¢–æ–≤–∞—Ä—ã',\n    contact: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',\n    login: '–í–æ–π—Ç–∏',\n    \n    // Hero\n    heroTitle: \"–û–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞\",\n    heroDescription: \"–ü–æ–∫—É–ø–∞–π—Ç–µ –ø–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –ø–æ—Å—É–¥—É, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É, –æ–¥–µ–∂–¥—É –∏ —Ç—ã—Å—è—á–∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–ø—Ç–æ–≤—ã–º —Ü–µ–Ω–∞–º.\",\n    viewProducts: \"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\",\n    becomeSeller: \"–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º\",\n    \n    // Stats\n    productsCount: \"–¢–æ–≤–∞—Ä—ã\",\n    sellers: \"–ü—Ä–æ–¥–∞–≤—Ü—ã\",\n    customers: \"–î–æ–≤–æ–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã\",\n    support: \"–ü–æ–¥–¥–µ—Ä–∂–∫–∞\",\n    \n    // Categories\n    mainCategories: \"–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\", \n    categoriesDescription: \"–ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞—à–µ–≥–æ —à–∏—Ä–æ–∫–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞\",\n    viewMore: \"–°–º–æ—Ç—Ä–µ—Ç—å ‚Üí\",\n    \n    // Products\n    featuredProducts: \"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\",\n    featuredDescription: \"–°–∞–º—ã–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ –æ–ø—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\",\n    viewAll: \"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ\",\n    addToCart: \"–í –∫–æ—Ä–∑–∏–Ω—É\",\n    inStock: \"–í –ø—Ä–æ–¥–∞–∂–µ\",\n    lowStock: \"–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è\",\n    outOfStock: \"–ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å\",\n    piece: \"—à—Ç\",\n    \n    // Why Choose Us\n    whyChooseUs: \"–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –Ω–∞—Å –≤—ã–±—Ä–∞—Ç—å?\",\n    whyDescription: \"–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ —É—Å–ª—É–≥–∏ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–≤–∏—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å\",\n    \n    // Contact CTA\n    businessPartner: \"–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –±–∏–∑–Ω–µ—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?\",\n    ctaDescription: \"–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ –æ–ø—Ç–æ–≤—ã–º —Ü–µ–Ω–∞–º —Å–µ–≥–æ–¥–Ω—è –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\",\n    registerNow: \"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å\",\n    contactUs: \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\",\n    \n    // Footer\n    quickLinks: \"–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏\",\n    aboutUs: \"–û –Ω–∞—Å\",\n    becomeSellerFooter: \"–°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º\",\n    help: \"–ü–æ–º–æ—â—å\",\n    contactInfo: \"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\",\n    address: \"–≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç, –£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, —Ä—ã–Ω–æ–∫ –£—Ä–∏–∫–∑–æ—Ä\",\n    copyright: \"¬© 2024 Optombazar.uz. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\n    privacyPolicy: \"–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\",\n    termsOfUse: \"–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\",\n    cookiePolicy: \"–ü–æ–ª–∏—Ç–∏–∫–∞ Cookie\",\n    \n    // Search & Filters\n    search: \"–ü–æ–∏—Å–∫\",\n    searchPlaceholder: \"–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...\",\n    filter: \"–§–∏–ª—å—Ç—Ä\",\n    sortBy: \"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞\",\n    priceRange: \"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω\",\n    \n    // Product Details\n    description: \"–û–ø–∏—Å–∞–Ω–∏–µ\",\n    specifications: \"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\",\n    minQuantity: \"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\",\n    unit: \"–ï–¥–∏–Ω–∏—Ü–∞\",\n    wholesalePrice: \"–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞\",\n    retailPrice: \"–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞\",\n    \n    // Order\n    orderNow: \"–ó–∞–∫–∞–∑–∞—Ç—å\",\n    quantity: \"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\",\n    total: \"–ò—Ç–æ–≥–æ\",\n    customerInfo: \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ\",\n    name: \"–ò–º—è\",\n    phone: \"–¢–µ–ª–µ—Ñ–æ–Ω\",\n    email: \"Email\",\n    shippingAddress: \"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\",\n    notes: \"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\",\n    submitOrder: \"–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\",\n    \n    // Currency\n    currency: \"—Å—É–º\",\n    \n  }\n};\n\nexport function getTranslation(lang: Language, key: string): string {\n  const keys = key.split('.');\n  let value: any = translations[lang];\n  \n  for (const k of keys) {\n    value = value?.[k];\n  }\n  \n  return value || key;\n}\n","size_bytes":6917},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AllCategoriesPage.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { SEOHead } from '@/components/SEOHead';\nimport { Footer } from '@/components/footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Folder, Package, Utensils, Smartphone, Shirt, Box } from 'lucide-react';\nimport { Category } from '@shared/schema';\n\n// Icon mapping for categories\nconst getIconComponent = (iconName: string | null) => {\n  const iconMap: Record<string, React.ComponentType<{ className?: string }>> = {\n    Package,\n    Shirt,\n    Utensils,\n    Smartphone,\n    Box,\n    Folder,\n  };\n  \n  return iconMap[iconName || 'Package'] || Package;\n};\n\nexport default function AllCategoriesPage() {\n  const { language } = useLanguage();\n\n  // Fetch all categories\n  const { data: categories = [], isLoading, error } = useQuery<Category[]>({\n    queryKey: ['categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      return response.json();\n    },\n  });\n\n  // Group categories by parent\n  const mainCategories = categories.filter(cat => !cat.parentId);\n  const subcategoriesByParent = categories\n    .filter(cat => cat.parentId)\n    .reduce((acc, cat) => {\n      if (!acc[cat.parentId!]) {\n        acc[cat.parentId!] = [];\n      }\n      acc[cat.parentId!].push(cat);\n      return acc;\n    }, {} as Record<string, Category[]>);\n\n  const pageTitle = language === 'uz' \n    ? 'Barcha Kategoriyalar - Optombazar.uz' \n    : '–í—Å–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - Optombazar.uz';\n  \n  const pageDescription = language === 'uz'\n    ? 'Optombazar.uz da barcha mahsulot kategoriyalarini ko\\'ring. Plastik paketlar, bir martalik idishlar, maishiy kimyo va boshqa ko\\'plab kategoriyalar.'\n    : '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Optombazar.uz. –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞, –±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.';\n\n  const seoMetaTags = {\n    title: pageTitle,\n    description: pageDescription,\n    keywords: language === 'uz' \n      ? ['kategoriyalar', 'mahsulotlar', 'optom', 'plastik paketlar', 'idishlar', 'maishiy kimyo']\n      : ['–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '—Ç–æ–≤–∞—Ä—ã', '–æ–ø—Ç–æ–º', '–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã', '–ø–æ—Å—É–¥–∞', '–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è'],\n    canonicalUrl: 'https://optombazar.uz/categories',\n    ogTitle: pageTitle,\n    ogDescription: pageDescription,\n    ogImage: 'https://optombazar.uz/logo.png',\n    ogUrl: 'https://optombazar.uz/categories',\n    twitterCard: 'summary_large_image' as const,\n    twitterTitle: pageTitle,\n    twitterDescription: pageDescription,\n    twitterImage: 'https://optombazar.uz/logo.png',\n    structuredData: {\n      '@context': 'https://schema.org',\n      '@type': 'CollectionPage',\n      name: pageTitle,\n      description: pageDescription,\n      url: 'https://optombazar.uz/categories'\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background dark:bg-black\">\n        <SEOHead seo={seoMetaTags} />\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-8\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-48 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background dark:bg-black\">\n        <SEOHead seo={seoMetaTags} />\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\" data-testid=\"text-error-title\">\n              {language === 'uz' ? 'Kategoriyalarni yuklashda xatolik' : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'}\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-error-message\">\n              {language === 'uz' \n                ? 'Kategoriyalarni yuklashda muammo yuz berdi. Sahifani qaytadan yuklang.'\n                : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.'}\n            </p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-black\">\n      <SEOHead seo={seoMetaTags} />\n      \n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Page Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"text-page-title\">\n            {language === 'uz' ? 'Barcha Kategoriyalar' : '–í—Å–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n          </h1>\n          <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\" data-testid=\"text-page-description\">\n            {language === 'uz' \n              ? 'Bizning keng qamrovli mahsulot kategoriyalarimiz bilan tanishib chiqing'\n              : '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º —à–∏—Ä–æ–∫–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤'}\n          </p>\n        </div>\n\n        {/* Categories Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {mainCategories.map((mainCategory) => {\n            const IconComponent = getIconComponent(mainCategory.icon);\n            const subcategories = subcategoriesByParent[mainCategory.id] || [];\n            \n            return (\n              <Card \n                key={mainCategory.id} \n                className=\"h-full hover:shadow-lg transition-shadow duration-200 border-2 hover:border-blue-200 dark:hover:border-blue-800\"\n                data-testid={`card-category-${mainCategory.id}`}\n              >\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center gap-3 text-lg\">\n                    <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                      <IconComponent className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <Link \n                        href={`/catalog?category=${mainCategory.slug}`}\n                        className=\"hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\n                        data-testid={`link-main-category-${mainCategory.id}`}\n                      >\n                        {language === 'uz' ? mainCategory.nameUz : mainCategory.nameRu}\n                      </Link>\n                      <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                        {subcategories.length} {language === 'uz' ? 'kategoriya' : '–∫–∞—Ç–µ–≥–æ—Ä–∏–π'}\n                      </Badge>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                \n                <CardContent>\n                  {subcategories.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">\n                        {language === 'uz' ? 'Ichki kategoriyalar:' : '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'}\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {subcategories.map((subcategory) => (\n                          <Link\n                            key={subcategory.id}\n                            href={`/catalog?category=${subcategory.slug}`}\n                            className=\"inline-block\"\n                            data-testid={`link-subcategory-${subcategory.id}`}\n                          >\n                            <Badge \n                              variant=\"outline\" \n                              className=\"hover:bg-blue-50 dark:hover:bg-blue-950 hover:border-blue-300 dark:hover:border-blue-700 transition-colors cursor-pointer text-xs py-1 px-2\"\n                            >\n                              {language === 'uz' ? subcategory.nameUz : subcategory.nameRu}\n                            </Badge>\n                          </Link>\n                        ))}\n                      </div>\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground italic\">\n                      {language === 'uz' \n                        ? 'Ichki kategoriyalar mavjud emas'\n                        : '–ù–µ—Ç –ø–æ–¥–∫ategories'}\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Stats Section */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-blue-50 dark:bg-blue-950/50 rounded-lg p-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-main-categories-count\">\n                  {mainCategories.length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === 'uz' ? 'Asosiy kategoriya' : '–û—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-total-categories-count\">\n                  {categories.length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === 'uz' ? 'Jami kategoriya' : '–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {language === 'uz' ? '2000+' : '2000+'}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {language === 'uz' ? 'Mahsulot' : '–¢–æ–≤–∞—Ä–æ–≤'}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":10510},"client/src/pages/BlogPage.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { Footer } from '../components/footer';\nimport { Header } from '../components/header';\nimport { SEOHead } from '../components/SEOHead';\nimport { generateBlogMetaTags } from '@shared/seo';\nimport { Link } from 'wouter';\nimport { Calendar, User, ArrowRight, Bot } from 'lucide-react';\nimport { BlogPost } from '@shared/schema';\n\nexport default function BlogPage() {\n  // Fetch blog posts\n  const { data: posts = [], isLoading } = useQuery<BlogPost[]>({\n    queryKey: ['blog-posts'],\n    queryFn: async () => {\n      const response = await fetch('/api/blog/posts');\n      if (!response.ok) {\n        throw new Error('Blog postlarini yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Blog sahifasi uchun SEO meta-teglar\n  const blogSEO = generateBlogMetaTags();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n      <SEOHead seo={blogSEO} />\n      \n      <div className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              OptomBazar Blog\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Optom savdo sohasidagi yangiliklar, maslahatlar va eng so'nggi trendlar haqida bilib oling\n            </p>\n          </div>\n\n          {/* Blog Posts Grid */}\n          {isLoading ? (\n            <div className=\"text-center py-16\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-4 text-gray-500\">Blog postlari yuklanmoqda...</p>\n            </div>\n          ) : posts.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"text-gray-400 mb-4\">\n                <Calendar className=\"h-16 w-16 mx-auto\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                Hozircha blog postlari yo'q\n              </h3>\n              <p className=\"text-gray-500\">\n                Tez orada qiziqarli maqolalar bilan qaytamiz!\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {posts.map((post) => (\n                <Link key={post.id} href={`/blog/${post.slug}`}>\n                  <Card className=\"h-full hover:shadow-xl transition-shadow duration-300 group cursor-pointer overflow-hidden\">\n                    {post.imageUrl && (\n                      <div className=\"relative overflow-hidden\">\n                        <img \n                          src={post.imageUrl} \n                          alt={post.title}\n                          className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n                        />\n                        <div className=\"absolute inset-0 bg-black/20 group-hover:bg-black/10 transition-colors duration-300\"></div>\n                      </div>\n                    )}\n                    <CardHeader>\n                      <div className=\"flex items-center gap-2 text-sm text-gray-500 mb-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{new Date(post.createdAt!).toLocaleDateString('uz-UZ')}</span>\n                        <div className=\"flex items-center gap-2 ml-auto\">\n                          {post.isAutoGenerated && (\n                            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                              <Bot className=\"h-3 w-3\" />\n                              AI\n                            </Badge>\n                          )}\n                          {post.isPublished && (\n                            <Badge variant=\"default\">\n                              Chop etilgan\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      <CardTitle className=\"group-hover:text-blue-600 transition-colors duration-300\">\n                        {post.title}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 line-clamp-3 mb-4\">\n                        {post.excerpt || post.content.substring(0, 150) + '...'}\n                      </p>\n                      \n                      {/* Tags */}\n                      {post.tags && post.tags.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mb-4\">\n                          {post.tags.slice(0, 3).map((tag, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {post.tags.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{post.tags.length - 3}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                          {post.isAutoGenerated ? (\n                            <>\n                              <Bot className=\"h-4 w-4\" />\n                              <span>AI Assistant</span>\n                            </>\n                          ) : (\n                            <>\n                              <User className=\"h-4 w-4\" />\n                              <span>OptomBazar</span>\n                            </>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-1 text-blue-600 font-medium group-hover:gap-2 transition-all duration-300\">\n                          <span>Batafsil</span>\n                          <ArrowRight className=\"h-4 w-4\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6567},"client/src/pages/BlogPostPage.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Footer } from '../components/footer';\nimport { Header } from '../components/header';\nimport { SEOHead } from '../components/SEOHead';\nimport { generateBlogPostMetaTags } from '@shared/seo';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { ArrowLeft, Calendar, User, Share2 } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { BlogPost } from '@shared/schema';\n\nexport default function BlogPostPage() {\n  const [, params] = useRoute('/blog/:slug');\n  const slug = params?.slug;\n\n  // Fetch blog post by slug\n  const { data: post, isLoading, error } = useQuery<BlogPost>({\n    queryKey: ['blog-post', slug],\n    queryFn: async () => {\n      if (!slug) throw new Error('Slug topilmadi');\n      const response = await fetch(`/api/blog/posts/${slug}`);\n      if (!response.ok) {\n        throw new Error('Blog post topilmadi');\n      }\n      return response.json();\n    },\n    enabled: !!slug,\n  });\n\n  // SEO meta-teglarni generate qilish\n  const blogPostSEO = post ? generateBlogPostMetaTags(post) : null;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n        \n        <div className=\"py-12\">\n          <div className=\"max-w-4xl mx-auto px-4\">\n            <div className=\"text-center py-16\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-4 text-gray-500\">Blog post yuklanmoqda...</p>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n        \n        <div className=\"py-12\">\n          <div className=\"max-w-4xl mx-auto px-4\">\n            <div className=\"text-center py-16\">\n              <div className=\"text-gray-400 mb-4\">\n                <Calendar className=\"h-16 w-16 mx-auto\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                Blog post topilmadi\n              </h3>\n              <p className=\"text-gray-500 mb-8\">\n                Siz qidirayotgan maqola mavjud emas yoki o'chirilgan bo'lishi mumkin.\n              </p>\n              <Link href=\"/blog\">\n                <Button>\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Blog'ga qaytish\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: post.title,\n        text: post.content.substring(0, 150) + '...',\n        url: window.location.href,\n      });\n    } else {\n      // Fallback: copy to clipboard\n      navigator.clipboard.writeText(window.location.href);\n      alert('Link nusxalandi!');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n      {blogPostSEO && <SEOHead seo={blogPostSEO} />}\n      \n      <div className=\"py-8\">\n        <div className=\"max-w-4xl mx-auto px-4\">\n          {/* Back Button */}\n          <div className=\"mb-8\">\n            <Link href=\"/blog\">\n              <Button variant=\"ghost\" className=\"mb-4\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Blog'ga qaytish\n              </Button>\n            </Link>\n          </div>\n\n          {/* Article Header */}\n          <article className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n            {post.imageUrl && (\n              <div className=\"relative\">\n                <img \n                  src={post.imageUrl} \n                  alt={post.title}\n                  className=\"w-full h-64 md:h-80 object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-black/20\"></div>\n              </div>\n            )}\n            \n            <div className=\"p-8\">\n              {/* Meta Information */}\n              <div className=\"flex flex-wrap items-center gap-4 mb-6 text-sm text-gray-600\">\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{new Date(post.createdAt!).toLocaleDateString('uz-UZ')}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  <span>OptomBazar</span>\n                </div>\n                {post.isPublished && (\n                  <Badge variant=\"default\">\n                    Chop etilgan\n                  </Badge>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleShare}\n                  className=\"ml-auto\"\n                >\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Ulashish\n                </Button>\n              </div>\n\n              {/* Article Title */}\n              <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-6\">\n                {post.title}\n              </h1>\n\n              {/* Article Content */}\n              <div className=\"prose prose-lg max-w-none\">\n                {post.content.split('\\n\\n').map((paragraph, index) => (\n                  <p key={index} className=\"mb-4 text-gray-700 leading-relaxed\">\n                    {paragraph}\n                  </p>\n                ))}\n              </div>\n\n              {/* Article Footer */}\n              <div className=\"mt-12 pt-8 border-t border-gray-200\">\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n                  <div className=\"text-sm text-gray-500\">\n                    So'nggi yangilanish: {new Date(post.updatedAt!).toLocaleDateString('uz-UZ')}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" onClick={handleShare}>\n                      <Share2 className=\"h-4 w-4 mr-2\" />\n                      Ulashish\n                    </Button>\n                    <Link href=\"/blog\">\n                      <Button>\n                        Boshqa maqolalar\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </article>\n\n          {/* Related Posts Section */}\n          <div className=\"mt-12\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Boshqa maqolalar</h2>\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500 mb-4\">Ko'proq qiziqarli maqolalar uchun</p>\n              <Link href=\"/blog\">\n                <Button variant=\"outline\">\n                  Barcha maqolalarni ko'rish\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7067},"client/src/pages/CartPage.tsx":{"content":"import { Link } from 'wouter';\nimport { useCart } from '@/context/CartContext';\nimport { useLanguage } from '@/components/language-provider';\nimport { Footer } from '@/components/footer';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { ShoppingBag, Minus, Plus, Trash2, ArrowLeft, ArrowRight, AlertTriangle } from 'lucide-react';\n\n// Minimal zakaz miqdori (500,000 so'm)\nconst MINIMUM_ORDER_AMOUNT = 500000;\n\nexport default function CartPage() {\n  const { language } = useLanguage();\n  const { cartItems, isLoading, itemCount, totalAmount, updateQuantity, removeFromCart } = useCart();\n  \n  // Minimal zakaz miqdorini tekshirish\n  const isMinimumOrderMet = totalAmount >= MINIMUM_ORDER_AMOUNT;\n  const remainingAmount = MINIMUM_ORDER_AMOUNT - totalAmount;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background dark:bg-black\">\n\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-card rounded-lg p-6\">\n                <div className=\"flex space-x-4\">\n                  <div className=\"w-20 h-20 bg-muted rounded\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background dark:bg-black\">\n\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <ShoppingBag className=\"mx-auto h-24 w-24 text-muted-foreground mb-6\" />\n            <h1 className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"text-empty-cart-title\">\n              {language === 'uz' ? 'Savat bo\\'sh' : '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'}\n            </h1>\n            <p className=\"text-muted-foreground mb-8\" data-testid=\"text-empty-cart-message\">\n              {language === 'uz' \n                ? 'Savatga mahsulot qo\\'shing va xarid qiling!'\n                : '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É!'\n              }\n            </p>\n            <Link href=\"/catalog\">\n              <Button data-testid=\"button-continue-shopping\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                {language === 'uz' ? 'Xarid qilishni davom ettirish' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏'}\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const handleQuantityDecrease = async (itemId: string, currentQuantity: number) => {\n    if (currentQuantity > 1) {\n      await updateQuantity(itemId, currentQuantity - 1);\n    }\n  };\n\n  const handleQuantityIncrease = async (itemId: string, currentQuantity: number, maxStock: number) => {\n    if (currentQuantity < maxStock) {\n      await updateQuantity(itemId, currentQuantity + 1);\n    }\n  };\n\n  const handleRemoveItem = async (itemId: string) => {\n    await removeFromCart(itemId);\n  };\n\n  const handleQuantityInputChange = async (itemId: string, value: string, maxStock: number) => {\n    const newQuantity = parseInt(value) || 1;\n    if (newQuantity >= 1 && newQuantity <= 999999) {\n      await updateQuantity(itemId, newQuantity);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-black\">\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/catalog\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back-to-catalog\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              {language === 'uz' ? 'Katalogga qaytish' : '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É'}\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-cart-title\">\n            {language === 'uz' ? 'Savat' : '–ö–æ—Ä–∑–∏–Ω–∞'}\n          </h1>\n          <p className=\"text-muted-foreground mt-2\" data-testid=\"text-items-count\">\n            {itemCount} {language === 'uz' ? 'ta mahsulot' : '—Ç–æ–≤–∞—Ä–æ–≤'}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {cartItems.map((item) => (\n              <Card key={item.id} className=\"overflow-hidden\" data-testid={`cart-item-${item.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex space-x-4\">\n                    {/* Product Image */}\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        src={item.product?.images?.[0] || '/placeholder-image.jpg'}\n                        alt={language === 'uz' ? item.product?.nameUz : item.product?.nameRu}\n                        className=\"w-20 h-20 object-cover rounded-lg\"\n                        data-testid={`img-cart-item-${item.id}`}\n                      />\n                    </div>\n\n                    {/* Product Details */}\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"text-lg font-semibold text-foreground mb-1\" data-testid={`text-item-name-${item.id}`}>\n                        <Link href={`/products/${item.product?.slug}`} className=\"hover:text-primary\">\n                          {language === 'uz' ? item.product?.nameUz : item.product?.nameRu}\n                        </Link>\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-item-price-${item.id}`}>\n                        {Number(item.product?.wholesalePrice || 0).toLocaleString()} {language === 'uz' ? 'so\\'m' : '—Å—É–º'} / {item.product?.unit}\n                      </p>\n                      \n                      {/* Quantity Controls */}\n                      <div className=\"flex items-center space-x-3\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleQuantityDecrease(item.id, item.quantity)}\n                          disabled={item.quantity <= 1}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          <Minus className=\"w-4 h-4\" />\n                        </Button>\n                        <Input\n                          type=\"number\"\n                          value={item.quantity}\n                          onChange={(e) => handleQuantityInputChange(item.id, e.target.value, item.product?.stockQuantity || 0)}\n                          min=\"1\"\n                          max=\"999999\"\n                          className=\"w-28 h-10 text-center border border-border bg-background text-foreground\"\n                          data-testid={`input-quantity-${item.id}`}\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleQuantityIncrease(item.id, item.quantity, item.product?.stockQuantity || 0)}\n                          disabled={item.quantity >= 999999}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          <Plus className=\"w-4 h-4\" />\n                        </Button>\n                        <span className=\"text-sm text-muted-foreground\" data-testid={`text-unit-${item.id}`}>\n                          {item.product?.unit}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Price and Actions */}\n                    <div className=\"flex flex-col items-end space-y-2\">\n                      <p className=\"text-lg font-bold text-foreground\" data-testid={`text-total-price-${item.id}`}>\n                        {(Number(item.product?.wholesalePrice || 0) * item.quantity).toLocaleString()} {language === 'uz' ? 'so\\'m' : '—Å—É–º'}\n                      </p>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRemoveItem(item.id)}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        data-testid={`button-remove-${item.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-8\">\n              <CardHeader>\n                <CardTitle data-testid=\"text-order-summary\">\n                  {language === 'uz' ? 'Buyurtma xulosasi' : '–ò—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span data-testid=\"text-subtotal-label\">\n                      {language === 'uz' ? 'Mahsulotlar' : '–¢–æ–≤–∞—Ä—ã'} ({itemCount})\n                    </span>\n                    <span data-testid=\"text-subtotal-amount\">\n                      {totalAmount.toLocaleString()} {language === 'uz' ? 'so\\'m' : '—Å—É–º'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span data-testid=\"text-delivery-label\">\n                      {language === 'uz' ? 'Yetkazib berish' : '–î–æ—Å—Ç–∞–≤–∫–∞'}\n                    </span>\n                    <span className=\"text-green-600\" data-testid=\"text-delivery-amount\">\n                      {language === 'uz' ? 'Bepul' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}\n                    </span>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span data-testid=\"text-total-label\">\n                    {language === 'uz' ? 'Jami' : '–ò—Ç–æ–≥–æ'}\n                  </span>\n                  <span data-testid=\"text-total-amount\">\n                    {totalAmount.toLocaleString()} {language === 'uz' ? 'so\\'m' : '—Å—É–º'}\n                  </span>\n                </div>\n                \n                {/* Minimal zakaz ogohlantirishi */}\n                {!isMinimumOrderMet && (\n                  <Alert className=\"bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800\">\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                    <AlertDescription className=\"text-yellow-700 dark:text-yellow-300\">\n                      {language === 'uz' ? (\n                        <>\n                          <strong>Optom zakaz:</strong> Minimal zakaz miqdori 500,000 so'm. \n                          Yana <strong>{remainingAmount.toLocaleString()} so'm</strong> mahsulot qo'shing.\n                        </>\n                      ) : (\n                        <>\n                          <strong>–û–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑:</strong> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 500,000 —Å—É–º. \n                          –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ <strong>{remainingAmount.toLocaleString()} —Å—É–º</strong>.\n                        </>\n                      )}\n                    </AlertDescription>\n                  </Alert>\n                )}\n                \n                {isMinimumOrderMet ? (\n                  <Link href=\"/checkout\">\n                    <Button size=\"lg\" className=\"w-full bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600 text-white\" data-testid=\"button-checkout\">\n                      {language === 'uz' ? 'Buyurtma berish' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                ) : (\n                  <Button size=\"lg\" className=\"w-full\" disabled data-testid=\"button-checkout-disabled\">\n                    {language === 'uz' ? 'Buyurtma berish' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                )}\n                \n                <Link href=\"/catalog\">\n                  <Button variant=\"outline\" size=\"lg\" className=\"w-full\" data-testid=\"button-continue-shopping\">\n                    {language === 'uz' ? 'Xaridni davom ettirish' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏'}\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13449},"client/src/pages/CheckoutPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation } from '@tanstack/react-query';\nimport { useCart } from '@/context/CartContext';\nimport { useLanguage } from '@/components/language-provider';\nimport { Footer } from '@/components/footer';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft, CheckCircle, Percent, Tag, Truck, CreditCard, QrCode, AlertTriangle } from 'lucide-react';\nimport qrCodeImage from '@assets/QR to\\'lov_1755750030820.jpg';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Minimal zakaz miqdori (500,000 currency)\nconst MINIMUM_ORDER_AMOUNT = 500000;\n\nconst checkoutSchema = z.object({\n  customerName: z.string().min(2, 'Ism kamida 2 ta belgidan iborat bo\\'lishi kerak'),\n  customerPhone: z.string().min(9, 'Telefon raqami noto\\'g\\'ri formatda'),\n  customerEmail: z.string().email('Email manzili noto\\'g\\'ri formatda').optional().or(z.literal('')),\n  shippingAddress: z.string().min(10, 'Manzil kamida 10 ta belgidan iborat bo\\'lishi kerak'),\n  deliveryMethod: z.enum(['olib_ketish', 'kuryer'], {\n    required_error: 'Yetkazib berish usulini tanlang',\n  }),\n  paymentMethod: z.enum(['naqd', 'karta', 'qr_kod'], {\n    required_error: 'To\\'lov usulini tanlang',\n  }),\n  notes: z.string().optional(),\n});\n\ntype CheckoutFormData = z.infer<typeof checkoutSchema>;\n\nexport default function CheckoutPage() {\n  const { language, t } = useLanguage();\n  const { cartItems, totalAmount, clearCart } = useCart();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Minimal zakaz miqdorini tekshirish\n  const isMinimumOrderMet = totalAmount >= MINIMUM_ORDER_AMOUNT;\n  const remainingAmount = MINIMUM_ORDER_AMOUNT - totalAmount;\n  \n  // Agar minimal miqdor bajarilmagan bo'lsa, savatga qaytarish\n  useEffect(() => {\n    if (cartItems.length > 0 && !isMinimumOrderMet) {\n      setTimeout(() => {\n        setLocation('/cart');\n      }, 3000); // 3 soniyadan keyin avtomatik qaytarish\n    }\n  }, [cartItems.length, isMinimumOrderMet, setLocation]);\n  \n  // Discount state\n  const [discountCode, setDiscountCode] = useState('');\n  const [appliedDiscount, setAppliedDiscount] = useState<any>(null);\n  const [isApplyingDiscount, setIsApplyingDiscount] = useState(false);\n  \n  // Calculate final amounts with discount\n  const discountAmount = appliedDiscount ? \n    (appliedDiscount.type === 'percentage' ? \n      (totalAmount * appliedDiscount.value / 100) : \n      appliedDiscount.value) : 0;\n  const finalAmount = Math.max(0, totalAmount - discountAmount);\n\n  const form = useForm<CheckoutFormData>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      customerName: '',\n      customerPhone: '',\n      customerEmail: '',\n      shippingAddress: '',\n      deliveryMethod: 'olib_ketish' as const,\n      paymentMethod: 'naqd' as const,\n      notes: '',\n    },\n  });\n\n  // Create order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: async (formData: CheckoutFormData) => {\n      // Minimal zakaz miqdorini tekshirish\n      if (!isMinimumOrderMet) {\n        throw new Error('MINIMUM_ORDER_NOT_MET');\n      }\n      \n      const orderData = {\n        userId: 'guest-user', // For guest checkout\n        totalAmount: finalAmount.toString(),\n        discountId: appliedDiscount?.id || null,\n        discountAmount: discountAmount.toString(),\n        deliveryMethod: formData.deliveryMethod,\n        paymentMethod: formData.paymentMethod,\n        paymentStatus: 'kutmoqda',\n        customerName: formData.customerName,\n        customerPhone: formData.customerPhone,\n        customerEmail: formData.customerEmail || null,\n        shippingAddress: formData.shippingAddress,\n        notes: formData.notes || null,\n        items: cartItems.map(item => ({\n          productId: item.productId,\n          quantity: item.quantity,\n          unitPrice: item.product?.wholesalePrice || '0',\n          totalPrice: (Number(item.product?.wholesalePrice || 0) * item.quantity).toString(),\n        })),\n      };\n\n      const sessionId = localStorage.getItem('cart-session-id') || 'anonymous';\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-session-id': sessionId,\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create order');\n      }\n\n      return response.json();\n    },\n    onSuccess: (order) => {\n      toast({\n        title: language === 'uz' ? \"Buyurtma muvaffaqiyatli qabul qilindi!\" : \"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\",\n        description: language === 'uz' ? \n          `Buyurtma raqami: ${order.id}. Tez orada siz bilan bog'lanamiz.` :\n          `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order.id}. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,\n        duration: 5000,\n      });\n      \n      // Redirect to success page\n      setLocation('/order-success');\n    },\n    onError: (error) => {\n      if (error.message === 'MINIMUM_ORDER_NOT_MET') {\n        toast({\n          title: language === 'uz' ? \"Minimal zakaz miqdori bajarilmadi\" : \"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\",\n          description: language === 'uz' ? \n            `Minimal zakaz miqdori 500,000 ${t('currency')}. Yana ${remainingAmount.toLocaleString()} ${t('currency')} mahsulot qo'shing.` :\n            `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 500,000 ${t('currency')}. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${remainingAmount.toLocaleString()} ${t('currency')}.`,\n          variant: \"destructive\",\n          duration: 5000,\n        });\n        setLocation('/cart');\n      } else {\n        toast({\n          title: language === 'uz' ? \"Xatolik yuz berdi\" : \"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\",\n          description: language === 'uz' ? \n            \"Buyurtmani yuborishda xatolik yuz berdi. Qaytadan urinib ko'ring.\" :\n            \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\",\n          variant: \"destructive\",\n          duration: 5000,\n        });\n      }\n    },\n  });\n\n  // Apply discount code\n  const applyDiscount = async () => {\n    if (!discountCode.trim()) {\n      toast({\n        title: language === 'uz' ? \"Xatolik\" : \"–û—à–∏–±–∫–∞\", \n        description: language === 'uz' ? \"Chegirma kodini kiriting\" : \"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–∫–∏–¥–∫–∏\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsApplyingDiscount(true);\n    try {\n      const response = await fetch('/api/discounts/apply', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ code: discountCode.trim().toUpperCase() }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Discount code not found');\n      }\n      \n      const discount = await response.json();\n      setAppliedDiscount(discount);\n      toast({\n        title: language === 'uz' ? \"Muvaffaqiyat!\" : \"–£—Å–ø–µ—à–Ω–æ!\",\n        description: language === 'uz' ? \"Chegirma qo'llandi\" : \"–°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞\",\n      });\n    } catch (error: any) {\n      toast({\n        title: language === 'uz' ? \"Xatolik\" : \"–û—à–∏–±–∫–∞\",\n        description: error.message || (language === 'uz' ? \"Chegirma kodi noto'g'ri\" : \"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–∫–∏–¥–∫–∏\"),\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsApplyingDiscount(false);\n    }\n  };\n\n  // Remove applied discount\n  const removeDiscount = () => {\n    setAppliedDiscount(null);\n    setDiscountCode('');\n    toast({\n      title: language === 'uz' ? \"Chegirma olib tashlandi\" : \"–°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞\",\n    });\n  };\n\n  const onSubmit = async (data: CheckoutFormData) => {\n    setIsSubmitting(true);\n    try {\n      await createOrderMutation.mutateAsync(data);\n    } catch (error) {\n      console.error('Checkout error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Redirect if cart is empty\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        \n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\" data-testid=\"text-empty-cart-title\">\n              {language === 'uz' ? 'Savat bo\\'sh' : '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'}\n            </h1>\n            <p className=\"text-gray-600 mb-8\" data-testid=\"text-empty-cart-message\">\n              {language === 'uz' \n                ? 'Buyurtma berish uchun savatga mahsulot qo\\'shing.'\n                : '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.'\n              }\n            </p>\n            <Link href=\"/catalog\">\n              <Button data-testid=\"button-go-to-catalog\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                {language === 'uz' ? 'Katalogga o\\'tish' : '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É'}\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/cart\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back-to-cart\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              {language === 'uz' ? 'Savatga qaytish' : '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É'}\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-checkout-title\">\n            {language === 'uz' ? 'Buyurtmani rasmiylashtirish' : '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'}\n          </h1>\n        </div>\n\n        {/* Minimal zakaz ogohlantirishi */}\n        {!isMinimumOrderMet && (\n          <Alert className=\"mb-6 bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800\">\n            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            <AlertDescription className=\"text-red-700 dark:text-red-300\">\n              {language === 'uz' ? (\n                <>\n                  <strong>Diqqat!</strong> Minimal zakaz miqdori 500,000 {t('currency')}. \n                  Sizning zakazingiz: <strong>{totalAmount.toLocaleString()} {t('currency')}</strong>. \n                  Yana <strong>{remainingAmount.toLocaleString()} {t('currency')}</strong> mahsulot qo'shing yoki \n                  <Link href=\"/cart\" className=\"underline font-semibold ml-1\">savatga qaytang</Link>.\n                  <br />\n                  <small className=\"text-xs\">3 soniyadan keyin avtomatik savatga qaytarilasiz...</small>\n                </>\n              ) : (\n                <>\n                  <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 500,000 {t('currency')}. \n                  –í–∞—à –∑–∞–∫–∞–∑: <strong>{totalAmount.toLocaleString()} {t('currency')}</strong>. \n                  –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ <strong>{remainingAmount.toLocaleString()} {t('currency')}</strong> –∏–ª–∏ \n                  <Link href=\"/cart\" className=\"underline font-semibold ml-1\">–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É</Link>.\n                  <br />\n                  <small className=\"text-xs\">–ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—ë—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É...</small>\n                </>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-delivery-info-title\">\n                  {language === 'uz' ? 'Yetkazib berish ma\\'lumotlari' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"customerName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel data-testid=\"label-customer-name\">\n                            {language === 'uz' ? 'To\\'liq ism' : '–ü–æ–ª–Ω–æ–µ –∏–º—è'} *\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder={language === 'uz' ? 'Ismingizni kiriting' : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'}\n                              data-testid=\"input-customer-name\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel data-testid=\"label-customer-phone\">\n                            {language === 'uz' ? 'Telefon raqam' : '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'} *\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder={language === 'uz' ? '+998 90 123 45 67' : '+998 90 123 45 67'}\n                              data-testid=\"input-customer-phone\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel data-testid=\"label-customer-email\">\n                            {language === 'uz' ? 'Email (ixtiyoriy)' : 'Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'}\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"email\"\n                              placeholder={language === 'uz' ? 'example@email.com' : 'example@email.com'}\n                              data-testid=\"input-customer-email\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"shippingAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel data-testid=\"label-shipping-address\">\n                            {language === 'uz' ? 'Yetkazib berish manzili' : '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'} *\n                          </FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder={language === 'uz' ? \n                                'Viloyat, tuman, ko\\'cha va uy raqamini kiriting' :\n                                '–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, —Ä–∞–π–æ–Ω, —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞'\n                              }\n                              className=\"min-h-[100px]\"\n                              data-testid=\"input-shipping-address\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Delivery Method */}\n                    <FormField\n                      control={form.control}\n                      name=\"deliveryMethod\"\n                      render={({ field }) => (\n                        <FormItem className=\"space-y-3\">\n                          <FormLabel data-testid=\"label-delivery-method\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Truck className=\"w-4 h-4\" />\n                              <span>{language === 'uz' ? 'Yetkazib berish usuli' : '–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏'} *</span>\n                            </div>\n                          </FormLabel>\n                          <FormControl>\n                            <RadioGroup\n                              onValueChange={field.onChange}\n                              defaultValue={field.value}\n                              className=\"grid grid-cols-1 gap-4\"\n                            >\n                              <div className=\"flex items-center space-x-2 border rounded-lg p-4 hover:bg-gray-50\">\n                                <RadioGroupItem value=\"olib_ketish\" id=\"pickup\" />\n                                <Label htmlFor=\"pickup\" className=\"flex-1 cursor-pointer\">\n                                  <div>\n                                    <div className=\"font-medium\">\n                                      {language === 'uz' ? 'Olib ketish' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}\n                                    </div>\n                                    <div className=\"text-sm text-gray-500\">\n                                      {language === 'uz' \n                                        ? 'Mahsulotlarni do\\'kondan olib ketish' \n                                        : '–ó–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞'\n                                      }\n                                    </div>\n                                  </div>\n                                </Label>\n                              </div>\n                              <div className=\"flex items-center space-x-2 border rounded-lg p-4 hover:bg-gray-50\">\n                                <RadioGroupItem value=\"kuryer\" id=\"delivery\" />\n                                <Label htmlFor=\"delivery\" className=\"flex-1 cursor-pointer\">\n                                  <div>\n                                    <div className=\"font-medium\">\n                                      {language === 'uz' ? 'Kuryer orqali' : '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º'}\n                                    </div>\n                                    <div className=\"text-sm text-gray-500\">\n                                      {language === 'uz' \n                                        ? 'Mahsulotlarni uyingizgacha yetkazib berish' \n                                        : '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ –¥–æ–º–∞'\n                                      }\n                                    </div>\n                                  </div>\n                                </Label>\n                              </div>\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Payment Method */}\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem className=\"space-y-3\">\n                          <FormLabel data-testid=\"label-payment-method\">\n                            <div className=\"flex items-center space-x-2\">\n                              <CreditCard className=\"w-4 h-4\" />\n                              <span>{language === 'uz' ? 'To\\'lov usuli' : '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'} *</span>\n                            </div>\n                          </FormLabel>\n                          <FormControl>\n                            <RadioGroup\n                              onValueChange={field.onChange}\n                              defaultValue={field.value}\n                              className=\"grid grid-cols-1 gap-4\"\n                            >\n                              <div className=\"flex items-center space-x-2 border rounded-lg p-4 hover:bg-gray-50\">\n                                <RadioGroupItem value=\"naqd\" id=\"cash\" />\n                                <Label htmlFor=\"cash\" className=\"flex-1 cursor-pointer\">\n                                  <div>\n                                    <div className=\"font-medium\">\n                                      {language === 'uz' ? 'Naqd pul' : '–ù–∞–ª–∏—á–Ω—ã–µ'}\n                                    </div>\n                                    <div className=\"text-sm text-gray-500\">\n                                      {language === 'uz' \n                                        ? 'Mahsulotni olganda naqd to\\'lash' \n                                        : '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'\n                                      }\n                                    </div>\n                                  </div>\n                                </Label>\n                              </div>\n                              <div className=\"flex items-center space-x-2 border rounded-lg p-4 hover:bg-gray-50\">\n                                <RadioGroupItem value=\"karta\" id=\"card\" />\n                                <Label htmlFor=\"card\" className=\"flex-1 cursor-pointer\">\n                                  <div>\n                                    <div className=\"font-medium\">\n                                      {language === 'uz' ? 'Bank kartasi' : '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'}\n                                    </div>\n                                    <div className=\"text-sm text-gray-500\">\n                                      {language === 'uz' \n                                        ? 'Karta orqali to\\'lash' \n                                        : '–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π'\n                                      }\n                                    </div>\n                                  </div>\n                                </Label>\n                              </div>\n                              <div className=\"flex items-center space-x-2 border rounded-lg p-4 hover:bg-gray-50 hover:border-blue-200\">\n                                <RadioGroupItem value=\"qr_kod\" id=\"qr\" />\n                                <Label htmlFor=\"qr\" className=\"flex-1 cursor-pointer\">\n                                  <div className=\"flex items-center space-x-3\">\n                                    <QrCode className=\"w-5 h-5 text-blue-600\" />\n                                    <div>\n                                      <div className=\"font-medium\">\n                                        {language === 'uz' ? 'QR kod orqali to\\'lash' : '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QR –∫–æ–¥'}\n                                      </div>\n                                      <div className=\"text-sm text-gray-500\">\n                                        {language === 'uz' \n                                          ? 'Akram Farmonov - Mobil bank orqali' \n                                          : '–ê–∫—Ä–∞–º –§–∞—Ä–º–æ–Ω–æ–≤ - –ß–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫'\n                                        }\n                                      </div>\n                                    </div>\n                                  </div>\n                                </Label>\n                              </div>\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* QR Code Display - Show when QR payment is selected */}\n                    {form.watch('paymentMethod') === 'qr_kod' && (\n                      <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n                        <CardHeader className=\"pb-4\">\n                          <CardTitle className=\"flex items-center space-x-2 text-blue-700 dark:text-blue-300\">\n                            <QrCode className=\"w-5 h-5\" />\n                            <span>{language === 'uz' ? 'QR kod orqali to\\'lash' : '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QR –∫–æ–¥'}</span>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div className=\"text-center\">\n                            <div className=\"inline-block bg-white p-4 rounded-lg shadow-sm border\">\n                              <img \n                                src={qrCodeImage} \n                                alt=\"QR Code for payment\" \n                                className=\"w-48 h-48 mx-auto\"\n                                data-testid=\"img-qr-code\"\n                              />\n                            </div>\n                            <div className=\"mt-4 space-y-2\">\n                              <p className=\"font-semibold text-lg text-gray-900 dark:text-gray-100\">\n                                Akram Farmonov\n                              </p>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                {language === 'uz' \n                                  ? 'Mobil ilovangizda QR kodni skaner qiling va to\\'lovni amalga oshiring'\n                                  : '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂'\n                                }\n                              </p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border\">\n                            <h4 className=\"font-medium mb-2 text-gray-900 dark:text-gray-100\">\n                              {language === 'uz' ? 'To\\'lov ko\\'rsatmalari:' : '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:'}\n                            </h4>\n                            <ol className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1 list-decimal list-inside\">\n                              <li>\n                                {language === 'uz' \n                                  ? 'Mobil bank ilovangizni oching'\n                                  : '–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞'\n                                }\n                              </li>\n                              <li>\n                                {language === 'uz' \n                                  ? 'QR kod skanerini faollashtiring'\n                                  : '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–∫–∞–Ω–µ—Ä QR –∫–æ–¥–æ–≤'\n                                }\n                              </li>\n                              <li>\n                                {language === 'uz' \n                                  ? 'Yuqoridagi QR kodni skaner qiling'\n                                  : '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤—ã—à–µ'\n                                }\n                              </li>\n                              <li>\n                                {language === 'uz' \n                                  ? `To'lov miqdorini tasdiqlang: ${finalAmount.toLocaleString()} ${t('currency')}`\n                                  : `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞: ${finalAmount.toLocaleString()} ${t('currency')}`\n                                }\n                              </li>\n                              <li>\n                                {language === 'uz' \n                                  ? 'To\\'lovni tasdiqlang va amalga oshiring'\n                                  : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂'\n                                }\n                              </li>\n                            </ol>\n                          </div>\n                          \n                          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3\">\n                            <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                              {language === 'uz' \n                                ? 'üí° To\\'lovni amalga oshirgandan so\\'ng, buyurtmangiz avtomatik tasdiqlash uchun yuboriladi.'\n                                : 'üí° –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.'\n                              }\n                            </p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel data-testid=\"label-notes\">\n                            {language === 'uz' ? 'Qo\\'shimcha izoh (ixtiyoriy)' : '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'}\n                          </FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder={language === 'uz' ? \n                                'Buyurtma haqida qo\\'shimcha ma\\'lumot...' :\n                                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ...'\n                              }\n                              data-testid=\"input-notes\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      size=\"lg\" \n                      className=\"w-full bg-gradient-to-r from-blue-600 to-red-500 hover:from-blue-700 hover:to-red-600 text-white font-semibold py-3 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n                      disabled={isSubmitting}\n                      data-testid=\"button-place-order\"\n                    >\n                      {isSubmitting ? (\n                        language === 'uz' ? 'Yuborilmoqda...' : '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...'\n                      ) : (\n                        <>\n                          <CheckCircle className=\"w-5 h-5 mr-2\" />\n                          {language === 'uz' ? 'Buyurtmani tasdiqlash' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'}\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-8\">\n              <CardHeader>\n                <CardTitle data-testid=\"text-order-summary\">\n                  {language === 'uz' ? 'Buyurtma xulosasi' : '–ò—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Order Items */}\n                <div className=\"space-y-3\">\n                  {cartItems.map((item) => (\n                    <div key={item.id} className=\"flex justify-between text-sm\" data-testid={`order-item-${item.id}`}>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\" data-testid={`text-item-name-${item.id}`}>\n                          {language === 'uz' ? item.product?.nameUz : item.product?.nameRu}\n                        </p>\n                        <p className=\"text-gray-500\" data-testid={`text-item-details-${item.id}`}>\n                          {item.quantity} √ó {Number(item.product?.wholesalePrice || 0).toLocaleString()} {t('currency')}\n                        </p>\n                      </div>\n                      <span className=\"font-medium\" data-testid={`text-item-total-${item.id}`}>\n                        {(Number(item.product?.wholesalePrice || 0) * item.quantity).toLocaleString()} {t('currency')}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n                \n                <Separator />\n                \n                {/* Discount Code Section */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Tag className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">\n                      {language === 'uz' ? 'Chegirma kodi' : '–ö–æ–¥ —Å–∫–∏–¥–∫–∏'}\n                    </span>\n                  </div>\n                  \n                  {!appliedDiscount ? (\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder={language === 'uz' ? 'Kodni kiriting' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥'}\n                        value={discountCode}\n                        onChange={(e) => setDiscountCode(e.target.value.toUpperCase())}\n                        className=\"flex-1\"\n                        disabled={isApplyingDiscount}\n                      />\n                      <Button \n                        onClick={applyDiscount}\n                        disabled={isApplyingDiscount || !discountCode.trim()}\n                        size=\"sm\"\n                      >\n                        {isApplyingDiscount ? \n                          (language === 'uz' ? 'Tekshirish...' : '–ü—Ä–æ–≤–µ—Ä–∫–∞...') :\n                          (language === 'uz' ? 'Qo\\'llash' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å')\n                        }\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                          {appliedDiscount.type === 'percentage' ? (\n                            <>\n                              <Percent className=\"h-3 w-3\" />\n                              {appliedDiscount.value}%\n                            </>\n                          ) : (\n                            <>\n                              {appliedDiscount.value.toLocaleString()} {t('currency')}\n                            </>\n                          )}\n                        </Badge>\n                        <span className=\"text-sm font-medium text-green-700\">\n                          {appliedDiscount.code}\n                        </span>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={removeDiscount}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        {language === 'uz' ? 'Olib tashlash' : '–£–¥–∞–ª–∏—Ç—å'}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span data-testid=\"text-subtotal-label\">\n                      {language === 'uz' ? 'Mahsulotlar' : '–¢–æ–≤–∞—Ä—ã'}\n                    </span>\n                    <span data-testid=\"text-subtotal-amount\">\n                      {totalAmount.toLocaleString()} {t('currency')}\n                    </span>\n                  </div>\n                  \n                  {appliedDiscount && (\n                    <div className=\"flex justify-between text-sm text-green-600\">\n                      <span>\n                        {language === 'uz' ? 'Chegirma' : '–°–∫–∏–¥–∫–∞'} ({appliedDiscount.code})\n                      </span>\n                      <span>\n                        -{discountAmount.toLocaleString()} {t('currency')}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between text-sm\">\n                    <span data-testid=\"text-delivery-label\">\n                      {language === 'uz' ? 'Yetkazib berish' : '–î–æ—Å—Ç–∞–≤–∫–∞'}\n                    </span>\n                    <span className=\"text-green-600\" data-testid=\"text-delivery-amount\">\n                      {language === 'uz' ? 'Bepul' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}\n                    </span>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span data-testid=\"text-total-label\">\n                    {language === 'uz' ? 'Jami' : '–ò—Ç–æ–≥–æ'}\n                  </span>\n                  <span data-testid=\"text-total-amount\" className={appliedDiscount ? 'text-green-600' : ''}>\n                    {finalAmount.toLocaleString()} {t('currency')}\n                  </span>\n                </div>\n                \n                {appliedDiscount && (\n                  <div className=\"text-xs text-gray-500 text-center\">\n                    {language === 'uz' ? \n                      `${discountAmount.toLocaleString()} ${t('currency')} chegirma qo'llandi` :\n                      `–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountAmount.toLocaleString()} ${t('currency')}`\n                    }\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":39111},"client/src/pages/FavoritesPage.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthContext';\nimport { useLanguage } from '@/components/language-provider';\nimport { ProductCard } from '@/components/product-card';\nimport { Footer } from '@/components/footer';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Heart, ShoppingCart } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function FavoritesPage() {\n  const { user } = useAuth();\n  const { language } = useLanguage();\n\n  // Fetch favorites\n  const { data: favorites, isLoading } = useQuery({\n    queryKey: ['/api/favorites'],\n    queryFn: async () => {\n      const response = await fetch('/api/favorites');\n      if (!response.ok) {\n        throw new Error('Failed to fetch favorites');\n      }\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Redirect if not logged in\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <Heart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              {language === 'uz' ? 'Sevimlilar' : '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'}\n            </h1>\n            <p className=\"text-gray-600 mb-8\">\n              {language === 'uz' \n                ? 'Sevimlilar ro\\'yxatini ko\\'rish uchun tizimga kiring'\n                : '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'\n              }\n            </p>\n            <div className=\"space-x-4\">\n              <Link href=\"/auth/login\">\n                <Button>\n                  {language === 'uz' ? 'Tizimga kirish' : '–í–æ–π—Ç–∏'}\n                </Button>\n              </Link>\n              <Link href=\"/\">\n                <Button variant=\"outline\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Bosh sahifa' : '–ì–ª–∞–≤–Ω–∞—è'}\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Orqaga' : '–ù–∞–∑–∞–¥'}\n                </Button>\n              </Link>\n              <div className=\"flex items-center space-x-2\">\n                <Heart className=\"h-6 w-6 text-red-500\" />\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  {language === 'uz' ? 'Sevimlilar' : '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'}\n                </h1>\n              </div>\n            </div>\n            {favorites && favorites.length > 0 && (\n              <p className=\"text-sm text-gray-600\">\n                {language === 'uz' \n                  ? `${favorites.length} ta mahsulot`\n                  : `${favorites.length} —Ç–æ–≤–∞—Ä–æ–≤`\n                }\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"bg-white border border-gray-200 rounded-xl animate-pulse\">\n                <div className=\"h-48 bg-gray-200 rounded-t-xl\"></div>\n                <div className=\"p-6 space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : favorites && favorites.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {favorites.map((favorite: any) => (\n              <ProductCard \n                key={favorite.product.id} \n                product={favorite.product}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <Heart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              {language === 'uz' ? 'Sevimlilar ro\\'yxati bo\\'sh' : '–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç'}\n            </h2>\n            <p className=\"text-gray-600 mb-8\">\n              {language === 'uz' \n                ? 'Mahsulotlarni sevimlilar ro\\'yxatiga qo\\'shing va keyinroq ularni bu yerda ko\\'ring'\n                : '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Ö –∑–¥–µ—Å—å –ø–æ–∑–∂–µ'\n              }\n            </p>\n            <div className=\"space-x-4\">\n              <Link href=\"/products\">\n                <Button>\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Mahsulotlarni ko\\'rish' : '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã'}\n                </Button>\n              </Link>\n              <Link href=\"/\">\n                <Button variant=\"outline\">\n                  {language === 'uz' ? 'Bosh sahifa' : '–ì–ª–∞–≤–Ω–∞—è'}\n                </Button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5883},"client/src/pages/LoginPage.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Alert, AlertDescription } from '../components/ui/alert';\nimport { Link } from 'wouter';\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const result = await login(formData.email, formData.password);\n\n      if (result.success) {\n        setLocation('/');\n      } else {\n        setError(result.message || 'Login failed');\n      }\n    } catch (error) {\n      setError('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Kirish</CardTitle>\n          <CardDescription className=\"text-center\">\n            Akkauntingizga kirish uchun ma'lumotlaringizni kiriting\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"email@example.com\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Parol</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                value={formData.password}\n                onChange={handleInputChange}\n                placeholder=\"Parolingizni kiriting\"\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? 'Yuklanmoqda...' : 'Kirish'}\n            </Button>\n\n            <div className=\"text-center text-sm\">\n              <span className=\"text-gray-600\">Akkauntingiz yo'qmi? </span>\n              <Link href=\"/register\" className=\"text-blue-600 hover:text-blue-500\">\n                Ro'yxatdan o'tish\n              </Link>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3404},"client/src/pages/OrderSuccessPage.tsx":{"content":"import { useLocation, Link } from 'wouter';\nimport { CheckCircle, Package, Home } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { useAuth } from '../context/AuthContext';\n\nexport default function OrderSuccessPage() {\n  const [location] = useLocation();\n  const { isAuthenticated } = useAuth();\n  \n  // Extract order ID from URL parameters if available\n  const urlParams = new URLSearchParams(location.split('?')[1]);\n  const orderId = urlParams.get('orderId') || 'Noma\\'lum';\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card className=\"text-center\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex justify-center mb-4\">\n              <CheckCircle className=\"h-16 w-16 text-green-500\" />\n            </div>\n            <CardTitle className=\"text-2xl text-green-600 mb-2\">\n              Buyurtma muvaffaqiyatli qabul qilindi!\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <p className=\"text-gray-700 mb-2\">\n                <strong>Buyurtma raqami:</strong> {orderId.slice(0, 8)}...\n              </p>\n              <p className=\"text-gray-600\">\n                Tez orada siz bilan bog'lanamiz va buyurtmangizni tasdiqlash uchun aloqaga chiqamiz.\n              </p>\n            </div>\n\n            <div className=\"border-t pt-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Keyingi qadamlar:</h3>\n              <div className=\"space-y-3 text-left\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold mt-1\">\n                    1\n                  </div>\n                  <p className=\"text-gray-700\">Bizning menejerlarimiz 15 daqiqa ichida siz bilan bog'lanadi</p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold mt-1\">\n                    2\n                  </div>\n                  <p className=\"text-gray-700\">Buyurtma tafsilotlari va yetkazib berish sanasi tasdiqlash</p>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold mt-1\">\n                    3\n                  </div>\n                  <p className=\"text-gray-700\">Mahsulotlar belgilangan vaqtda yetkazib beriladi</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 pt-6\">\n              <Link href=\"/\" className=\"flex-1\">\n                <Button className=\"w-full\" variant=\"outline\">\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  Bosh sahifaga qaytish\n                </Button>\n              </Link>\n              \n              {isAuthenticated && (\n                <Link href=\"/profile\" className=\"flex-1\">\n                  <Button className=\"w-full\">\n                    <Package className=\"mr-2 h-4 w-4\" />\n                    Buyurtmalar tarixi\n                  </Button>\n                </Link>\n              )}\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg mt-6\">\n              <p className=\"text-blue-800 text-sm\">\n                <strong>Eslatma:</strong> Agar 30 daqiqa ichida aloqa bo'lmasa, \n                iltimos +998 99 644 84 44 raqamiga qo'ng'iroq qiling, yoki{' '}\n                <a href=\"https://t.me/akramjon0011\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 underline\">\n                  https://t.me/akramjon0011\n                </a>{' '}\n                telegram orqali yozing.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4163},"client/src/pages/ProductDetailsPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, Link } from 'wouter';\nimport { useProductBySlug } from '@/hooks/useProductBySlug';\nimport { useRelatedProducts } from '@/hooks/useRelatedProducts';\nimport { useLanguage } from '@/components/language-provider';\nimport { useCart } from '@/context/CartContext';\nimport { useAuth } from '@/context/AuthContext';\nimport { SEOHead } from '@/components/SEOHead';\nimport { generateProductMetaTags } from '@shared/seo';\nimport { Footer } from '@/components/footer';\nimport { ProductCard } from '@/components/product-card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle } from '@/components/ui/dialog';\nimport { ChevronLeft, Minus, Plus, ShoppingCart, ArrowLeft, Play, Star, Heart } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function ProductDetailsPage() {\n  const { slug } = useParams<{ slug: string }>();\n  const { language, t } = useLanguage();\n  const { addToCart } = useCart();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [quantity, setQuantity] = useState(1);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [showVideoModal, setShowVideoModal] = useState(false);\n\n\n  // YouTube video handling functions\n  const getYouTubeId = (url: string) => {\n    if (!url) return null;\n    const match = url.match(/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/);\n    return match ? match[1] : null;\n  };\n\n  const isYouTubeVideo = (url: string) => {\n    return getYouTubeId(url) !== null;\n  };\n\n  const { data: product, isLoading, error } = useProductBySlug(slug || '');\n  \n  // Mahsulot ma'lumotlari kelganidan keyin miqdorni yangilash\n  useEffect(() => {\n    if (product) {\n      setQuantity(product.minQuantity || 1);\n    }\n  }, [product]);\n  \n  // Get related products\n  const { data: relatedProducts = [], isLoading: relatedLoading } = useRelatedProducts(product?.id || '');\n\n  // All hooks must be called at the top level before any conditional returns\n  // Check if product is in favorites\n  const { data: favoriteStatus } = useQuery({\n    queryKey: ['/api/favorites/check', product?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/favorites/check/${product?.id}`);\n      if (!response.ok) throw new Error('Failed to check favorite status');\n      return response.json();\n    },\n    enabled: !!user && !!product?.id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Add to favorites mutation\n  const addToFavoritesMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/favorites', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ productId: product?.id }),\n      });\n      if (!response.ok) throw new Error('Failed to add to favorites');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites/check', product?.id] });\n      toast({\n        title: language === 'uz' ? \"Sevimlilar ro'yxatiga qo'shildi\" : \"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === 'uz' ? \"Xatolik\" : \"–û—à–∏–±–∫–∞\",\n        description: error.message || (language === 'uz' ? \"Sevimlilar ro'yxatiga qo'shishda xatolik\" : \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove from favorites mutation\n  const removeFromFavoritesMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/favorites/${product?.id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to remove from favorites');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites/check', product?.id] });\n      toast({\n        title: language === 'uz' ? \"Sevimlilardan o'chirildi\" : \"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === 'uz' ? \"Xatolik\" : \"–û—à–∏–±–∫–∞\",\n        description: error.message || (language === 'uz' ? \"Sevimlilardan o'chirishda xatolik\" : \"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background dark:bg-black\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n              <div className=\"space-y-4\">\n                <div className=\"w-full h-96 bg-muted rounded-lg\"></div>\n                <div className=\"flex space-x-2\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"w-20 h-20 bg-muted rounded-lg\"></div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"space-y-6\">\n                <div className=\"h-8 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-6 bg-muted rounded w-1/2\"></div>\n                <div className=\"h-20 bg-muted rounded\"></div>\n                <div className=\"h-10 bg-muted rounded w-1/3\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"min-h-screen bg-background dark:bg-black\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\" data-testid=\"text-error-title\">\n              Mahsulot topilmadi\n            </h1>\n            <p className=\"text-muted-foreground mb-8\" data-testid=\"text-error-message\">\n              Kechirasiz, siz qidirgan mahsulot mavjud emas.\n            </p>\n            <Link href=\"/catalog\">\n              <Button data-testid=\"button-back-to-catalog\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Katalogga qaytish\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const name = language === 'uz' ? product.nameUz : product.nameRu;\n  const description = language === 'uz' ? product.descriptionUz : product.descriptionRu;\n\n  const handleToggleFavorite = () => {\n    if (!user) {\n      toast({\n        title: language === 'uz' ? \"Tizimga kirish talab qilinadi\" : \"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\",\n        description: language === 'uz' ? \"Sevimlilar ro'yxatidan foydalanish uchun tizimga kiring\" : \"–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (favoriteStatus?.isFavorite) {\n      removeFromFavoritesMutation.mutate();\n    } else {\n      addToFavoritesMutation.mutate();\n    }\n  };\n\n  // SEO meta-teglarni generate qilish\n  const seoMetaTags = generateProductMetaTags(product);\n  \n  const stockStatus = (product.stockQuantity || 0) > 100 ? 'inStock' : \n                     (product.stockQuantity || 0) > 0 ? 'lowStock' : 'outOfStock';\n  \n  const statusLabels = {\n    inStock: language === 'uz' ? 'Sotuvda bor' : '–í –ø—Ä–æ–¥–∞–∂–µ',\n    lowStock: language === 'uz' ? 'Kam qoldi' : '–ú–∞–ª–æ –æ—Å—Ç–∞–ª–æ—Å—å', \n    outOfStock: language === 'uz' ? 'Tugadi' : '–ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å'\n  };\n\n  const statusColors = {\n    inStock: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n    lowStock: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n    outOfStock: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n  };\n\n  const images = product.images || [];\n  const currentImage = images[selectedImageIndex] || images[0] || '/placeholder-image.jpg';\n\n  const handleQuantityChange = (newQuantity: number) => {\n    const minQty = product.minQuantity || 1;\n    if (newQuantity >= minQty && newQuantity <= 999999) {\n      setQuantity(newQuantity);\n    }\n  };\n\n  const handleQuantityDecrease = () => {\n    const minQty = product.minQuantity || 1;\n    const step = minQty;\n    handleQuantityChange(quantity - step);\n  };\n\n  const handleQuantityIncrease = () => {\n    const minQty = product.minQuantity || 1;\n    const step = minQty;\n    handleQuantityChange(quantity + step);\n  };\n\n  const handleQuantityInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(e.target.value);\n    const minQty = product.minQuantity || 1;\n    if (value && value >= minQty) {\n      handleQuantityChange(value);\n    } else if (value === 0 || isNaN(value)) {\n      setQuantity(minQty);\n    }\n  };\n\n  // Qaysi narxni ishlatish kerakligini aniqlash\n  const getEffectivePrice = () => {\n    const wholesaleMinQty = (product as any).wholesaleMinQuantity || product.minQuantity;\n    if (quantity >= wholesaleMinQty && product.wholesalePrice) {\n      return parseFloat(product.wholesalePrice);\n    }\n    return parseFloat(product.price);\n  };\n\n  const effectivePrice = getEffectivePrice();\n  const totalPrice = quantity * effectivePrice;\n  const isWholesalePrice = quantity >= ((product as any).wholesaleMinQuantity || product.minQuantity) && product.wholesalePrice;\n\n  const handleAddToCart = async () => {\n    if (!product) return;\n    \n    try {\n      await addToCart(product.id, quantity);\n    } catch (error) {\n      console.error('Failed to add to cart:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-black\">\n      <SEOHead seo={seoMetaTags} />\n      \n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation */}\n        <nav className=\"flex items-center space-x-2 mb-8\" data-testid=\"breadcrumb-nav\">\n          <Link href=\"/catalog\" className=\"flex items-center text-primary hover:text-primary/80 font-medium transition-colors\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            <span className=\"text-foreground\">‚Üê {language === 'uz' ? 'Katalogga qaytish' : '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥'}</span>\n          </Link>\n        </nav>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Left Column - Image Gallery */}\n          <div className=\"space-y-4\">\n            {/* Main Image */}\n            <div className=\"relative bg-card rounded-2xl overflow-hidden shadow-lg border border-border\">\n              <img\n                src={currentImage}\n                alt={name}\n                className=\"w-full h-[500px] object-cover\"\n                data-testid=\"main-product-image\"\n              />\n              {product.isFeatured && (\n                <Badge className=\"absolute top-4 left-4 bg-yellow-500 text-white\">\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  {language === 'uz' ? 'Tavsiya etiladi' : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è'}\n                </Badge>\n              )}\n            </div>\n\n            {/* Thumbnail Gallery */}\n            <div className=\"flex space-x-3\">\n              {images.map((image, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedImageIndex(index)}\n                  className={`w-20 h-20 rounded-xl overflow-hidden border-2 transition-all ${\n                    selectedImageIndex === index\n                      ? 'border-primary shadow-lg'\n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  data-testid={`thumbnail-image-${index}`}\n                >\n                  <img\n                    src={image}\n                    alt={`${name} ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </button>\n              ))}\n              \n              {/* Video Thumbnail */}\n              {(product as any).videoUrl && (\n                <Dialog open={showVideoModal} onOpenChange={setShowVideoModal}>\n                  <DialogTrigger asChild>\n                    <button\n                      className=\"w-20 h-20 bg-gray-900 rounded-xl flex items-center justify-center border-2 border-border hover:border-primary/50 transition-all relative overflow-hidden\"\n                      data-testid=\"video-thumbnail\"\n                    >\n                      {isYouTubeVideo((product as any).videoUrl) ? (\n                        <>\n                          <img \n                            src={`https://img.youtube.com/vi/${getYouTubeId((product as any).videoUrl)}/0.jpg`}\n                            alt=\"Video thumbnail\"\n                            className=\"w-full h-full object-cover\"\n                          />\n                          <div className=\"absolute inset-0 bg-black/30 flex items-center justify-center\">\n                            <Play className=\"w-6 h-6 text-white\" />\n                          </div>\n                        </>\n                      ) : (\n                        <Play className=\"w-8 h-8 text-white\" />\n                      )}\n                    </button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl w-full\">\n                    <DialogTitle className=\"text-foreground\">{language === 'uz' ? 'Mahsulot videosi' : '–í–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞'}</DialogTitle>\n                    <div className=\"aspect-video\">\n                      {isYouTubeVideo((product as any).videoUrl) ? (\n                        <iframe\n                          src={`https://www.youtube.com/embed/${getYouTubeId((product as any).videoUrl)}?autoplay=1&rel=0`}\n                          title=\"Product Video\"\n                          frameBorder=\"0\"\n                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                          allowFullScreen\n                          className=\"w-full h-full rounded-lg\"\n                          data-testid=\"youtube-video\"\n                        />\n                      ) : (\n                        <video\n                          src={(product as any).videoUrl}\n                          controls\n                          className=\"w-full h-full rounded-lg\"\n                          data-testid=\"product-video\"\n                        >\n                          {language === 'uz' ? 'Brauzeringiz video formatini qo\\'llab-quvvatlamaydi.' : '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Ñ–æ—Ä–º–∞—Ç.'}\n                        </video>\n                      )}\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </div>\n\n          {/* Right Column - Product Information */}\n          <div className=\"space-y-8\">\n            {/* Product Title and Basic Info */}\n            <div>\n              <div className=\"flex items-start justify-between mb-4\">\n                <h1 className=\"text-3xl lg:text-4xl font-bold text-foreground flex-1 mr-4\" data-testid=\"product-title\">\n                  {name}\n                </h1>\n                {/* Favorites Button */}\n                {user && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"lg\"\n                    className={`p-3 rounded-full ${\n                      favoriteStatus?.isFavorite \n                        ? 'text-red-500 hover:text-red-600 bg-red-50 hover:bg-red-100 dark:bg-red-900/20 dark:hover:bg-red-900/30' \n                        : 'text-muted-foreground hover:text-red-500 bg-muted hover:bg-red-50 dark:hover:bg-red-900/20'\n                    }`}\n                    onClick={handleToggleFavorite}\n                    disabled={addToFavoritesMutation.isPending || removeFromFavoritesMutation.isPending}\n                  >\n                    <Heart \n                      className={`h-6 w-6 ${favoriteStatus?.isFavorite ? 'fill-current' : ''}`}\n                    />\n                  </Button>\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-4 mb-6\">\n                <Badge className={statusColors[stockStatus]} data-testid=\"stock-status\">\n                  {statusLabels[stockStatus]}\n                </Badge>\n                <span className=\"text-sm text-muted-foreground\">\n                  SKU: {product.id.slice(-8).toUpperCase()}\n                </span>\n              </div>\n\n              {/* Price Section */}\n              <div className=\"bg-card rounded-2xl p-6 border border-border\">\n                <div className=\"flex items-baseline space-x-4\">\n                  <span className=\"text-3xl font-bold text-foreground\">\n                    {parseFloat(product.price).toLocaleString()} {t('currency')}\n                  </span>\n                  <span className=\"text-lg text-muted-foreground\">/ {product.unit}</span>\n                </div>\n                {product.wholesalePrice && parseFloat(product.wholesalePrice) !== parseFloat(product.price) && (\n                  <div className=\"mt-2\">\n                    <span className=\"text-lg text-green-600 dark:text-green-400\">\n                      {language === 'uz' ? 'Optom narxi' : '–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞'}: {parseFloat(product.wholesalePrice).toLocaleString()} {t('currency')}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground ml-2\">\n                      (min: {(product as any).wholesaleMinQuantity || product.minQuantity} {product.unit})\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Quantity and Add to Cart */}\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-3\">{t('quantity')}</h3>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center bg-card rounded-lg border border-border\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleQuantityDecrease}\n                      disabled={quantity <= 1}\n                      className=\"h-12 w-12 p-0 hover:bg-muted\"\n                      data-testid=\"decrease-quantity\"\n                    >\n                      <Minus className=\"w-5 h-5\" />\n                    </Button>\n                    <Input\n                      type=\"number\"\n                      value={quantity}\n                      onChange={handleQuantityInputChange}\n                      min={product.minQuantity || 1}\n                      max=\"999999\"\n                      step={product.minQuantity || 1}\n                      className=\"w-28 h-12 text-center border-0 bg-transparent text-lg font-semibold text-foreground\"\n                      data-testid=\"quantity-input\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleQuantityIncrease}\n                      disabled={quantity >= 999999}\n                      className=\"h-12 w-12 p-0 hover:bg-muted\"\n                      data-testid=\"increase-quantity\"\n                    >\n                      <Plus className=\"w-5 h-5\" />\n                    </Button>\n                  </div>\n                  <span className=\"text-muted-foreground\">\n                    Mavjud: {product.stockQuantity || 0} {product.unit}\n                  </span>\n                </div>\n              </div>\n\n              <Button\n                onClick={handleAddToCart}\n                disabled={stockStatus === 'outOfStock' || quantity < 1}\n                className=\"w-full h-14 text-lg font-semibold bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600 text-white rounded-xl shadow-lg hover:shadow-xl transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n                data-testid=\"add-to-cart-button\"\n              >\n                <ShoppingCart className=\"w-6 h-6 mr-3 text-white\" />\n                <span className=\"text-white\">{t('addToCart')}</span>\n                <span className=\"ml-2 text-white\">\n                  ({totalPrice.toLocaleString()} {t('currency')})\n                </span>\n              </Button>\n            </div>\n\n            {/* Description - Moved after Add to Cart button */}\n            <div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">{t('description')}</h3>\n              <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"product-description\">\n                {description || 'Mahsulot tavsifi mavjud emas.'}\n              </p>\n            </div>\n\n            {/* Specifications - Moved after Add to Cart button */}\n            {(product as any).specifications && Object.keys((product as any).specifications).length > 0 && (\n              <div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-3\">{t('specifications')}</h3>\n                <div className=\"bg-card rounded-2xl p-6 border border-border\">\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {Object.entries((product as any).specifications).map(([key, value]) => (\n                      <div key={key} className=\"flex justify-between border-b border-border/50 pb-2\">\n                        <span className=\"text-muted-foreground\">{key}:</span>\n                        <span className=\"text-foreground font-medium\">{String(value)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* O'xshash mahsulotlar bo'limi */}\n      {relatedProducts.length > 0 && (\n        <div className=\"bg-muted/30 py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n                {language === 'uz' ? \"O'xshash mahsulotlar\" : \"–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã\"}\n              </h2>\n              <p className=\"text-muted-foreground text-lg\">\n                {language === 'uz' ? \n                  \"Sizni qiziqtirishi mumkin bo'lgan boshqa mahsulotlar\" : \n                  \"–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å\"\n                }\n              </p>\n            </div>\n            \n            {relatedLoading ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"bg-card rounded-2xl p-6 shadow-lg animate-pulse border border-border\" data-testid={`skeleton-related-${i}`}>\n                    <div className=\"w-full h-48 bg-muted rounded-xl mb-4\"></div>\n                    <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                    <div className=\"h-8 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {relatedProducts.map((relatedProduct) => (\n                  <ProductCard \n                    key={relatedProduct.id} \n                    product={relatedProduct}\n                    onAddToCart={(product) => {\n                      addToCart(product.id, 1);\n                      toast({\n                        title: language === 'uz' ? \"Savatga qo'shildi\" : \"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É\",\n                        description: language === 'uz' ? \n                          `${product.nameUz} savatga qo'shildi` : \n                          `${product.nameRu} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`\n                      });\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":24668},"client/src/pages/ProfilePage.tsx":{"content":"import { useAuth } from '../context/AuthContext';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { Separator } from '../components/ui/separator';\nimport { User, Package, Calendar, DollarSign } from 'lucide-react';\n\ninterface OrderItem {\n  id: string;\n  productId: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  product?: {\n    nameUz: string;\n    nameRu: string;\n    images?: string[];\n  };\n}\n\ninterface Order {\n  id: string;\n  userId: string;\n  totalAmount: string;\n  status: string;\n  customerName: string;\n  customerPhone: string;\n  customerEmail?: string;\n  shippingAddress: string;\n  notes?: string;\n  createdAt: string;\n  items: OrderItem[];\n}\n\nconst statusColors = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  confirmed: 'bg-blue-100 text-blue-800',\n  shipped: 'bg-purple-100 text-purple-800',\n  delivered: 'bg-green-100 text-green-800',\n  cancelled: 'bg-red-100 text-red-800',\n};\n\nconst statusLabels = {\n  pending: 'Kutilmoqda',\n  confirmed: 'Tasdiqlangan',\n  shipped: 'Jo\\'natildi',\n  delivered: 'Yetkazildi',\n  cancelled: 'Bekor qilindi',\n};\n\nexport default function ProfilePage() {\n  const { user } = useAuth();\n\n  const { data: orders = [], isLoading, error } = useQuery<Order[]>({\n    queryKey: ['my-orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/my-orders');\n      if (!response.ok) {\n        throw new Error('Buyurtmalar tarixini olishda xatolik');\n      }\n      return response.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-4xl mx-auto px-4\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-300 rounded w-1/3\"></div>\n            <div className=\"h-32 bg-gray-300 rounded\"></div>\n            <div className=\"h-64 bg-gray-300 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Mening akkauntim</h1>\n          <p className=\"text-gray-600\">Shaxsiy ma'lumotlaringiz va buyurtmalar tarixi</p>\n        </div>\n\n        {/* User Info Card */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Shaxsiy ma'lumotlar\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Foydalanuvchi nomi</label>\n                <p className=\"text-lg text-gray-900\">{user?.username}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Email</label>\n                <p className=\"text-lg text-gray-900\">{user?.email}</p>\n              </div>\n              {user?.phone && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Telefon</label>\n                  <p className=\"text-lg text-gray-900\">{user.phone}</p>\n                </div>\n              )}\n              <div>\n                <label className=\"text-sm font-medium text-gray-600\">Ro'yxatdan o'tgan sana</label>\n                <p className=\"text-lg text-gray-900\">\n                  {user?.createdAt ? new Date(user.createdAt).toLocaleDateString('uz-UZ') : 'N/A'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders History */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Buyurtmalar tarixi\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {orders.length} ta buyurtma\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <div className=\"text-center py-8\">\n                <p className=\"text-red-600\">Xatolik yuz berdi: {error instanceof Error ? error.message : 'Noma\\'lum xatolik'}</p>\n              </div>\n            )}\n            \n            {orders.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <p className=\"text-gray-600 text-lg\">Hali buyurtmalar yo'q</p>\n                <p className=\"text-gray-500\">Birinchi buyurtmangizni bering!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {orders.map((order) => (\n                  <div key={order.id} className=\"border rounded-lg p-6 hover:shadow-md transition-shadow\">\n                    {/* Order Header */}\n                    <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4\">\n                      <div className=\"flex items-center gap-3 mb-2 sm:mb-0\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">#{order.id.slice(0, 8)}</h3>\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                            <Calendar className=\"h-4 w-4\" />\n                            {new Date(order.createdAt).toLocaleDateString('uz-UZ', {\n                              year: 'numeric',\n                              month: 'long',\n                              day: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <Badge \n                          className={statusColors[order.status as keyof typeof statusColors] || 'bg-gray-100 text-gray-800'}\n                        >\n                          {statusLabels[order.status as keyof typeof statusLabels] || order.status}\n                        </Badge>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center gap-1 text-lg font-semibold text-gray-900\">\n                            <DollarSign className=\"h-4 w-4\" />\n                            {parseFloat(order.totalAmount).toLocaleString('uz-UZ')} so'm\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator className=\"my-4\" />\n\n                    {/* Order Details */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Mijoz nomi</label>\n                        <p className=\"text-gray-900\">{order.customerName}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Telefon</label>\n                        <p className=\"text-gray-900\">{order.customerPhone}</p>\n                      </div>\n                      <div className=\"md:col-span-2\">\n                        <label className=\"text-sm font-medium text-gray-600\">Yetkazib berish manzili</label>\n                        <p className=\"text-gray-900\">{order.shippingAddress}</p>\n                      </div>\n                      {order.notes && (\n                        <div className=\"md:col-span-2\">\n                          <label className=\"text-sm font-medium text-gray-600\">Izoh</label>\n                          <p className=\"text-gray-900\">{order.notes}</p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Order Items */}\n                    {order.items && order.items.length > 0 && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600 mb-2 block\">Mahsulotlar</label>\n                        <div className=\"space-y-2\">\n                          {order.items.map((item) => (\n                            <div key={item.id} className=\"flex justify-between items-center bg-gray-50 p-3 rounded\">\n                              <div className=\"flex-1\">\n                                <p className=\"font-medium text-gray-900\">\n                                  {item.product?.nameUz || 'Mahsulot nomi topilmadi'}\n                                </p>\n                                <p className=\"text-sm text-gray-600\">\n                                  {item.quantity} dona √ó {parseFloat(item.unitPrice).toLocaleString('uz-UZ')} so'm\n                                </p>\n                              </div>\n                              <p className=\"font-medium text-gray-900\">\n                                {parseFloat(item.totalPrice).toLocaleString('uz-UZ')} so'm\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9531},"client/src/pages/RegisterPage.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useLocation } from 'wouter';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Alert, AlertDescription } from '../components/ui/alert';\nimport { Link } from 'wouter';\n\nexport default function RegisterPage() {\n  const [, setLocation] = useLocation();\n  const { register } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phone: ''\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    // Basic validation\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const result = await register(\n        formData.username,\n        formData.email,\n        formData.password,\n        formData.phone || undefined\n      );\n\n      if (result.success) {\n        setLocation('/');\n      } else {\n        setError(result.message || 'Registration failed');\n      }\n    } catch (error) {\n      setError('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Ro'yxatdan o'tish</CardTitle>\n          <CardDescription className=\"text-center\">\n            Yangi akkaunt yaratish uchun ma'lumotlaringizni kiriting\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Foydalanuvchi nomi</Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                required\n                value={formData.username}\n                onChange={handleInputChange}\n                placeholder=\"foydalanuvchi_nomi\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"email@example.com\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Telefon raqami (ixtiyoriy)</Label>\n              <Input\n                id=\"phone\"\n                name=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={handleInputChange}\n                placeholder=\"+998901234567\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Parol</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                value={formData.password}\n                onChange={handleInputChange}\n                placeholder=\"Kamida 6 ta belgi\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Parolni tasdiqlang</Label>\n              <Input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                required\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                placeholder=\"Parolni qayta kiriting\"\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? 'Yuklanmoqda...' : \"Ro'yxatdan o'tish\"}\n            </Button>\n\n            <div className=\"text-center text-sm\">\n              <span className=\"text-gray-600\">Akkauntingiz bormi? </span>\n              <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-500\">\n                Kirish\n              </Link>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5142},"client/src/pages/SearchPage.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { Header } from \"@/components/header\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Loader2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { Product, BlogPost } from \"@shared/schema\";\n\ninterface SearchResult {\n  products: Product[];\n  blogPosts: BlogPost[];\n}\n\nexport default function SearchPage() {\n  const [location, navigate] = useLocation();\n  const { language, t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Extract search query from URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const query = urlParams.get('q') || '';\n\n  const { data: searchResults, isLoading, error } = useQuery<SearchResult>({\n    queryKey: ['/api/search', query],\n    queryFn: async () => {\n      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error('Qidiruv muvaffaqiyatsiz');\n      }\n      return response.json();\n    },\n    enabled: !!query,\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  const BlogPostCard = ({ post }: { post: SearchResult['blogPosts'][0] }) => (\n    <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">{post.title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {post.imageUrl && (\n          <img\n            src={post.imageUrl}\n            alt={post.title}\n            className=\"w-full h-40 object-cover rounded-md mb-4\"\n          />\n        )}\n        <p className=\"text-sm text-muted-foreground line-clamp-3\">\n          {post.content.substring(0, 150)}...\n        </p>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          {new Date(post.createdAt || '').toLocaleDateString(language === 'uz' ? 'uz-UZ' : 'ru-RU')}\n        </p>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n      {/* Search form */}\n      <form onSubmit={handleSearch} className=\"mb-8\">\n        <div className=\"flex gap-2 max-w-md mx-auto\">\n          <Input\n            type=\"text\"\n            placeholder={language === 'uz' ? 'Qidirish...' : '–ü–æ–∏—Å–∫...'}\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"flex-1\"\n          />\n          <Button type=\"submit\" size=\"icon\">\n            <Search className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </form>\n\n      {query && (\n        <div>\n          <h1 className=\"text-2xl font-bold mb-6\">\n            {language === 'uz' ? `Qidiruv natijalari: \"${query}\"` : `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"${query}\"`}\n          </h1>\n\n          {isLoading && (\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <span className=\"ml-2\">\n                {language === 'uz' ? 'Qidirilmoqda...' : '–ò–¥–µ—Ç –ø–æ–∏—Å–∫...'}\n              </span>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-red-500\">\n                {language === 'uz' ? 'Qidirishda xatolik yuz berdi' : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ'}\n              </p>\n            </div>\n          )}\n\n          {searchResults && !isLoading && (\n            <div className=\"space-y-8\">\n              {/* Products section */}\n              <section>\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  {language === 'uz' ? 'Topilgan mahsulotlar' : '–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'}\n                  {searchResults.products.length > 0 && (\n                    <span className=\"text-muted-foreground ml-2\">\n                      ({searchResults.products.length})\n                    </span>\n                  )}\n                </h2>\n                \n                {searchResults.products.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                    {searchResults.products.map((product) => (\n                      <ProductCard key={product.id} product={product} />\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">\n                    {language === 'uz' ? 'Mahsulotlar topilmadi' : '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}\n                  </p>\n                )}\n              </section>\n\n              {/* Blog posts section */}\n              <section>\n                <h2 className=\"text-xl font-semibold mb-4\">\n                  {language === 'uz' ? 'Topilgan maqolalar' : '–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏'}\n                  {searchResults.blogPosts.length > 0 && (\n                    <span className=\"text-muted-foreground ml-2\">\n                      ({searchResults.blogPosts.length})\n                    </span>\n                  )}\n                </h2>\n                \n                {searchResults.blogPosts.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {searchResults.blogPosts.map((post) => (\n                      <BlogPostCard key={post.id} post={post} />\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">\n                    {language === 'uz' ? 'Maqolalar topilmadi' : '–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}\n                  </p>\n                )}\n              </section>\n\n              {/* No results message */}\n              {searchResults.products.length === 0 && searchResults.blogPosts.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-lg text-muted-foreground mb-2\">\n                    {language === 'uz' ? 'Hech narsa topilmadi' : '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {language === 'uz'\n                      ? 'Boshqa kalit so\\'zlar bilan qayta urinib ko\\'ring'\n                      : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {!query && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-lg text-muted-foreground\">\n            {language === 'uz' ? 'Qidiruv so\\'zini kiriting' : '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'}\n          </p>\n        </div>\n      )}\n      </div>\n    </div>\n  );\n}","size_bytes":7219},"client/src/pages/catalog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useCategories } from '@/hooks/useCategories';\nimport { useProducts } from '@/hooks/useProducts';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { Footer } from '@/components/footer';\nimport { SEOHead } from '@/components/SEOHead';\nimport { generateCatalogMetaTags } from '@shared/seo';\nimport { ProductCard } from '@/components/product-card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, ChevronRight } from 'lucide-react';\n\nexport default function Catalog() {\n  const { t, language } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortBy, setSortBy] = useState('name');\n\n  const { data: categories = [], isLoading: categoriesLoading } = useCategories();\n  const { data: products = [], isLoading } = useProducts(selectedCategory, searchQuery);\n\n  const sortedProducts = [...products].sort((a, b) => {\n    switch (sortBy) {\n      case 'price-low':\n        return Number(a.wholesalePrice) - Number(b.wholesalePrice);\n      case 'price-high':\n        return Number(b.wholesalePrice) - Number(a.wholesalePrice);\n      case 'name':\n      default:\n        return a.nameUz.localeCompare(b.nameUz);\n    }\n  });\n\n  // SEO meta-teglarni generate qilish\n  const catalogSEO = generateCatalogMetaTags();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <SEOHead seo={catalogSEO} />\n      \n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-page-title\">\n            Katalog\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\" data-testid=\"text-page-description\">\n            Barcha optom mahsulotlarni bir joydan ko'ring va o'zingizga keraklisini toping\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-400 w-5 h-5\" />\n                <Input\n                  placeholder=\"Mahsulot qidirish...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            {/* Category Filter */}\n            <div>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Kategoriya tanlang\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\" data-testid=\"option-all-categories\">Barcha kategoriyalar</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id} data-testid={`option-category-${category.id}`}>\n                      {language === 'uz' ? category.nameUz : category.nameRu}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Sort */}\n            <div>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Saralash\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\" data-testid=\"option-sort-name\">Nomi bo'yicha</SelectItem>\n                  <SelectItem value=\"price-low\" data-testid=\"option-sort-price-low\">Arzondan qimmgatga</SelectItem>\n                  <SelectItem value=\"price-high\" data-testid=\"option-sort-price-high\">Qimmatdan arzonga</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Results */}\n        <div className=\"mb-6\">\n          <p className=\"text-gray-600\" data-testid=\"text-results-count\">\n            {sortedProducts.length} ta mahsulot topildi\n          </p>\n        </div>\n\n        {/* Products Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {[...Array(12)].map((_, i) => (\n              <div key={i} className=\"bg-white border border-gray-200 rounded-xl p-6 animate-pulse\" data-testid={`skeleton-product-${i}`}>\n                <div className=\"w-full h-48 bg-gray-200 rounded-lg mb-4\"></div>\n                <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : sortedProducts.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"text-gray-400 text-lg mb-4\">\n              {searchQuery \n                ? `\"${searchQuery}\" bo'yicha hech narsa topilmadi`\n                : 'Mahsulotlar topilmadi'\n              }\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {sortedProducts.map((product) => (\n              <ProductCard \n                key={product.id} \n                product={product}\n                onAddToCart={(product) => {\n                  // TODO: Implement cart functionality\n                  console.log('Add to cart:', product);\n                }}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6179},"client/src/pages/categories.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\nimport { Footer } from '@/components/footer';\n\nimport { CategoryCard } from '@/components/category-card';\nimport { Category } from '@shared/schema';\nimport { useLocation } from 'wouter';\n\nexport default function Categories() {\n  const { t } = useLanguage();\n  const [, setLocation] = useLocation();\n\n  const { data: categories = [], isLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const handleCategoryClick = (category: Category) => {\n    setLocation(`/products?category=${category.id}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-page-title\">\n            {t('categories')}\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\" data-testid=\"text-page-description\">\n            {t('categoriesDescription')}\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-xl shadow-sm p-6 animate-pulse\" data-testid={`skeleton-category-${i}`}>\n                <div className=\"w-full h-32 bg-gray-200 rounded-lg mb-4\"></div>\n                <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n              </div>\n            ))}\n          </div>\n        ) : categories.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"text-gray-400 text-lg\">\n              {t('language') === 'uz' ? 'Kategoriyalar topilmadi' : '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {categories.map((category) => (\n              <CategoryCard \n                key={category.id} \n                category={category} \n                onClick={() => handleCategoryClick(category)}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2499},"client/src/pages/category-detail.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { Footer } from '@/components/footer';\nimport { ProductCard } from '@/components/product-card';\nimport { CategoryCard } from '@/components/category-card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Product, Category } from '@shared/schema';\nimport { Search } from 'lucide-react';\n\ninterface CategoryDetailProps {\n  params: {\n    slug: string;\n  };\n}\n\nexport default function CategoryDetail({ params }: CategoryDetailProps) {\n  const categorySlug = params.slug;\n  const { t, language } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n\n  // Get category by slug\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const currentCategory = categories.find(cat => cat.slug === categorySlug);\n  const subcategories = categories.filter(cat => cat.parentId === currentCategory?.id);\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products', { \n      search: searchQuery || undefined,\n      categoryId: currentCategory?.id || undefined \n    }],\n    enabled: !!currentCategory\n  });\n\n  const sortedProducts = [...products].sort((a, b) => {\n    switch (sortBy) {\n      case 'price-low':\n        return Number(a.wholesalePrice) - Number(b.wholesalePrice);\n      case 'price-high':\n        return Number(b.wholesalePrice) - Number(a.wholesalePrice);\n      case 'name':\n      default:\n        return a.nameUz.localeCompare(b.nameUz);\n    }\n  });\n\n  if (!currentCategory) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Kategoriya topilmadi</h1>\n          <p className=\"text-gray-600\">Ushbu kategoriya mavjud emas yoki o'chirilgan.</p>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const categoryName = language === 'uz' ? currentCategory.nameUz : currentCategory.nameRu;\n  const categoryDescription = language === 'uz' ? currentCategory.descriptionUz : currentCategory.descriptionRu;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Category Hero */}\n        <div className=\"bg-white rounded-xl shadow-sm p-8 mb-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-category-title\">\n                {categoryName}\n              </h1>\n              {categoryDescription && (\n                <p className=\"text-xl text-gray-600 mb-6\" data-testid=\"text-category-description\">\n                  {categoryDescription}\n                </p>\n              )}\n              <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                <span>{products.length} mahsulot</span>\n                <span>{subcategories.length} subcategory</span>\n              </div>\n            </div>\n            {currentCategory.image && (\n              <div className=\"lg:order-first\">\n                <img \n                  src={currentCategory.image} \n                  alt={categoryName}\n                  className=\"w-full h-64 object-cover rounded-lg\"\n                  data-testid=\"img-category-hero\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Subcategories */}\n        {subcategories.length > 0 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Sub-kategoriyalar</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {subcategories.map((subcategory) => (\n                <CategoryCard \n                  key={subcategory.id} \n                  category={subcategory}\n                  onClick={() => {\n                    // Navigate to subcategory\n                    window.location.href = `/category/${subcategory.slug}`;\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Search and Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Search */}\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                <Input\n                  placeholder=\"Mahsulot qidirish...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            {/* Sort */}\n            <div>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Saralash\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\" data-testid=\"option-sort-name\">Nomi bo'yicha</SelectItem>\n                  <SelectItem value=\"price-low\" data-testid=\"option-sort-price-low\">Arzondan qimmgatga</SelectItem>\n                  <SelectItem value=\"price-high\" data-testid=\"option-sort-price-high\">Qimmatdan arzonga</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Results */}\n        <div className=\"mb-6\">\n          <p className=\"text-gray-600\" data-testid=\"text-results-count\">\n            {sortedProducts.length} ta mahsulot topildi\n          </p>\n        </div>\n\n        {/* Products Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {[...Array(12)].map((_, i) => (\n              <div key={i} className=\"bg-white border border-gray-200 rounded-xl p-6 animate-pulse\" data-testid={`skeleton-product-${i}`}>\n                <div className=\"w-full h-48 bg-gray-200 rounded-lg mb-4\"></div>\n                <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : sortedProducts.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"text-gray-400 text-lg mb-4\">\n              {searchQuery \n                ? `\"${searchQuery}\" bo'yicha hech narsa topilmadi`\n                : 'Bu kategoriyada mahsulotlar topilmadi'\n              }\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {sortedProducts.map((product) => (\n              <ProductCard \n                key={product.id} \n                product={product}\n                onAddToCart={(product) => {\n                  // TODO: Implement cart functionality\n                  console.log('Add to cart:', product);\n                }}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7695},"client/src/pages/contact.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\nimport { Footer } from '@/components/footer';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Phone, Mail, MapPin, Clock } from 'lucide-react';\n\nexport default function Contact() {\n  const { t, language } = useLanguage();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    message: ''\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-session-id': localStorage.getItem('cart-session-id') || 'anonymous'\n        },\n        body: JSON.stringify(data)\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to submit contact form');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Xabar yuborildi\",\n        description: \"Tez orada siz bilan bog'lanamiz\",\n      });\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        company: '',\n        message: ''\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Xatolik yuz berdi\",\n        description: \"Iltimos, qaytadan urinib ko'ring\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-page-title\">\n            {t('contact')}\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\" data-testid=\"text-page-description\">\n            Biz bilan bog'lanish uchun quyidagi formani to'ldiring yoki to'g'ridan-to'g'ri aloqa ma'lumotlaridan foydalaning\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-form-title\">Bizga Xabar Yuboring</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      {t('name')} *\n                    </label>\n                    <Input\n                      required\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      placeholder=\"Ismingizni kiriting\"\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      {t('phone')} *\n                    </label>\n                    <Input\n                      required\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      placeholder=\"+998996448444\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      {t('email')}\n                    </label>\n                    <Input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      placeholder=\"email@example.com\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Kompaniya nomi\n                    </label>\n                    <Input\n                      value={formData.company}\n                      onChange={(e) => handleInputChange('company', e.target.value)}\n                      placeholder=\"Kompaniya nomini kiriting\"\n                      data-testid=\"input-company\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Xabar *\n                  </label>\n                  <Textarea\n                    required\n                    rows={6}\n                    value={formData.message}\n                    onChange={(e) => handleInputChange('message', e.target.value)}\n                    placeholder=\"Xabaringizni yozing...\"\n                    data-testid=\"textarea-message\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white dark:bg-blue-600 dark:hover:bg-blue-700\"\n                  disabled={contactMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {contactMutation.isPending ? 'Yuborilmoqda...' : 'Xabar Yuborish'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            {/* Contact Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle data-testid=\"text-contact-info-title\">{t('contactInfo')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <Phone className=\"w-6 h-6 text-primary mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Telefon</h3>\n                    <p className=\"text-gray-600\" data-testid=\"text-phone\">+998996448444</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <Mail className=\"w-6 h-6 text-primary mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Email</h3>\n                    <p className=\"text-gray-600\" data-testid=\"text-email\">akramjon2504@gmail.com</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <MapPin className=\"w-6 h-6 text-primary mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Manzil</h3>\n                    <p className=\"text-gray-600\" data-testid=\"text-address\">\n                      {t('address')}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <Clock className=\"w-6 h-6 text-primary mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Ish vaqti</h3>\n                    <p className=\"text-gray-600\">Dushanba - Juma: 9:00 - 18:00</p>\n                    <p className=\"text-gray-600\">Shanba: 9:00 - 15:00</p>\n                    <p className=\"text-gray-600\">Yakshanba: Dam olish</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Business Hours */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Wholesale Bo'limi</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-4\">\n                  Katta hajmdagi buyurtmalar va maxsus narxlar uchun bizning wholesale bo'limi bilan bog'laning.\n                </p>\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm\"><strong>Telegram:</strong> <a href=\"https://t.me/Akramjon1984\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:text-blue-800\">@Akramjon1984</a></p>\n                  <p className=\"text-sm\"><strong>WhatsApp:</strong> +998996448444</p>\n                  <p className=\"text-sm\"><strong>{language === 'uz' ? 'Minimal buyurtma' : '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑'}:</strong> 500,000 {t('currency')}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9239},"client/src/pages/home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\nimport { Footer } from '@/components/footer';\nimport { SEOHead } from '@/components/SEOHead';\nimport { DEFAULT_SEO } from '@shared/seo';\nimport { CategoryCard } from '@/components/category-card';\nimport { ProductCard } from '@/components/product-card';\nimport { Button } from '@/components/ui/button';\nimport { Category, Product } from '@shared/schema';\nimport { Link } from 'wouter';\nimport { PushNotificationSetup } from '@/components/PushNotificationSetup';\n\nexport default function Home() {\n  const { t, language } = useLanguage();\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: featuredProducts = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products/featured'],\n    staleTime: 0, // Always fetch fresh data\n    refetchOnWindowFocus: true, // Refetch when window gets focus\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const stats = [\n    { value: '1K+', label: t('productsCount') },\n    { value: '30+', label: t('sellers') },\n    { value: '100+', label: t('customers') },\n    { value: '24/7', label: t('support') },\n  ];\n\n  // Home sahifasi uchun asosiy SEO\n  const homeSEO = DEFAULT_SEO;\n\n  const features = [\n    {\n      icon: (\n        <div className=\"text-6xl mb-2\">üí∞</div>\n      ),\n      titleUz: \"Eng Arzon Narxlar\",\n      titleRu: \"–°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã\",\n      descriptionUz: \"To'g'ridan-to'g'ri ishlab chiqaruvchilardan optom narxlarda xarid qiling\",\n      descriptionRu: \"–ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –æ–ø—Ç–æ–≤—ã–º —Ü–µ–Ω–∞–º\"\n    },\n    {\n      icon: (\n        <div className=\"text-6xl mb-2\">‚úÖ</div>\n      ),\n      titleUz: \"Sifat Kafolati\",\n      titleRu: \"–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\",\n      descriptionUz: \"Barcha mahsulotlar sertifikatlangan va 100% sifat kafolati bilan\",\n      descriptionRu: \"–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ 100%\"\n    },\n    {\n      icon: (\n        <div className=\"text-6xl mb-2\">üöö</div>\n      ),\n      titleUz: \"Tez Yetkazib Berish\",\n      titleRu: \"–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\",\n      descriptionUz: \"O'zbekiston bo'ylab 1-3 kun ichida tez va ishonchli yetkazib berish\",\n      descriptionRu: \"–ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—É –∑–∞ 1-3 –¥–Ω—è\"\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-black\">\n      <SEOHead seo={homeSEO} />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-blue-900 via-blue-800 to-red-800 dark:from-blue-800 dark:via-blue-700 dark:to-red-700 text-white py-32 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600/30 to-red-600/30\"></div>\n        \n        {/* Enhanced animated background elements */}\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-blue-400/20 rounded-full animate-float\"></div>\n        <div className=\"absolute bottom-20 right-20 w-24 h-24 bg-red-400/20 rounded-full animate-bounce-slow\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-16 h-16 bg-blue-400/20 rounded-full animate-pulse-slow\"></div>\n        <div className=\"absolute top-1/3 right-1/3 w-20 h-20 bg-purple-400/20 rounded-full animate-float\" style={{animationDelay: '2s'}}></div>\n        <div className=\"absolute bottom-1/3 left-1/2 w-12 h-12 bg-yellow-400/20 rounded-full animate-ping\" style={{animationDelay: '1s'}}></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-5xl lg:text-7xl font-extrabold leading-tight mb-6 bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n                Optombazar.uz\n              </h1>\n              <p className=\"text-2xl lg:text-3xl font-light mb-4 text-blue-100\">\n                {t('heroTitle')}\n              </p>\n              <p className=\"text-xl text-gray-200 mb-8 leading-relaxed\" data-testid=\"text-hero-description\">\n                {t('heroDescription')}\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-6\">\n                <Link href=\"/catalog\">\n                  <button className=\"bg-gradient-to-r from-blue-600 to-red-500 text-white px-10 py-4 rounded-2xl font-bold text-lg hover:from-blue-700 hover:to-red-600 transition-all duration-300 transform hover:scale-105 shadow-2xl\" data-testid=\"button-view-catalog\">\n                    {t('viewProducts')}\n                  </button>\n                </Link>\n                <Link href=\"/contact\">\n                  <button className=\"border-2 border-white/60 text-white px-10 py-4 rounded-2xl font-bold text-lg hover:bg-red-500 hover:text-white hover:border-red-500 transition-all duration-300 backdrop-blur-sm\" data-testid=\"button-become-seller\">\n                    {t('becomeSeller')}\n                  </button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"relative\">\n              {/* Background decorative elements */}\n              <div className=\"absolute -inset-4 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-red-600/20 rounded-3xl blur-xl animate-pulse-slow\"></div>\n              \n              <div className=\"relative glass rounded-3xl p-8 border border-white/30 shadow-modern backdrop-blur-xl\">\n                <div className=\"grid grid-cols-2 gap-6\">\n                  {/* Products Card */}\n                  <div className=\"group relative bg-gradient-to-br from-blue-500/40 to-blue-600/40 rounded-2xl p-6 backdrop-blur-sm border border-white/30 transform hover:scale-110 hover:rotate-1 transition-all duration-500 hover:shadow-glow overflow-hidden\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400/20 to-transparent rounded-2xl\"></div>\n                    <div className=\"absolute top-2 right-2 w-8 h-8 bg-blue-400/30 rounded-full animate-ping\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"text-4xl font-black mb-2 bg-gradient-to-r from-white via-blue-100 to-white bg-clip-text text-transparent drop-shadow-sm\">1K+</div>\n                      <div className=\"text-sm font-medium opacity-90 text-blue-50 group-hover:text-white transition-colors\">{t('productsCount')}</div>\n                    </div>\n                  </div>\n\n                  {/* Sellers Card */}\n                  <div className=\"group relative bg-gradient-to-br from-red-500/40 to-red-600/40 rounded-2xl p-6 backdrop-blur-sm border border-white/30 transform hover:scale-110 hover:-rotate-1 transition-all duration-500 hover:shadow-glow overflow-hidden\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-red-400/20 to-transparent rounded-2xl\"></div>\n                    <div className=\"absolute top-2 right-2 w-6 h-6 bg-red-400/30 rounded-full animate-bounce\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"text-4xl font-black mb-2 bg-gradient-to-r from-white via-red-100 to-white bg-clip-text text-transparent drop-shadow-sm\">30+</div>\n                      <div className=\"text-sm font-medium opacity-90 text-red-50 group-hover:text-white transition-colors\">{t('sellers')}</div>\n                    </div>\n                  </div>\n\n                  {/* Customers Card */}\n                  <div className=\"group relative bg-gradient-to-br from-purple-500/40 to-pink-600/40 rounded-2xl p-6 backdrop-blur-sm border border-white/30 transform hover:scale-110 hover:rotate-1 transition-all duration-500 hover:shadow-glow overflow-hidden\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-purple-400/20 to-transparent rounded-2xl\"></div>\n                    <div className=\"absolute top-2 right-2 w-7 h-7 bg-purple-400/30 rounded-full animate-pulse\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"text-4xl font-black mb-2 bg-gradient-to-r from-white via-purple-100 to-white bg-clip-text text-transparent drop-shadow-sm\">100+</div>\n                      <div className=\"text-sm font-medium opacity-90 text-purple-50 group-hover:text-white transition-colors\">{t('customers')}</div>\n                    </div>\n                  </div>\n\n                  {/* Support Card */}\n                  <div className=\"group relative bg-gradient-to-br from-yellow-500/40 to-orange-600/40 rounded-2xl p-6 backdrop-blur-sm border border-white/30 transform hover:scale-110 hover:-rotate-1 transition-all duration-500 hover:shadow-glow overflow-hidden\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-400/20 to-transparent rounded-2xl\"></div>\n                    <div className=\"absolute top-2 right-2 w-5 h-5 bg-yellow-400/30 rounded-full animate-ping\" style={{animationDelay: '1s'}}></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"text-4xl font-black mb-2 bg-gradient-to-r from-white via-yellow-100 to-white bg-clip-text text-transparent drop-shadow-sm\">24/7</div>\n                      <div className=\"text-sm font-medium opacity-90 text-yellow-50 group-hover:text-white transition-colors\">{t('support')}</div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Floating particles effect */}\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-white/20 rounded-full animate-float\"></div>\n                  <div className=\"absolute top-3/4 right-1/4 w-1 h-1 bg-white/30 rounded-full animate-float\" style={{animationDelay: '2s'}}></div>\n                  <div className=\"absolute bottom-1/4 left-3/4 w-1.5 h-1.5 bg-white/25 rounded-full animate-float\" style={{animationDelay: '3s'}}></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Ommabop Mahsulotlar Section */}\n      <section className=\"bg-background dark:bg-gray-900 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">\n              {language === 'uz' ? 'Ommabop Mahsulotlar' : '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¢–æ–≤–∞—Ä—ã'}\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              {language === 'uz' ? \n                'Eng ko\\'p sotib olinayotgan mahsulotlarimiz bilan tanishing' : \n                '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —Å–∞–º—ã–º–∏ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏'\n              }\n            </p>\n          </div>\n          \n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"bg-card dark:bg-gray-800 rounded-2xl p-6 shadow-lg animate-pulse border border-border\" data-testid={`skeleton-featured-${i}`}>\n                  <div className=\"w-full h-48 bg-gray-200 dark:bg-gray-700 rounded-xl mb-4\"></div>\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4\"></div>\n                  <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : featuredProducts.length > 0 ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {featuredProducts.map((product) => (\n                <ProductCard \n                  key={product.id} \n                  product={product}\n                  onAddToCart={(product) => {\n                    console.log('Add to cart:', product);\n                  }}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground text-lg\">\n                {language === 'uz' ? \n                  'Hozircha ommabop mahsulotlar yo\\'q' : \n                  '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'\n                }\n              </p>\n            </div>\n          )}\n          \n          {featuredProducts.length > 0 && (\n            <div className=\"text-center mt-12\">\n              <Link href=\"/catalog\">\n                <button className=\"bg-gradient-to-r from-blue-600 to-red-500 hover:from-blue-700 hover:to-red-600 text-white px-8 py-3 rounded-xl font-semibold text-lg transition-all duration-300 transform hover:scale-105 shadow-lg\">\n                  {language === 'uz' ? 'Barcha mahsulotlar' : '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'}\n                </button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Categories Section */}\n      <section className=\"bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl mb-6\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n              </svg>\n            </div>\n            <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\" data-testid=\"text-categories-title\">\n              {t('mainCategories')}\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed\" data-testid=\"text-categories-description\">\n              {language === 'uz' ? 'Bizning eng mashhur mahsulot toifalarimiz bilan tanishing va kerakli mahsulotni oson toping' : '–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ª–µ–≥–∫–æ –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç'}\n            </p>\n          </div>\n\n          {categoriesLoading ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n              {[...Array(10)].map((_, i) => (\n                <div key={i} className=\"bg-white dark:bg-gray-800 rounded-3xl p-8 animate-pulse shadow-lg border border-gray-100 dark:border-gray-700\" data-testid={`skeleton-category-${i}`}>\n                  <div className=\"w-16 h-16 mx-auto mb-4 bg-gray-200 dark:bg-gray-700 rounded-2xl\"></div>\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2 mx-auto w-24\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-16 mx-auto\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n              {categories.slice(0, 10).map((category, index) => {\n                const categoryColors = [\n                  'from-blue-500 to-blue-600',\n                  'from-emerald-500 to-emerald-600', \n                  'from-purple-500 to-purple-600',\n                  'from-orange-500 to-orange-600',\n                  'from-pink-500 to-pink-600',\n                  'from-indigo-500 to-indigo-600',\n                  'from-teal-500 to-teal-600',\n                  'from-red-500 to-red-600',\n                  'from-yellow-500 to-yellow-600',\n                  'from-cyan-500 to-cyan-600'\n                ];\n                const categoryIcons = [\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 21l4-4 4 4\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m3 0H4a1 1 0 00-1 1v16a1 1 0 001 1h16a1 1 0 001-1V5a1 1 0 00-1-1z\" /></svg>,\n                  <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3\" /></svg>\n                ];\n                \n                const colorClass = categoryColors[index % categoryColors.length];\n                const IconComponent = categoryIcons[index % categoryIcons.length];\n                \n                return (\n                  <div \n                    key={category.id}\n                    className=\"group bg-white dark:bg-gray-800 rounded-3xl p-8 hover:shadow-xl transition-all duration-500 cursor-pointer transform hover:scale-105 hover:-translate-y-2 shadow-lg border border-gray-100 dark:border-gray-700 hover:border-gray-200 dark:hover:border-gray-600 relative overflow-hidden\"\n                    onClick={() => window.location.href = `/category/${category.slug}`}\n                    data-testid={`category-card-${category.id}`}\n                  >\n                    {/* Background glow effect */}\n                    <div className={`absolute inset-0 bg-gradient-to-br ${colorClass} opacity-0 group-hover:opacity-5 transition-opacity duration-500 rounded-3xl`}></div>\n                    \n                    <div className=\"relative z-10 text-center\">\n                      {/* Icon */}\n                      <div className={`w-16 h-16 mx-auto mb-6 flex items-center justify-center bg-gradient-to-br ${colorClass} rounded-2xl text-white transform group-hover:scale-110 group-hover:rotate-3 transition-all duration-500 shadow-lg`}>\n                        {IconComponent}\n                      </div>\n                      \n                      {/* Title */}\n                      <h3 className=\"text-lg font-bold text-gray-900 dark:text-white mb-2 line-clamp-2 leading-tight group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300\" data-testid={`text-category-name-${category.id}`}>\n                        {language === 'uz' ? category.nameUz : category.nameRu}\n                      </h3>\n                      \n                      {/* Description */}\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4 line-clamp-2\">\n                        {language === 'uz' ? category.descriptionUz || 'Turli xil mahsulotlar' : category.descriptionRu || '–†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'}\n                      </p>\n                      \n                      {/* Action button */}\n                      <div className=\"inline-flex items-center text-sm font-semibold text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300 transition-colors duration-300\">\n                        {t('viewMore')}\n                        <svg className=\"w-4 h-4 ml-2 transform group-hover:translate-x-1 transition-transform duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          <div className=\"text-center mt-16\">\n            <Link href=\"/categories\">\n              <button className=\"inline-flex items-center px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-2xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl\">\n                {language === 'uz' ? 'Barcha kategoriyalarni ko\\'rish' : '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n                <svg className=\"w-5 h-5 ml-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"bg-background dark:bg-gray-900 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-12\">\n            <div>\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-featured-title\">\n                {t('featuredProducts')}\n              </h2>\n              <p className=\"text-xl text-muted-foreground\" data-testid=\"text-featured-description\">\n                {t('featuredDescription')}\n              </p>\n            </div>\n            <Link href=\"/products\" className=\"hidden md:block\">\n              <Button variant=\"ghost\" className=\"text-primary font-semibold hover:text-blue-600 dark:hover:text-blue-400\" data-testid=\"button-view-all-products\">\n                {t('viewAll')} ‚Üí\n              </Button>\n            </Link>\n          </div>\n\n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-card dark:bg-gray-800 border border-border rounded-xl p-6 animate-pulse\" data-testid={`skeleton-product-${i}`}>\n                  <div className=\"w-full h-48 bg-gray-200 dark:bg-gray-700 rounded-lg mb-4\"></div>\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4\"></div>\n                  <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {featuredProducts.map((product) => (\n                <ProductCard \n                  key={product.id} \n                  product={product}\n                  onAddToCart={(product) => {\n                    // TODO: Implement cart functionality\n                    console.log('Add to cart:', product);\n                  }}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Bizning Afzalliklarimiz */}\n      <section className=\"bg-gray-50 dark:bg-gray-800 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">\n              {language === 'uz' ? 'Bizning Afzalliklarimiz' : '–ù–∞—à–∏ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞'}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              {language === 'uz' ? \n                'Nima uchun aynan Optombazar.uz ni tanlashingiz kerak' : \n                '–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ Optombazar.uz'\n              }\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <div key={index} className=\"group bg-card/80 dark:bg-gray-700/80 backdrop-blur-sm rounded-xl p-8 text-center shadow-modern hover:shadow-glow transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 border border-border/50 hover:border-blue-400/50\" data-testid={`feature-${index}`}>\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-red-100 dark:from-blue-900/30 dark:to-red-900/30 rounded-full flex items-center justify-center mx-auto mb-6 text-3xl group-hover:scale-110 transition-transform duration-300 shadow-lg group-hover:shadow-glow\">\n                  {feature.icon}\n                </div>\n                <h3 className=\"text-xl font-semibold text-card-foreground mb-4 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300\" data-testid={`text-feature-title-${index}`}>\n                  {language === 'uz' ? feature.titleUz : feature.titleRu}\n                </h3>\n                <p className=\"text-muted-foreground group-hover:text-foreground transition-colors duration-300\" data-testid={`text-feature-description-${index}`}>\n                  {language === 'uz' ? feature.descriptionUz : feature.descriptionRu}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact CTA */}\n      <section className=\"bg-gradient-to-br from-blue-900 via-blue-800 to-red-800 dark:from-blue-800 dark:via-blue-700 dark:to-red-700 py-20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-white mb-6\" data-testid=\"text-cta-title\">\n            {t('businessPartner')}\n          </h2>\n          <p className=\"text-xl text-white mb-10 max-w-3xl mx-auto leading-relaxed\" data-testid=\"text-cta-description\">\n            {t('ctaDescription')}\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" className=\"bg-white text-blue-900 hover:bg-gray-50 px-8 py-4 text-lg font-bold rounded-2xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl\" data-testid=\"button-register-now\">\n                {t('registerNow')}\n              </Button>\n            </Link>\n            <Link href=\"/contact\">\n              <Button variant=\"outline\" size=\"lg\" className=\"border-2 border-white text-white hover:bg-white hover:text-blue-900 px-8 py-4 text-lg font-bold rounded-2xl transition-all duration-300 transform hover:scale-105\" data-testid=\"button-contact-us\">\n                {t('contactUs')}\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Push Notification Setup */}\n      <section className=\"bg-background dark:bg-gray-900 py-12\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <PushNotificationSetup autoRequest={true} />\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":29404},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"flex items-center justify-center py-20\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex mb-4 gap-2\">\n              <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n            </div>\n\n            <p className=\"mt-4 text-sm text-gray-600\">\n              Did you forget to add the page to the router?\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":885},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { Footer } from '@/components/footer';\nimport { ProductCard } from '@/components/product-card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Product, Category } from '@shared/schema';\nimport { Search } from 'lucide-react';\n\nexport default function Products() {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [sortBy, setSortBy] = useState('name');\n\n  // Get category from URL params if available\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const categoryParam = params.get('category');\n    if (categoryParam) {\n      setSelectedCategory(categoryParam);\n    }\n  }, []);\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products', searchQuery, selectedCategory],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.set('search', searchQuery);\n      if (selectedCategory && selectedCategory !== 'all') params.set('categoryId', selectedCategory);\n      \n      const response = await fetch(`/api/products?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      return response.json();\n    },\n  });\n\n  const handleSearch = () => {\n    // The query will automatically refetch when searchQuery changes\n  };\n\n  const sortedProducts = [...products].sort((a, b) => {\n    switch (sortBy) {\n      case 'price-low':\n        return Number(a.wholesalePrice) - Number(b.wholesalePrice);\n      case 'price-high':\n        return Number(b.wholesalePrice) - Number(a.wholesalePrice);\n      case 'name':\n      default:\n        return a.nameUz.localeCompare(b.nameUz);\n    }\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-page-title\">\n            {t('products')}\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\" data-testid=\"text-page-description\">\n            {selectedCategory \n              ? `${categories.find(c => c.id === selectedCategory)?.nameUz || ''} kategoriyasidagi mahsulotlar`\n              : 'Barcha optom mahsulotlarni ko\\'ring'\n            }\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                <Input\n                  placeholder={t('searchPlaceholder')}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            {/* Category Filter */}\n            <div>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Kategoriya tanlang\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\" data-testid=\"option-all-categories\">Barcha kategoriyalar</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id} data-testid={`option-category-${category.id}`}>\n                      {category.nameUz}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Sort */}\n            <div>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Saralash\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\" data-testid=\"option-sort-name\">Nomi bo'yicha</SelectItem>\n                  <SelectItem value=\"price-low\" data-testid=\"option-sort-price-low\">Arzondan qimmgatga</SelectItem>\n                  <SelectItem value=\"price-high\" data-testid=\"option-sort-price-high\">Qimmatdan arzonga</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Results */}\n        <div className=\"mb-6\">\n          <p className=\"text-gray-600\" data-testid=\"text-results-count\">\n            {sortedProducts.length} ta mahsulot topildi\n          </p>\n        </div>\n\n        {/* Products Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {[...Array(12)].map((_, i) => (\n              <div key={i} className=\"bg-white border border-gray-200 rounded-xl p-6 animate-pulse\" data-testid={`skeleton-product-${i}`}>\n                <div className=\"w-full h-48 bg-gray-200 rounded-lg mb-4\"></div>\n                <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : sortedProducts.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"text-gray-400 text-lg mb-4\">\n              {searchQuery \n                ? `\"${searchQuery}\" bo'yicha hech narsa topilmadi`\n                : 'Mahsulotlar topilmadi'\n              }\n            </div>\n            {searchQuery && (\n              <Button onClick={() => setSearchQuery('')} variant=\"outline\" data-testid=\"button-clear-search\">\n                Qidiruvni tozalash\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {sortedProducts.map((product) => (\n              <ProductCard \n                key={product.id} \n                product={product}\n                onAddToCart={(product) => {\n                  // TODO: Implement cart functionality\n                  console.log('Add to cart:', product);\n                }}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7171},"client/src/utils/marketing.ts":{"content":"// Marketing utility functions\n\n// UTM parameter tracking\nexport const getUtmParameters = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return {\n    utm_source: urlParams.get('utm_source'),\n    utm_medium: urlParams.get('utm_medium'),\n    utm_campaign: urlParams.get('utm_campaign'),\n    utm_term: urlParams.get('utm_term'),\n    utm_content: urlParams.get('utm_content'),\n  };\n};\n\n// Save UTM parameters to localStorage for session tracking\nexport const saveUtmParameters = () => {\n  const utmParams = getUtmParameters();\n  const hasUtmParams = Object.values(utmParams).some(param => param !== null);\n  \n  if (hasUtmParams) {\n    localStorage.setItem('utm_params', JSON.stringify({\n      ...utmParams,\n      timestamp: new Date().toISOString(),\n      page_url: window.location.href,\n      referrer: document.referrer\n    }));\n  }\n};\n\n// Get saved UTM parameters\nexport const getSavedUtmParameters = () => {\n  const saved = localStorage.getItem('utm_params');\n  return saved ? JSON.parse(saved) : null;\n};\n\n// Track UTM parameters to backend\nexport const trackUtmParameters = async () => {\n  const utmParams = getUtmParameters();\n  const hasUtmParams = Object.values(utmParams).some(param => param !== null);\n  \n  if (hasUtmParams) {\n    try {\n      await fetch('/api/marketing/track-utm', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...utmParams,\n          page_url: window.location.href,\n          referrer: document.referrer,\n          user_agent: navigator.userAgent,\n          timestamp: new Date().toISOString()\n        })\n      });\n    } catch (error) {\n      console.error('UTM tracking error:', error);\n    }\n  }\n};\n\n// Ad platform detection\nexport const detectAdPlatform = () => {\n  const referrer = document.referrer;\n  const urlParams = new URLSearchParams(window.location.search);\n  const utm_source = urlParams.get('utm_source');\n  \n  if (utm_source) {\n    return utm_source.toLowerCase();\n  }\n  \n  if (referrer.includes('google.com') || referrer.includes('googleadservices.com')) {\n    return 'google';\n  }\n  \n  if (referrer.includes('facebook.com') || referrer.includes('fb.com')) {\n    return 'facebook';\n  }\n  \n  if (referrer.includes('instagram.com')) {\n    return 'instagram';\n  }\n  \n  if (referrer.includes('t.co') || referrer.includes('twitter.com')) {\n    return 'twitter';\n  }\n  \n  return 'direct';\n};\n\n// Generate unique session ID for marketing tracking\nexport const generateSessionId = () => {\n  let sessionId = localStorage.getItem('marketing_session_id');\n  \n  if (!sessionId) {\n    sessionId = 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    localStorage.setItem('marketing_session_id', sessionId);\n  }\n  \n  return sessionId;\n};\n\n// Track marketing conversion\nexport const trackMarketingConversion = async (\n  conversionType: string, \n  value?: number, \n  orderId?: string\n) => {\n  const utmParams = getSavedUtmParameters();\n  const sessionId = generateSessionId();\n  \n  try {\n    await fetch('/api/marketing/track-event', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        eventType: 'conversion',\n        eventData: {\n          conversionType,\n          value,\n          orderId,\n          utm_params: utmParams,\n          ad_platform: detectAdPlatform(),\n          page_url: window.location.href\n        },\n        sessionId,\n        timestamp: new Date().toISOString()\n      })\n    });\n  } catch (error) {\n    console.error('Conversion tracking error:', error);\n  }\n};\n\n// Landing page performance tracking\nexport const trackLandingPage = async () => {\n  const utmParams = getUtmParameters();\n  const hasUtmParams = Object.values(utmParams).some(param => param !== null);\n  \n  if (hasUtmParams) {\n    const sessionId = generateSessionId();\n    \n    try {\n      await fetch('/api/marketing/track-event', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          eventType: 'landing_page_view',\n          eventData: {\n            utm_params: utmParams,\n            ad_platform: detectAdPlatform(),\n            page_url: window.location.href,\n            referrer: document.referrer,\n            load_time: performance.now()\n          },\n          sessionId,\n          timestamp: new Date().toISOString()\n        })\n      });\n    } catch (error) {\n      console.error('Landing page tracking error:', error);\n    }\n  }\n};\n\n// Initialize marketing tracking on page load\nexport const initializeMarketingTracking = () => {\n  // Save UTM parameters\n  saveUtmParameters();\n  \n  // Track UTM parameters\n  trackUtmParameters();\n  \n  // Track landing page if from ad\n  trackLandingPage();\n};\n\n// Clean up old marketing data (call periodically)\nexport const cleanupMarketingData = () => {\n  const saved = localStorage.getItem('utm_params');\n  if (saved) {\n    const data = JSON.parse(saved);\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    \n    if (new Date(data.timestamp) < sevenDaysAgo) {\n      localStorage.removeItem('utm_params');\n    }\n  }\n};\n\n// A/B testing utilities\nexport const getABTestVariant = (testName: string, variants: string[]) => {\n  const userId = localStorage.getItem('user_id') || generateSessionId();\n  const hash = simpleHash(testName + userId);\n  const variantIndex = hash % variants.length;\n  \n  // Save variant for consistency\n  localStorage.setItem(`ab_test_${testName}`, variants[variantIndex]);\n  \n  return variants[variantIndex];\n};\n\n// Simple hash function for A/B testing\nconst simpleHash = (str: string) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash);\n};\n\n// Track A/B test conversion\nexport const trackABTestConversion = async (testName: string, conversionEvent: string) => {\n  const variant = localStorage.getItem(`ab_test_${testName}`);\n  const userId = localStorage.getItem('user_id') || generateSessionId();\n  \n  if (variant) {\n    try {\n      await fetch('/api/marketing/track-ab-test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          testName,\n          variant,\n          userId,\n          conversionEvent,\n          timestamp: new Date().toISOString()\n        })\n      });\n    } catch (error) {\n      console.error('A/B test tracking error:', error);\n    }\n  }\n};","size_bytes":6660},"server/routes/admin/reports.ts":{"content":"import { type Express, type Request, type Response } from \"express\";\nimport { IStorage } from \"../../storage\";\nimport { adminAuth } from \"../../middleware/adminAuth\";\n\nexport interface ReportsSummary {\n  totalUsers: number;\n  totalOrders: number;\n  totalRevenue: number;\n  popularProducts: Array<{\n    id: string;\n    name: string;\n    views: number;\n    orders: number;\n    revenue: number;\n  }>;\n  recentActivity: number;\n}\n\nexport interface UserActivityReport {\n  dailyVisits: Array<{ date: string; visits: number; uniqueUsers: number }>;\n  weeklyStats: Array<{ week: string; visits: number; registrations: number }>;\n  monthlyStats: Array<{ month: string; visits: number; registrations: number }>;\n}\n\nexport interface SalesReport {\n  dailySales: Array<{ date: string; orders: number; revenue: number }>;\n  topProducts: Array<{\n    id: string;\n    name: string;\n    orders: number;\n    revenue: number;\n    category: string;\n  }>;\n  topCategories: Array<{\n    id: string;\n    name: string;\n    orders: number;\n    revenue: number;\n  }>;\n}\n\nexport interface PopularProductsReport {\n  mostViewed: Array<{\n    id: string;\n    name: string;\n    views: number;\n    category: string;\n  }>;\n  mostAddedToCart: Array<{\n    id: string;\n    name: string;\n    cartAdds: number;\n    category: string;\n  }>;\n  mostOrdered: Array<{\n    id: string;\n    name: string;\n    orders: number;\n    revenue: number;\n    category: string;\n  }>;\n}\n\nexport interface SearchTermsReport {\n  topSearches: Array<{\n    term: string;\n    count: number;\n    resultsAvg: number;\n  }>;\n  noResultSearches: Array<{\n    term: string;\n    count: number;\n  }>;\n  recentSearches: Array<{\n    term: string;\n    timestamp: string;\n    results: number;\n  }>;\n}\n\nexport function registerReportsRoutes(app: Express, storage: IStorage) {\n  // General reports summary\n  app.get(\"/api/admin/reports/summary\", adminAuth, async (req: Request, res: Response) => {\n    try {\n      const users: any[] = []; // Note: getUsers method needs to be implemented in IStorage\n      const orders = await storage.getAllOrders();\n      const products = await storage.getProducts();\n      \n      // Calculate total revenue\n      const totalRevenue = orders.reduce((sum, order) => \n        sum + parseFloat(order.totalAmount.toString()), 0\n      );\n\n      // Get user activities for recent activity count\n      const activities = storage.getUserActivities ? \n        await storage.getUserActivities({\n          dateFrom: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // Last 7 days\n          limit: 1000\n        }) : [];\n\n      // Get popular products based on activities\n      const productViews = new Map<string, number>();\n      const productOrders = new Map<string, number>();\n      const productRevenue = new Map<string, number>();\n\n      activities.forEach(activity => {\n        if (activity.activityType === 'product_view' && activity.targetId) {\n          productViews.set(activity.targetId, (productViews.get(activity.targetId) || 0) + 1);\n        }\n      });\n\n      // Get order statistics per product\n      for (const order of orders) {\n        const orderItems = await storage.getOrderItems(order.id);\n        for (const item of orderItems) {\n          productOrders.set(item.productId, (productOrders.get(item.productId) || 0) + item.quantity);\n          productRevenue.set(item.productId, \n            (productRevenue.get(item.productId) || 0) + parseFloat(item.totalPrice.toString())\n          );\n        }\n      }\n\n      // Create popular products list\n      const popularProducts = products\n        .map(product => ({\n          id: product.id,\n          name: product.nameUz,\n          views: productViews.get(product.id) || 0,\n          orders: productOrders.get(product.id) || 0,\n          revenue: productRevenue.get(product.id) || 0\n        }))\n        .sort((a, b) => (b.views + b.orders) - (a.views + a.orders))\n        .slice(0, 5);\n\n      const summary: ReportsSummary = {\n        totalUsers: users.length,\n        totalOrders: orders.length,\n        totalRevenue,\n        popularProducts,\n        recentActivity: activities.length\n      };\n\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error generating reports summary:\", error);\n      res.status(500).json({ message: \"Failed to generate reports summary\" });\n    }\n  });\n\n  // User activity report\n  app.get(\"/api/admin/reports/user-activity\", adminAuth, async (req: Request, res: Response) => {\n    try {\n      const activities = storage.getUserActivities ? \n        await storage.getUserActivities({\n          dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n          limit: 10000\n        }) : [];\n\n      // Group activities by date\n      const dailyStats = new Map<string, { visits: number; users: Set<string> }>();\n      const weeklyStats = new Map<string, { visits: number; registrations: number }>();\n      const monthlyStats = new Map<string, { visits: number; registrations: number }>();\n\n      activities.forEach(activity => {\n        const date = new Date(activity.timestamp || '').toISOString().split('T')[0];\n        const week = getWeekString(new Date(activity.timestamp || ''));\n        const month = getMonthString(new Date(activity.timestamp || ''));\n\n        // Daily stats\n        if (!dailyStats.has(date)) {\n          dailyStats.set(date, { visits: 0, users: new Set() });\n        }\n        const dayData = dailyStats.get(date)!;\n        dayData.visits++;\n        if (activity.userId) dayData.users.add(activity.userId);\n\n        // Weekly stats\n        if (!weeklyStats.has(week)) {\n          weeklyStats.set(week, { visits: 0, registrations: 0 });\n        }\n        weeklyStats.get(week)!.visits++;\n        if (activity.activityType === 'register') {\n          weeklyStats.get(week)!.registrations++;\n        }\n\n        // Monthly stats\n        if (!monthlyStats.has(month)) {\n          monthlyStats.set(month, { visits: 0, registrations: 0 });\n        }\n        monthlyStats.get(month)!.visits++;\n        if (activity.activityType === 'register') {\n          monthlyStats.get(month)!.registrations++;\n        }\n      });\n\n      const report: UserActivityReport = {\n        dailyVisits: Array.from(dailyStats.entries())\n          .map(([date, data]) => ({\n            date,\n            visits: data.visits,\n            uniqueUsers: data.users.size\n          }))\n          .sort((a, b) => a.date.localeCompare(b.date)),\n        weeklyStats: Array.from(weeklyStats.entries())\n          .map(([week, data]) => ({\n            week,\n            visits: data.visits,\n            registrations: data.registrations\n          }))\n          .sort((a, b) => a.week.localeCompare(b.week)),\n        monthlyStats: Array.from(monthlyStats.entries())\n          .map(([month, data]) => ({\n            month,\n            visits: data.visits,\n            registrations: data.registrations\n          }))\n          .sort((a, b) => a.month.localeCompare(b.month))\n      };\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating user activity report:\", error);\n      res.status(500).json({ message: \"Failed to generate user activity report\" });\n    }\n  });\n\n  // Sales report\n  app.get(\"/api/admin/reports/sales\", adminAuth, async (req: Request, res: Response) => {\n    try {\n      const orders = await storage.getAllOrders();\n      const products = await storage.getProducts();\n      const categories = await storage.getCategories();\n\n      // Group sales by date\n      const dailySales = new Map<string, { orders: number; revenue: number }>();\n      const productSales = new Map<string, { orders: number; revenue: number }>();\n      const categorySales = new Map<string, { orders: number; revenue: number }>();\n\n      for (const order of orders) {\n        const date = new Date(order.createdAt || '').toISOString().split('T')[0];\n        \n        if (!dailySales.has(date)) {\n          dailySales.set(date, { orders: 0, revenue: 0 });\n        }\n        const dayData = dailySales.get(date)!;\n        dayData.orders++;\n        dayData.revenue += parseFloat(order.totalAmount.toString());\n\n        // Get order items for product/category breakdown\n        const orderItems = await storage.getOrderItems(order.id);\n        for (const item of orderItems) {\n          // Product sales\n          if (!productSales.has(item.productId)) {\n            productSales.set(item.productId, { orders: 0, revenue: 0 });\n          }\n          const productData = productSales.get(item.productId)!;\n          productData.orders += item.quantity;\n          productData.revenue += parseFloat(item.totalPrice.toString());\n\n          // Category sales\n          const product = products.find(p => p.id === item.productId);\n          if (product) {\n            if (!categorySales.has(product.categoryId)) {\n              categorySales.set(product.categoryId, { orders: 0, revenue: 0 });\n            }\n            const categoryData = categorySales.get(product.categoryId)!;\n            categoryData.orders += item.quantity;\n            categoryData.revenue += parseFloat(item.totalPrice.toString());\n          }\n        }\n      }\n\n      // Top products\n      const topProducts = Array.from(productSales.entries())\n        .map(([productId, data]) => {\n          const product = products.find(p => p.id === productId);\n          const category = categories.find(c => c.id === product?.categoryId);\n          return {\n            id: productId,\n            name: product?.nameUz || 'Unknown Product',\n            orders: data.orders,\n            revenue: data.revenue,\n            category: category?.nameUz || 'Unknown Category'\n          };\n        })\n        .sort((a, b) => b.revenue - a.revenue)\n        .slice(0, 10);\n\n      // Top categories\n      const topCategories = Array.from(categorySales.entries())\n        .map(([categoryId, data]) => {\n          const category = categories.find(c => c.id === categoryId);\n          return {\n            id: categoryId,\n            name: category?.nameUz || 'Unknown Category',\n            orders: data.orders,\n            revenue: data.revenue\n          };\n        })\n        .sort((a, b) => b.revenue - a.revenue)\n        .slice(0, 5);\n\n      const report: SalesReport = {\n        dailySales: Array.from(dailySales.entries())\n          .map(([date, data]) => ({\n            date,\n            orders: data.orders,\n            revenue: data.revenue\n          }))\n          .sort((a, b) => a.date.localeCompare(b.date)),\n        topProducts,\n        topCategories\n      };\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating sales report:\", error);\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  // Popular products report\n  app.get(\"/api/admin/reports/popular-products\", adminAuth, async (req: Request, res: Response) => {\n    try {\n      const activities = storage.getUserActivities ? \n        await storage.getUserActivities({\n          dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n          limit: 10000\n        }) : [];\n      const products = await storage.getProducts();\n      const categories = await storage.getCategories();\n\n      const productViews = new Map<string, number>();\n      const productCartAdds = new Map<string, number>();\n\n      activities.forEach(activity => {\n        if (activity.targetId) {\n          if (activity.activityType === 'product_view') {\n            productViews.set(activity.targetId, (productViews.get(activity.targetId) || 0) + 1);\n          } else if (activity.activityType === 'add_to_cart') {\n            productCartAdds.set(activity.targetId, (productCartAdds.get(activity.targetId) || 0) + 1);\n          }\n        }\n      });\n\n      // Get order data\n      const orders = await storage.getAllOrders();\n      const productOrders = new Map<string, { count: number; revenue: number }>();\n\n      for (const order of orders) {\n        const orderItems = await storage.getOrderItems(order.id);\n        for (const item of orderItems) {\n          if (!productOrders.has(item.productId)) {\n            productOrders.set(item.productId, { count: 0, revenue: 0 });\n          }\n          const data = productOrders.get(item.productId)!;\n          data.count += item.quantity;\n          data.revenue += parseFloat(item.totalPrice.toString());\n        }\n      }\n\n      const getProductWithCategory = (productId: string) => {\n        const product = products.find(p => p.id === productId);\n        const category = categories.find(c => c.id === product?.categoryId);\n        return { product, category };\n      };\n\n      const report: PopularProductsReport = {\n        mostViewed: Array.from(productViews.entries())\n          .map(([productId, views]) => {\n            const { product, category } = getProductWithCategory(productId);\n            return {\n              id: productId,\n              name: product?.nameUz || 'Unknown Product',\n              views,\n              category: category?.nameUz || 'Unknown Category'\n            };\n          })\n          .sort((a, b) => b.views - a.views)\n          .slice(0, 10),\n        \n        mostAddedToCart: Array.from(productCartAdds.entries())\n          .map(([productId, cartAdds]) => {\n            const { product, category } = getProductWithCategory(productId);\n            return {\n              id: productId,\n              name: product?.nameUz || 'Unknown Product',\n              cartAdds,\n              category: category?.nameUz || 'Unknown Category'\n            };\n          })\n          .sort((a, b) => b.cartAdds - a.cartAdds)\n          .slice(0, 10),\n        \n        mostOrdered: Array.from(productOrders.entries())\n          .map(([productId, data]) => {\n            const { product, category } = getProductWithCategory(productId);\n            return {\n              id: productId,\n              name: product?.nameUz || 'Unknown Product',\n              orders: data.count,\n              revenue: data.revenue,\n              category: category?.nameUz || 'Unknown Category'\n            };\n          })\n          .sort((a, b) => b.orders - a.orders)\n          .slice(0, 10)\n      };\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating popular products report:\", error);\n      res.status(500).json({ message: \"Failed to generate popular products report\" });\n    }\n  });\n\n  // Search terms report\n  app.get(\"/api/admin/reports/search-terms\", adminAuth, async (req: Request, res: Response) => {\n    try {\n      const activities = storage.getUserActivities ? \n        await storage.getUserActivities({\n          activityType: 'search',\n          dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n          limit: 10000\n        }) : [];\n\n      const searchCounts = new Map<string, { count: number; totalResults: number }>();\n      const recentSearches: Array<{ term: string; timestamp: string; results: number }> = [];\n\n      activities.forEach(activity => {\n        if (activity.metadata?.query) {\n          const term = activity.metadata.query.toLowerCase();\n          const results = activity.metadata.resultsCount || 0;\n\n          if (!searchCounts.has(term)) {\n            searchCounts.set(term, { count: 0, totalResults: 0 });\n          }\n          const data = searchCounts.get(term)!;\n          data.count++;\n          data.totalResults += results;\n\n          // Add to recent searches (limit to last 50)\n          if (recentSearches.length < 50) {\n            recentSearches.push({\n              term,\n              timestamp: activity.timestamp?.toISOString() || '',\n              results\n            });\n          }\n        }\n      });\n\n      const topSearches = Array.from(searchCounts.entries())\n        .map(([term, data]) => ({\n          term,\n          count: data.count,\n          resultsAvg: Math.round(data.totalResults / data.count)\n        }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 20);\n\n      const noResultSearches = topSearches\n        .filter(search => search.resultsAvg === 0)\n        .map(({ term, count }) => ({ term, count }))\n        .slice(0, 10);\n\n      const report: SearchTermsReport = {\n        topSearches,\n        noResultSearches,\n        recentSearches: recentSearches\n          .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n          .slice(0, 20)\n      };\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating search terms report:\", error);\n      res.status(500).json({ message: \"Failed to generate search terms report\" });\n    }\n  });\n}\n\n// Helper functions\nfunction getWeekString(date: Date): string {\n  const year = date.getFullYear();\n  const week = Math.ceil(((date.getTime() - new Date(year, 0, 1).getTime()) / 86400000 + 1) / 7);\n  return `${year}-W${week.toString().padStart(2, '0')}`;\n}\n\nfunction getMonthString(date: Date): string {\n  return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n}","size_bytes":16939},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7294},"client/src/components/ui/flag-icons.tsx":{"content":"export function UzbekistanFlag({ className = \"w-6 h-6\" }: { className?: string }) {\n  return (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className={className}>\n      {/* Circular background */}\n      <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"white\"/>\n      \n      {/* Blue stripe (top) */}\n      <path d=\"M0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12H0Z\" fill=\"#1EB7DD\"/>\n      \n      {/* White stripe (middle top) */}\n      <rect x=\"0\" y=\"7.2\" width=\"24\" height=\"2.4\" fill=\"white\"/>\n      \n      {/* Green stripe (middle bottom) */}\n      <rect x=\"0\" y=\"14.4\" width=\"24\" height=\"2.4\" fill=\"#0BB04B\"/>\n      \n      {/* Bottom green area */}\n      <path d=\"M0 12C0 18.6274 5.37258 24 12 24C18.6274 24 24 18.6274 24 12H0Z\" fill=\"#0BB04B\"/>\n      \n      {/* Red stripes */}\n      <rect x=\"0\" y=\"6.8\" width=\"24\" height=\"0.8\" fill=\"#CE1126\"/>\n      <rect x=\"0\" y=\"9.6\" width=\"24\" height=\"0.8\" fill=\"#CE1126\"/>\n      <rect x=\"0\" y=\"13.6\" width=\"24\" height=\"0.8\" fill=\"#CE1126\"/>\n      <rect x=\"0\" y=\"16.4\" width=\"24\" height=\"0.8\" fill=\"#CE1126\"/>\n      \n      {/* Crescent */}\n      <circle cx=\"7\" cy=\"6\" r=\"1.8\" fill=\"white\"/>\n      <circle cx=\"7.6\" cy=\"6\" r=\"1.5\" fill=\"#1EB7DD\"/>\n      \n      {/* Stars */}\n      <polygon points=\"11,4.5 11.2,5.1 11.8,5.1 11.3,5.5 11.5,6.1 11,5.7 10.5,6.1 10.7,5.5 10.2,5.1 10.8,5.1\" fill=\"white\"/>\n      <polygon points=\"13.5,5 13.7,5.6 14.3,5.6 13.8,6 14,6.6 13.5,6.2 13,6.6 13.2,6 12.7,5.6 13.3,5.6\" fill=\"white\"/>\n      <polygon points=\"15.5,6 15.7,6.6 16.3,6.6 15.8,7 16,7.6 15.5,7.2 15,7.6 15.2,7 14.7,6.6 15.3,6.6\" fill=\"white\"/>\n    </svg>\n  );\n}\n\nexport function RussiaFlag({ className = \"w-6 h-6\" }: { className?: string }) {\n  return (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className={className}>\n      {/* Circular background */}\n      <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"white\"/>\n      \n      {/* White stripe (top) */}\n      <path d=\"M0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12H0Z\" fill=\"white\"/>\n      \n      {/* Blue stripe (middle) */}\n      <rect x=\"0\" y=\"8\" width=\"24\" height=\"8\" fill=\"#0039A6\"/>\n      \n      {/* Red stripe (bottom) */}\n      <path d=\"M0 12C0 18.6274 5.37258 24 12 24C18.6274 24 24 18.6274 24 12H0Z\" fill=\"#D52B1E\"/>\n    </svg>\n  );\n}","size_bytes":2341},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/marketing-notification.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { X, Gift, Sparkles } from 'lucide-react';\nimport { useLanguage } from '../language-provider';\n\nexport function MarketingNotification() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isClosing, setIsClosing] = useState(false);\n  const { language } = useLanguage();\n\n  useEffect(() => {\n    // Check if notification was already dismissed today\n    const lastDismissed = localStorage.getItem('marketing-notification-dismissed');\n    const today = new Date().toDateString();\n    \n    if (lastDismissed !== today) {\n      // Show notification after 3 seconds\n      const timer = setTimeout(() => {\n        setIsVisible(true);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  const handleClose = () => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsVisible(false);\n      setIsClosing(false);\n      // Remember dismissal for today\n      localStorage.setItem('marketing-notification-dismissed', new Date().toDateString());\n    }, 300);\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div \n      className={`fixed top-4 left-4 right-4 md:left-auto md:right-4 md:w-96 z-[60] transform transition-all duration-300 ${\n        isClosing ? 'translate-y-[-100%] opacity-0' : 'translate-y-0 opacity-100'\n      }`}\n    >\n      <div className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-red-500 rounded-lg shadow-2xl p-1 animate-pulse\">\n        <div className=\"bg-white dark:bg-gray-900 rounded-md p-4 relative\">\n          {/* Close Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClose}\n            className=\"absolute top-2 right-2 h-6 w-6 p-0 hover:bg-gray-100 dark:hover:bg-gray-800\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n\n          {/* Content */}\n          <div className=\"pr-8\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className=\"p-1 bg-gradient-to-r from-blue-600 to-red-500 rounded-full\">\n                <Gift className=\"h-4 w-4 text-white\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 dark:text-white text-sm\">\n                {language === 'uz' ? 'üéâ Maxsus taklifimiz!' : 'üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!'}\n              </h3>\n            </div>\n            \n            <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-3\">\n              {language === 'uz' \n                ? 'Birinchi buyurtmangizga 10% chegirma! Promo kod: YANGI2024'\n                : '–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! –ü—Ä–æ–º–æ–∫–æ–¥: –ù–û–í–´–ô2024'\n              }\n            </p>\n\n            <div className=\"flex items-center gap-2\">\n              <Button \n                size=\"sm\"\n                className=\"bg-gradient-to-r from-blue-600 to-red-500 hover:from-red-500 hover:to-blue-600 text-white flex-1\"\n                onClick={() => {\n                  window.location.href = '/catalog';\n                  handleClose();\n                }}\n              >\n                <Sparkles className=\"h-3 w-3 mr-1\" />\n                {language === 'uz' ? 'Xarid qilish' : '–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3352},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/AdminAnalyticsPage.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { Footer } from '@/components/footer';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  BarChart3, \n  TrendingUp, \n  Users, \n  Eye,\n  Clock,\n  MousePointer,\n  Search\n} from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function AdminAnalyticsPage() {\n  const { language } = useLanguage();\n\n  // SEO Metrics\n  const { data: seoMetrics, isLoading: isLoadingSeo } = useQuery({\n    queryKey: ['/api/analytics/seo-metrics'],\n  });\n\n  // Google Analytics Data\n  const { data: analyticsData, isLoading: isLoadingAnalytics } = useQuery({\n    queryKey: ['/api/analytics/google-analytics'],\n  });\n\n  // Search Console Data\n  const { data: searchConsoleData, isLoading: isLoadingSearch } = useQuery({\n    queryKey: ['/api/analytics/search-console'],\n  });\n\n  if (isLoadingSeo || isLoadingAnalytics || isLoadingSearch) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Helmet>\n        <title>\n          {language === 'uz' \n            ? 'Analytics va SEO Monitoring - Admin Panel | OptomBazar.uz'\n            : '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ SEO –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å | OptomBazar.uz'\n          }\n        </title>\n      </Helmet>\n      \n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              {language === 'uz' ? 'Analytics va SEO Monitoring' : '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ SEO –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {language === 'uz' \n                ? 'Sayt statistikasi va SEO ko\\'rsatkichlari'\n                : '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞ –∏ SEO –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'\n              }\n            </p>\n          </div>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Kunlik foydalanuvchilar' : '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(analyticsData as any)?.users || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                +12% {language === 'uz' ? 'o\\'tgan hafta' : '—Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Sahifa ko\\'rishlar' : '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü'}\n              </CardTitle>\n              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(analyticsData as any)?.pageViews || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                +8% {language === 'uz' ? 'o\\'tgan hafta' : '—Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Konversiya darajasi' : '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'}\n              </CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(analyticsData as any)?.conversionRate || 0}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                +0.4% {language === 'uz' ? 'o\\'tgan hafta' : '—Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'O\\'rtacha vaqt' : '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è'}\n              </CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(analyticsData as any)?.averageSessionDuration || '0:00'}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                +15s {language === 'uz' ? 'o\\'tgan hafta' : '—Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏'}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* SEO Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {language === 'uz' ? 'Core Web Vitals' : 'Core Web Vitals'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">LCP</span>\n                <Badge variant=\"secondary\">{(seoMetrics as any)?.coreWebVitals?.LCP}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">FID</span>\n                <Badge variant=\"secondary\">{(seoMetrics as any)?.coreWebVitals?.FID}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">CLS</span>\n                <Badge variant=\"secondary\">{(seoMetrics as any)?.coreWebVitals?.CLS}</Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {language === 'uz' ? 'Sahifa tezligi' : '–°–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">\n                  {language === 'uz' ? 'Mobil' : '–ú–æ–±–∏–ª—å–Ω—ã–π'}\n                </span>\n                <div className=\"flex items-center gap-2\">\n                  <Progress value={(seoMetrics as any)?.mobileScore || 0} className=\"w-16\" />\n                  <span className=\"text-sm\">{(seoMetrics as any)?.mobileScore}/100</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">\n                  {language === 'uz' ? 'Desktop' : '–î–µ—Å–∫—Ç–æ–ø'}\n                </span>\n                <div className=\"flex items-center gap-2\">\n                  <Progress value={(seoMetrics as any)?.desktopScore || 0} className=\"w-16\" />\n                  <span className=\"text-sm\">{(seoMetrics as any)?.desktopScore}/100</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {language === 'uz' ? 'Indeksatsiya' : '–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">\n                  {language === 'uz' ? 'Jami sahifalar' : '–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü'}\n                </span>\n                <span className=\"font-medium\">{(seoMetrics as any)?.totalPages}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">\n                  {language === 'uz' ? 'Indekslangan' : '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ'}\n                </span>\n                <span className=\"font-medium\">{(seoMetrics as any)?.indexedPages}</span>\n              </div>\n              <Progress \n                value={((seoMetrics as any)?.indexedPages / (seoMetrics as any)?.totalPages) * 100} \n                className=\"w-full\" \n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search Console Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Ko\\'rishlar soni' : '–ü–æ–∫–∞–∑—ã'}\n              </CardTitle>\n              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(searchConsoleData as any)?.impressions?.toLocaleString() || 0}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Bosilishlar' : '–ö–ª–∏–∫–∏'}\n              </CardTitle>\n              <MousePointer className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(searchConsoleData as any)?.clicks?.toLocaleString() || 0}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">CTR</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(searchConsoleData as any)?.clickThroughRate}%</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'O\\'rtacha pozitsiya' : '–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è'}\n              </CardTitle>\n              <Search className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(searchConsoleData as any)?.averagePosition}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Top Queries */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {language === 'uz' ? 'Top qidiruv so\\'zlari' : '–¢–æ–ø –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {(searchConsoleData as any)?.topQueries?.map((query: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">{query.query}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {language === 'uz' ? 'Pozitsiya' : '–ü–æ–∑–∏—Ü–∏—è'}: {query.position}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{query.clicks} {language === 'uz' ? 'bosish' : '–∫–ª–∏–∫–∞'}</p>\n                    <p className=\"text-sm text-muted-foreground\">{query.impressions} {language === 'uz' ? 'ko\\'rish' : '–ø–æ–∫–∞–∑–æ–≤'}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}","size_bytes":12473},"client/src/pages/admin/AdminBlogPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../../components/ui/alert-dialog';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Switch } from '../../components/ui/switch';\nimport { Badge } from '../../components/ui/badge';\nimport { Header } from '../../components/header';\nimport { Footer } from '../../components/footer';\nimport { Plus, Edit, Trash2, ArrowLeft, FileText, Calendar } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useToast } from '../../hooks/use-toast';\nimport { BlogPost, InsertBlogPost } from '@shared/schema';\n\ninterface BlogFormData {\n  title: string;\n  content: string;\n  imageUrl: string;\n  slug: string;\n  isPublished: boolean;\n}\n\nconst defaultFormData: BlogFormData = {\n  title: '',\n  content: '',\n  imageUrl: '',\n  slug: '',\n  isPublished: true,\n};\n\nexport default function AdminBlogPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPost, setEditingPost] = useState<BlogPost | null>(null);\n  const [formData, setFormData] = useState<BlogFormData>(defaultFormData);\n\n  // Fetch blog posts\n  const { data: posts = [], isLoading } = useQuery<BlogPost[]>({\n    queryKey: ['admin-blog'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/blog');\n      if (!response.ok) {\n        throw new Error('Blog postlarini yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Create post mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertBlogPost) => {\n      const response = await fetch('/api/admin/blog', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Blog post yaratib bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-blog'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Blog post yaratildi' });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Blog post yaratishda xatolik', variant: 'destructive' });\n    },\n  });\n\n  // Update post mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertBlogPost> }) => {\n      const response = await fetch(`/api/admin/blog/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Blog postni yangilab bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-blog'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Blog post yangilandi' });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Blog postni yangilashda xatolik', variant: 'destructive' });\n    },\n  });\n\n  // Delete post mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/blog/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Blog postni o\\'chirib bo\\'lmadi');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-blog'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Blog post o\\'chirildi' });\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Blog postni o\\'chirishda xatolik', variant: 'destructive' });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const postData: InsertBlogPost = {\n      ...formData,\n      imageUrl: formData.imageUrl || null,\n    };\n\n    if (editingPost) {\n      updateMutation.mutate({ id: editingPost.id, data: postData });\n    } else {\n      createMutation.mutate(postData);\n    }\n  };\n\n  const handleEdit = (post: BlogPost) => {\n    setEditingPost(post);\n    setFormData({\n      title: post.title,\n      content: post.content,\n      imageUrl: post.imageUrl || '',\n      slug: post.slug,\n      isPublished: post.isPublished ?? true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingPost(null);\n    setFormData(defaultFormData);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteMutation.mutate(id);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Admin Panel\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Blog postlarini boshqarish</h1>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setFormData(defaultFormData)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Yangi post\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingPost ? 'Blog postni tahrirlash' : 'Yangi blog post qo\\'shish'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"title\">Sarlavha</Label>\n                    <Input\n                      id=\"title\"\n                      value={formData.title}\n                      onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"slug\">Slug</Label>\n                    <Input\n                      id=\"slug\"\n                      value={formData.slug}\n                      onChange={(e) => setFormData({ ...formData, slug: e.target.value })}\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"imageUrl\">Rasm URL</Label>\n                  <Input\n                    id=\"imageUrl\"\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\">Mazmun</Label>\n                  <Textarea\n                    id=\"content\"\n                    value={formData.content}\n                    onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                    rows={10}\n                    required\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isPublished\"\n                    checked={formData.isPublished}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isPublished: checked })}\n                  />\n                  <Label htmlFor=\"isPublished\">Chop etilgan</Label>\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                    Bekor qilish\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingPost ? 'Yangilash' : 'Yaratish'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Posts Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Barcha blog postlar ({posts.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Yuklanmoqda...</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Sarlavha</TableHead>\n                    <TableHead>Slug</TableHead>\n                    <TableHead>Sana</TableHead>\n                    <TableHead>Holat</TableHead>\n                    <TableHead>Amallar</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {posts.map((post) => (\n                    <TableRow key={post.id}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"h-4 w-4 text-blue-600\" />\n                          <div>\n                            <div className=\"font-medium\">{post.title}</div>\n                            <div className=\"text-sm text-gray-500 line-clamp-1\">\n                              {post.content.substring(0, 80)}...\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <code className=\"bg-gray-100 px-2 py-1 rounded text-sm\">\n                          {post.slug}\n                        </code>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4 text-gray-400\" />\n                          <div className=\"text-sm\">\n                            {new Date(post.createdAt!).toLocaleDateString('uz-UZ')}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {post.isPublished ? (\n                          <Badge variant=\"default\">Chop etilgan</Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">Qoralama</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(post)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" disabled={deleteMutation.isPending}>\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Blog postni o'chirish</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Haqiqatan ham \"{post.title}\" blog postini o'chirmoqchimisiz? \n                                  Bu amalni bekor qilib bo'lmaydi.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Bekor qilish</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => handleDelete(post.id)}>\n                                  O'chirish\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}","size_bytes":13091},"client/src/pages/admin/AdminCategoriesPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../../components/ui/alert-dialog';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Switch } from '../../components/ui/switch';\nimport { Badge } from '../../components/ui/badge';\nimport { Header } from '../../components/header';\nimport { Footer } from '../../components/footer';\nimport { Plus, Edit, Trash2, ArrowLeft, Folder } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useToast } from '../../hooks/use-toast';\nimport { Category, InsertCategory } from '@shared/schema';\n\ninterface CategoryFormData {\n  nameUz: string;\n  nameRu: string;\n  descriptionUz: string;\n  descriptionRu: string;\n  slug: string;\n  image: string;\n  icon: string;\n  parentId: string;\n  isActive: boolean;\n}\n\nconst defaultFormData: CategoryFormData = {\n  nameUz: '',\n  nameRu: '',\n  descriptionUz: '',\n  descriptionRu: '',\n  slug: '',\n  image: '',\n  icon: '',\n  parentId: 'none',\n  isActive: true,\n};\n\nexport default function AdminCategoriesPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [formData, setFormData] = useState<CategoryFormData>(defaultFormData);\n\n  // Fetch categories\n  const { data: categories = [], isLoading } = useQuery<Category[]>({\n    queryKey: ['admin-categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/categories');\n      if (!response.ok) {\n        throw new Error('Kategoriyalarni yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Create category mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      const response = await fetch('/api/admin/categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Kategoriya yaratib bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Admin paneldagi cache'ni yangilash\n      queryClient.invalidateQueries({ queryKey: ['admin-categories'] });\n      // Asosiy saytdagi cache'ni ham yangilash\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      \n      toast({ title: 'Muvaffaqiyat', description: 'Kategoriya yaratildi va saytda ko\\'rsatildi' });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Kategoriya yaratishda xatolik', variant: 'destructive' });\n    },\n  });\n\n  // Update category mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertCategory> }) => {\n      const response = await fetch(`/api/admin/categories/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Kategoriyani yangilab bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-categories'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Kategoriya yangilandi' });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Kategoriyani yangilashda xatolik', variant: 'destructive' });\n    },\n  });\n\n  // Delete category mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/categories/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Kategoriyani o\\'chirib bo\\'lmadi');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-categories'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Kategoriya o\\'chirildi' });\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Kategoriyani o\\'chirishda xatolik', variant: 'destructive' });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const categoryData: InsertCategory = {\n      ...formData,\n      parentId: formData.parentId === 'none' ? null : formData.parentId || null,\n      image: formData.image || null,\n      icon: formData.icon || null,\n      descriptionUz: formData.descriptionUz || null,\n      descriptionRu: formData.descriptionRu || null,\n    };\n\n    if (editingCategory) {\n      updateMutation.mutate({ id: editingCategory.id, data: categoryData });\n    } else {\n      createMutation.mutate(categoryData);\n    }\n  };\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    setFormData({\n      nameUz: category.nameUz,\n      nameRu: category.nameRu,\n      descriptionUz: category.descriptionUz || '',\n      descriptionRu: category.descriptionRu || '',\n      slug: category.slug,\n      image: category.image || '',\n      icon: category.icon || '',\n      parentId: category.parentId || 'none',\n      isActive: category.isActive ?? true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingCategory(null);\n    setFormData(defaultFormData);\n  };\n\n  // Slug yaratish funksiyasi\n  const generateSlug = (text: string) => {\n    return text\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '') // Faqat harflar, raqamlar, bo'sh joy va tire\n      .replace(/\\s+/g, '-') // Bo'sh joylarni tire bilan almashtirish\n      .replace(/-+/g, '-') // Bir nechta tireni bitta tire bilan almashtirish\n      .trim()\n      .replace(/^-|-$/g, ''); // Boshi va oxiridagi tireni olib tashlash\n  };\n\n  // Nom o'zgarganda slug'ni avtomatik yangilash\n  const handleNameChange = (field: 'nameUz' | 'nameRu', value: string) => {\n    const newFormData = { ...formData, [field]: value };\n    \n    // Agar slug bo'sh bo'lsa yoki avvalgi nomdan yaratilgan bo'lsa, yangi slug yaratish\n    if (!formData.slug || formData.slug === generateSlug(formData.nameUz)) {\n      newFormData.slug = generateSlug(value);\n    }\n    \n    setFormData(newFormData);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteMutation.mutate(id);\n  };\n\n  const getParentName = (parentId: string | null) => {\n    if (!parentId) return 'Asosiy kategoriya';\n    const parent = categories.find(cat => cat.id === parentId);\n    return parent ? parent.nameUz : 'Noma\\'lum';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Admin Panel\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Kategoriyalarni boshqarish</h1>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setFormData(defaultFormData)} className=\"bg-green-600 hover:bg-green-700 text-white\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Yangi Kategoriya Qo'shish\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCategory ? 'Kategoriyani tahrirlash' : 'Yangi kategoriya qo\\'shish'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"nameUz\">Nomi (O'zbek)</Label>\n                    <Input\n                      id=\"nameUz\"\n                      value={formData.nameUz}\n                      onChange={(e) => handleNameChange('nameUz', e.target.value)}\n                      required\n                      placeholder=\"Kategoriya nomini kiriting\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"nameRu\">Nomi (Rus)</Label>\n                    <Input\n                      id=\"nameRu\"\n                      value={formData.nameRu}\n                      onChange={(e) => handleNameChange('nameRu', e.target.value)}\n                      required\n                      placeholder=\"Kategoriya nomini kiriting (rus tilida)\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"descriptionUz\">Tavsif (O'zbek)</Label>\n                    <Textarea\n                      id=\"descriptionUz\"\n                      value={formData.descriptionUz}\n                      onChange={(e) => setFormData({ ...formData, descriptionUz: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"descriptionRu\">Tavsif (Rus)</Label>\n                    <Textarea\n                      id=\"descriptionRu\"\n                      value={formData.descriptionRu}\n                      onChange={(e) => setFormData({ ...formData, descriptionRu: e.target.value })}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"slug\">URL Slug</Label>\n                    <Input\n                      id=\"slug\"\n                      value={formData.slug}\n                      onChange={(e) => setFormData({ ...formData, slug: e.target.value })}\n                      required\n                      placeholder=\"avtomatik-yaratiladi\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Kategoriya nomini yozsangiz, avtomatik yaratiladi\n                    </p>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"image\">Rasm URL</Label>\n                    <Input\n                      id=\"image\"\n                      value={formData.image}\n                      onChange={(e) => setFormData({ ...formData, image: e.target.value })}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"icon\">Ikona nomi (Lucide React)</Label>\n                  <Input\n                    id=\"icon\"\n                    value={formData.icon}\n                    onChange={(e) => setFormData({ ...formData, icon: e.target.value })}\n                    placeholder=\"Package, Shirt, Utensils, Smartphone...\"\n                  />\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Masalan: Package, Shirt, Utensils, Smartphone, Box, etc.\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"parentId\">Asosiy kategoriya</Label>\n                  <Select value={formData.parentId} onValueChange={(value) => setFormData({ ...formData, parentId: value })}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Asosiy kategoriyani tanlang\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">Asosiy kategoriya</SelectItem>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.nameUz}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  />\n                  <Label htmlFor=\"isActive\">Faol</Label>\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                    Bekor qilish\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingCategory ? 'Yangilash' : 'Yaratish'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Categories Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Barcha kategoriyalar ({categories.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Yuklanmoqda...</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nomi</TableHead>\n                    <TableHead>Slug</TableHead>\n                    <TableHead>Asosiy kategoriya</TableHead>\n                    <TableHead>Holat</TableHead>\n                    <TableHead>Amallar</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {categories.map((category) => (\n                    <TableRow key={category.id}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Folder className=\"h-4 w-4 text-blue-600\" />\n                          <div>\n                            <div className=\"font-medium\">{category.nameUz}</div>\n                            <div className=\"text-sm text-gray-500\">{category.nameRu}</div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <code className=\"bg-gray-100 px-2 py-1 rounded text-sm\">\n                          {category.slug}\n                        </code>\n                      </TableCell>\n                      <TableCell>{getParentName(category.parentId)}</TableCell>\n                      <TableCell>\n                        {category.isActive ? (\n                          <Badge variant=\"default\">Faol</Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">Nofaol</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(category)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" disabled={deleteMutation.isPending}>\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Kategoriyani o'chirish</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Haqiqatan ham \"{category.nameUz}\" kategoriyasini o'chirmoqchimisiz? \n                                  Bu amalni bekor qilib bo'lmaydi.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Bekor qilish</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => handleDelete(category.id)}>\n                                  O'chirish\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17514},"client/src/pages/admin/AdminDashboardPage.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Header } from '../../components/header';\nimport { Footer } from '../../components/footer';\nimport { Package, ShoppingCart, Users, BarChart3, Folder, FileText, Percent, Bell, Megaphone, Plus } from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\n\nexport default function AdminDashboardPage() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Admin Panel</h1>\n          <p className=\"text-gray-600\">\n            Salom, {user?.username}! Platformani boshqarish uchun quyidagi bo'limlardan foydalaning.\n          </p>\n        </div>\n\n        {/* Quick Actions - Highlighted */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-6 flex items-center gap-2\">\n            <Plus className=\"h-6 w-6 text-blue-600\" />\n            Tezkor Qo'shish\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Link href=\"/admin/products\">\n              <Card className=\"hover:shadow-xl transition-all duration-300 cursor-pointer border-2 border-blue-200 hover:border-blue-400 bg-gradient-to-br from-blue-50 to-blue-100\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-blue-600 rounded-lg\">\n                      <Package className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Yangi Mahsulot Qo'shish</h3>\n                      <p className=\"text-sm text-gray-600\">Katalogga yangi mahsulot qo'shing</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/admin/categories\">\n              <Card className=\"hover:shadow-xl transition-all duration-300 cursor-pointer border-2 border-green-200 hover:border-green-400 bg-gradient-to-br from-green-50 to-green-100\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-green-600 rounded-lg\">\n                      <Folder className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Yangi Kategoriya Qo'shish</h3>\n                      <p className=\"text-sm text-gray-600\">Mahsulotlar uchun yangi kategoriya yarating</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/admin/blog\">\n              <Card className=\"hover:shadow-xl transition-all duration-300 cursor-pointer border-2 border-purple-200 hover:border-purple-400 bg-gradient-to-br from-purple-50 to-purple-100\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"p-3 bg-purple-600 rounded-lg\">\n                      <FileText className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Yangi Blog Post</h3>\n                      <p className=\"text-sm text-gray-600\">Blog uchun yangi maqola yozing</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n        </div>\n\n        {/* Admin Navigation Cards */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Boshqaruv Bo'limlari</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Products Management */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5 text-blue-600\" />\n                  Mahsulotlar\n                </CardTitle>\n                <CardDescription>\n                  Mahsulotlarni qo'shish, tahrirlash va o'chirish\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/products\">\n                  <Button className=\"w-full\">\n                    Mahsulotlarni boshqarish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Categories Management */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Folder className=\"h-5 w-5 text-green-600\" />\n                  Kategoriyalar\n                </CardTitle>\n                <CardDescription>\n                  Katalog tuzilmasini boshqarish va tahrirlash\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/categories\">\n                  <Button className=\"w-full\">\n                    Kategoriyalarni boshqarish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Orders Management */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingCart className=\"h-5 w-5 text-orange-600\" />\n                  Buyurtmalar\n                </CardTitle>\n                <CardDescription>\n                  Buyurtmalarni ko'rish va holatini boshqarish\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/orders\">\n                  <Button className=\"w-full\">\n                    Buyurtmalarni boshqarish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Blog Management */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5 text-purple-600\" />\n                  Blog\n                </CardTitle>\n                <CardDescription>\n                  Blog postlarini yaratish va boshqarish\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/blog\">\n                  <Button className=\"w-full\">\n                    Blog'ni boshqarish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Discounts Management */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Percent className=\"h-5 w-5 text-yellow-600\" />\n                  Chegirmalar\n                </CardTitle>\n                <CardDescription>\n                  Kuponlar va chegirmalarni boshqarish\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/discounts\">\n                  <Button className=\"w-full\">\n                    Chegirmalarni boshqarish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Marketing Dashboard */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Megaphone className=\"h-5 w-5 text-red-600\" />\n                  Marketing\n                </CardTitle>\n                <CardDescription>\n                  Reklama kampaniyalari va avtomatlashtirish\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/marketing\">\n                  <Button className=\"w-full\">\n                    Marketing boshqarish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Analytics & SEO */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5 text-indigo-600\" />\n                  Analytics va SEO\n                </CardTitle>\n                <CardDescription>\n                  Google Analytics va SEO monitoring\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/analytics\">\n                  <Button className=\"w-full\">\n                    Analytics ko'rish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Push Notifications */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bell className=\"h-5 w-5 text-pink-600\" />\n                  Push Bildirishnomalar\n                </CardTitle>\n                <CardDescription>\n                  Foydalanuvchilarga bildirishnomalar yuborish\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/push-notifications\">\n                  <Button className=\"w-full\">\n                    Bildirishnomalar yuborish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Reports */}\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5 text-teal-600\" />\n                  Hisobotlar\n                </CardTitle>\n                <CardDescription>\n                  Platform statistikasi va hisobotlar\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/admin/reports\">\n                  <Button className=\"w-full\">\n                    Hisobotlarni ko'rish\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10869},"client/src/pages/admin/AdminDiscountsPage.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Button } from '../../components/ui/button';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { Switch } from '../../components/ui/switch';\nimport { Badge } from '../../components/ui/badge';\nimport { Header } from '../../components/header';\nimport { Footer } from '../../components/footer';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '../../components/ui/form';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Trash2, Edit, Plus, Copy, Calendar, Percent, dollarSign } from 'lucide-react';\nimport { useToast } from '../../hooks/use-toast';\nimport { apiRequest } from '../../lib/queryClient';\n\nconst discountFormSchema = z.object({\n  code: z.string().min(3, 'Kod kamida 3 ta belgidan iborat bo\\'lishi kerak').max(20),\n  type: z.enum(['percentage', 'fixed']),\n  value: z.number().min(1, 'Qiymat 1 dan katta bo\\'lishi kerak'),\n{{ ... }}\n  isActive: true,\n});\n\n// Barcha chegirmalarni olish\nconst { data: discountsData, isLoading } = useQuery<Discount[]>({\n  queryKey: ['/api/discounts'],\n});\n\nconst discounts = discountsData ?? [];\n\n// Yangi chegirma yaratish yoki tahrirlash\nconst createOrUpdateMutation = useMutation({\n  mutationFn: async (data: DiscountFormData) => {\n    const requestData = {\n      ...data,\n      validFrom: new Date(data.validFrom).toISOString(),\n      validUntil: new Date(data.validUntil).toISOString(),\n    };\n\n    if (editingDiscount) {\n      const response = await apiRequest<Discount>('PUT', `/api/discounts/${editingDiscount.id}`, requestData);\n      return response.data;\n    } else {\n      const response = await apiRequest<Discount>('POST', '/api/discounts', requestData);\n      return response.data;\n    }\n  },\n  onSuccess: () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/discounts'] });\n    setIsDialogOpen(false);\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Xatolik!',\n        description: error.message || 'Chegirmani o\\'chirishda xatolik',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const openCreateDialog = () => {\n    setEditingDiscount(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  const openEditDialog = (discount: Discount) => {\n    setEditingDiscount(discount);\n    form.reset({\n      code: discount.code,\n      type: discount.type,\n      value: discount.value,\n      validFrom: new Date(discount.validFrom).toISOString().split('T')[0],\n      validUntil: new Date(discount.validUntil).toISOString().split('T')[0],\n      maxUses: discount.maxUses,\n      targetType: discount.targetType,\n      isActive: discount.isActive,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: DiscountFormData) => {\n    createOrUpdateMutation.mutate(data);\n  };\n\n  const copyDiscountCode = (code: string) => {\n    navigator.clipboard.writeText(code);\n    toast({\n      title: 'Nusxalandi!',\n      description: `Chegirma kodi \"${code}\" nusxalandi`,\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('uz-UZ');\n  };\n\n  const isExpired = (dateString: string) => {\n    return new Date(dateString) < new Date();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      \n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8 flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Chegirmalar boshqaruvi</h1>\n            <p className=\"text-gray-600\">\n              Platformada foydalaniladigan chegirmalar va kuponlarni boshqaring\n            </p>\n          </div>\n          <Button onClick={openCreateDialog} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Yangi chegirma qo'shish\n          </Button>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Jami chegirmalar</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{discounts.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Faol chegirmalar</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {discounts.filter((d: Discount) => d.isActive && !isExpired(d.validUntil)).length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Muddati tugagan</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {discounts.filter((d: Discount) => isExpired(d.validUntil)).length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Ishlatilgan</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {discounts.reduce((sum: number, d: Discount) => sum + d.usedCount, 0)}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Discounts Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Barcha chegirmalar</CardTitle>\n            <CardDescription>\n              Platformadagi barcha chegirmalar ro'yxati\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Yuklanmoqda...</div>\n            ) : discounts.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                Hech qanday chegirma topilmadi\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {discounts.map((discount: Discount) => (\n                  <div key={discount.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyDiscountCode(discount.code)}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                          {discount.code}\n                        </Button>\n                        <div className=\"flex items-center gap-2\">\n                          {discount.type === 'percentage' ? (\n                            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                              <Percent className=\"h-3 w-3\" />\n                              {discount.value}%\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                              <DollarSign className=\"h-3 w-3\" />\n                              {discount.value.toLocaleString()} so'm\n                            </Badge>\n                          )}\n                          {discount.isActive && !isExpired(discount.validUntil) ? (\n                            <Badge variant=\"default\">Faol</Badge>\n                          ) : isExpired(discount.validUntil) ? (\n                            <Badge variant=\"destructive\">Muddati tugagan</Badge>\n                          ) : (\n                            <Badge variant=\"secondary\">Nofaol</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => openEditDialog(discount)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(discount.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n                      <div>\n                        <span className=\"font-medium\">Boshlanish:</span> {formatDate(discount.validFrom)}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Tugash:</span> {formatDate(discount.validUntil)}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Foydalanish:</span> {discount.usedCount}\n                        {discount.maxUses > 0 && ` / ${discount.maxUses}`}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Maqsad:</span>{' '}\n                        {discount.targetType === 'all_products' ? 'Barcha mahsulotlar' : \n                         discount.targetType === 'specific_products' ? 'Tanlangan mahsulotlar' : \n                         'Tanlangan kategoriyalar'}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingDiscount ? 'Chegirmani tahrirlash' : 'Yangi chegirma yaratish'}\n              </DialogTitle>\n              <DialogDescription>\n                Chegirma ma'lumotlarini to'ldiring\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Chegirma kodi</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"YANGI10\" {...field} style={{ textTransform: 'uppercase' }} />\n                      </FormControl>\n                      <FormDescription>\n                        Foydalanuvchilar ushbu kodni kiritadilar\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Turi</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Turni tanlang\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"percentage\">Foiz (%)</SelectItem>\n                            <SelectItem value=\"fixed\">Aniq summa</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"value\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Qiymati</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"10\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"validFrom\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Boshlanish sanasi</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"validUntil\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tugash sanasi</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"maxUses\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Maksimal foydalanish soni</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          placeholder=\"0 = cheksiz\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        0 = cheksiz foydalanish\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"targetType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Qo'llanish doirasi</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"all_products\">Barcha mahsulotlar</SelectItem>\n                          <SelectItem value=\"specific_products\">Tanlangan mahsulotlar</SelectItem>\n                          <SelectItem value=\"specific_categories\">Tanlangan kategoriyalar</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Faol holat</FormLabel>\n                        <FormDescription>\n                          Chegirma foydalanish uchun ochiq bo'ladimi?\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Bekor qilish\n                  </Button>\n                  <Button type=\"submit\" disabled={createOrUpdateMutation.isPending}>\n                    {createOrUpdateMutation.isPending ? 'Saqlanmoqda...' : 'Saqlash'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n      <Footer />\n    </div>\n  );\n}","size_bytes":17997},"client/src/pages/admin/AdminMarketingConfigPage.tsx":{"content":"import { useState } from 'react';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { Footer } from '@/components/footer';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Settings, \n  Save, \n  Copy, \n  CheckCircle,\n  AlertCircle,\n  ExternalLink,\n  Code,\n  Target\n} from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminMarketingConfigPage() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const [gtmId, setGtmId] = useState('GTM-CONTAINER-ID');\n  const [fbPixelId, setFbPixelId] = useState('');\n  const [googleAdsId, setGoogleAdsId] = useState('');\n  const [copiedCode, setCopiedCode] = useState<string | null>(null);\n\n  const gtmHeadCode = `<!-- Google Tag Manager -->\n<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','${gtmId}');</script>\n<!-- End Google Tag Manager -->`;\n\n  const gtmBodyCode = `<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=${gtmId}\"\nheight=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->`;\n\n  const fbPixelCode = `<!-- Facebook Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', '${fbPixelId}');\nfbq('track', 'PageView');\n</script>\n<!-- End Facebook Pixel Code -->`;\n\n  const copyToClipboard = (code: string, type: string) => {\n    navigator.clipboard.writeText(code);\n    setCopiedCode(type);\n    setTimeout(() => setCopiedCode(null), 2000);\n    \n    toast({\n      title: \"Kod nusxalandi\",\n      description: \"Kod clipboard'ga muvaffaqiyatli nusxalandi\",\n    });\n  };\n\n  const saveConfig = () => {\n    // Save configuration to localStorage or send to backend\n    localStorage.setItem('marketing_config', JSON.stringify({\n      gtmId,\n      fbPixelId,\n      googleAdsId,\n      savedAt: new Date().toISOString()\n    }));\n\n    toast({\n      title: \"Sozlamalar saqlandi\",\n      description: \"Marketing sozlamalari muvaffaqiyatli saqlandi\",\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {language === 'uz' \n            ? 'Marketing Konfiguratsiya - Admin Panel | OptomBazar.uz'\n            : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å | OptomBazar.uz'\n          }\n        </title>\n      </Helmet>\n\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Settings className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              {language === 'uz' ? 'Marketing Konfiguratsiya' : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞'}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {language === 'uz' \n                ? 'Google Tag Manager, Facebook Pixel va boshqa marketing vositalarini sozlash'\n                : '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Tag Manager, Facebook Pixel –∏ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'\n              }\n            </p>\n          </div>\n        </div>\n\n        {/* Configuration Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {language === 'uz' ? 'Asosiy sozlamalar' : '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}\n            </CardTitle>\n            <CardDescription>\n              {language === 'uz' \n                ? 'Marketing platformalari uchun ID va kodlarni kiriting'\n                : '–í–≤–µ–¥–∏—Ç–µ ID –∏ –∫–æ–¥—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º'\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gtm-id\">Google Tag Manager ID</Label>\n                <Input\n                  id=\"gtm-id\"\n                  placeholder=\"GTM-XXXXXXX\"\n                  value={gtmId}\n                  onChange={(e) => setGtmId(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  {language === 'uz' \n                    ? 'GTM konteyner ID ni kiriting'\n                    : '–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ GTM'\n                  }\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fb-pixel\">Facebook Pixel ID</Label>\n                <Input\n                  id=\"fb-pixel\"\n                  placeholder=\"1234567890123456\"\n                  value={fbPixelId}\n                  onChange={(e) => setFbPixelId(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  {language === 'uz' \n                    ? 'Facebook Pixel ID ni kiriting'\n                    : '–í–≤–µ–¥–∏—Ç–µ ID –ø–∏–∫—Å–µ–ª—è Facebook'\n                  }\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"google-ads\">Google Ads ID</Label>\n                <Input\n                  id=\"google-ads\"\n                  placeholder=\"AW-1234567890\"\n                  value={googleAdsId}\n                  onChange={(e) => setGoogleAdsId(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  {language === 'uz' \n                    ? 'Google Ads konversiya ID'\n                    : 'ID –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ Google Ads'\n                  }\n                </p>\n              </div>\n\n              <div className=\"flex items-end\">\n                <Button onClick={saveConfig} className=\"w-full\">\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Saqlash' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Installation Codes */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Google Tag Manager */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Code className=\"h-5 w-5\" />\n                Google Tag Manager\n              </CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Bu kodlarni saytingizga joylashtiring'\n                  : '–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label className=\"text-sm font-medium\">Head kodini &lt;head&gt; ichiga</Label>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => copyToClipboard(gtmHeadCode, 'gtm-head')}\n                  >\n                    {copiedCode === 'gtm-head' ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n                <Textarea\n                  value={gtmHeadCode}\n                  readOnly\n                  className=\"font-mono text-xs h-32\"\n                />\n              </div>\n\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label className=\"text-sm font-medium\">Body kodini &lt;body&gt; boshiga</Label>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => copyToClipboard(gtmBodyCode, 'gtm-body')}\n                  >\n                    {copiedCode === 'gtm-body' ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n                <Textarea\n                  value={gtmBodyCode}\n                  readOnly\n                  className=\"font-mono text-xs h-20\"\n                />\n              </div>\n\n              <Badge variant={gtmId !== 'GTM-CONTAINER-ID' ? 'default' : 'secondary'} className=\"w-full justify-center\">\n                {gtmId !== 'GTM-CONTAINER-ID' \n                  ? (language === 'uz' ? 'Konfiguratsiya qilindi' : '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ') + ' ‚úì'\n                  : (language === 'uz' ? 'Konfiguratsiya kerak' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')\n                }\n              </Badge>\n            </CardContent>\n          </Card>\n\n          {/* Facebook Pixel */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Facebook Pixel\n              </CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Facebook va Instagram reklamalarini kuzatish'\n                  : '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã Facebook –∏ Instagram'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label className=\"text-sm font-medium\">Pixel kodi</Label>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => copyToClipboard(fbPixelCode, 'fb-pixel')}\n                    disabled={!fbPixelId}\n                  >\n                    {copiedCode === 'fb-pixel' ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n                <Textarea\n                  value={fbPixelCode}\n                  readOnly\n                  className=\"font-mono text-xs h-40\"\n                />\n              </div>\n\n              <Badge variant={fbPixelId ? 'default' : 'secondary'} className=\"w-full justify-center\">\n                {fbPixelId \n                  ? (language === 'uz' ? 'Konfiguratsiya qilindi' : '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ') + ' ‚úì'\n                  : (language === 'uz' ? 'Pixel ID kiriting' : '–í–≤–µ–¥–∏—Ç–µ Pixel ID')\n                }\n              </Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Conversion Events Setup */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {language === 'uz' ? 'Konversiya hodisalari' : '–°–æ–±—ã—Ç–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'}\n            </CardTitle>\n            <CardDescription>\n              {language === 'uz' \n                ? 'Kuzatiladigan asosiy hodisalar'\n                : '–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è'\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[\n                {\n                  event: 'PageView',\n                  description: language === 'uz' ? 'Sahifa ko\\'rish' : '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã',\n                  status: 'active'\n                },\n                {\n                  event: 'ViewContent',\n                  description: language === 'uz' ? 'Mahsulot ko\\'rish' : '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞',\n                  status: 'active'\n                },\n                {\n                  event: 'AddToCart',\n                  description: language === 'uz' ? 'Savatga qo\\'shish' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É',\n                  status: 'active'\n                },\n                {\n                  event: 'InitiateCheckout',\n                  description: language === 'uz' ? 'Buyurtma boshlash' : '–ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞',\n                  status: 'active'\n                },\n                {\n                  event: 'Purchase',\n                  description: language === 'uz' ? 'Xarid yakunlash' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏',\n                  status: 'active'\n                },\n                {\n                  event: 'CompleteRegistration',\n                  description: language === 'uz' ? 'Ro\\'yxatdan o\\'tish' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',\n                  status: 'active'\n                }\n              ].map((item, index) => (\n                <div key={index} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium\">{item.event}</h4>\n                    <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                      {item.status === 'active' ? 'Faol' : 'Nofaol'}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Helpful Links */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {language === 'uz' ? 'Foydali havolalar' : '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Google Tag Manager</div>\n                  <div className=\"text-sm text-muted-foreground\">tagmanager.google.com</div>\n                </div>\n              </Button>\n              \n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Facebook Events Manager</div>\n                  <div className=\"text-sm text-muted-foreground\">business.facebook.com</div>\n                </div>\n              </Button>\n              \n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Google Ads</div>\n                  <div className=\"text-sm text-muted-foreground\">ads.google.com</div>\n                </div>\n              </Button>\n              \n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Google Analytics</div>\n                  <div className=\"text-sm text-muted-foreground\">analytics.google.com</div>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}","size_bytes":15895},"client/src/pages/admin/AdminMarketingPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\n\nimport { Footer } from '@/components/footer';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { \n  Megaphone, \n  Target, \n  TrendingUp, \n  Eye,\n  MousePointer,\n  DollarSign,\n  Users,\n  Settings,\n  ExternalLink,\n  Copy,\n  CheckCircle\n} from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function AdminMarketingPage() {\n  const { language } = useLanguage();\n  const [copiedCode, setCopiedCode] = useState<string | null>(null);\n\n  // Marketing metrics\n  const { data: marketingMetrics, isLoading } = useQuery({\n    queryKey: ['/api/marketing/metrics'],\n  });\n\n  // GTM Configuration codes\n  const gtmCode = `<!-- Google Tag Manager -->\n<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','GTM-CONTAINER-ID');</script>\n<!-- End Google Tag Manager -->`;\n\n  const fbPixelCode = `<!-- Facebook Pixel Code -->\n<script>\n!function(f,b,e,v,n,t,s)\n{if(f.fbq)return;n=f.fbq=function(){n.callMethod?\nn.callMethod.apply(n,arguments):n.queue.push(arguments)};\nif(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';\nn.queue=[];t=b.createElement(e);t.async=!0;\nt.src=v;s=b.getElementsByTagName(e)[0];\ns.parentNode.insertBefore(t,s)}(window, document,'script',\n'https://connect.facebook.net/en_US/fbevents.js');\nfbq('init', 'YOUR_PIXEL_ID');\nfbq('track', 'PageView');\n</script>\n<!-- End Facebook Pixel Code -->`;\n\n  const copyToClipboard = (code: string, type: string) => {\n    navigator.clipboard.writeText(code);\n    setCopiedCode(type);\n    setTimeout(() => setCopiedCode(null), 2000);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {language === 'uz' \n            ? 'Marketing Dashboard - Admin Panel | OptomBazar.uz'\n            : '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ü–∞–Ω–µ–ª—å - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å | OptomBazar.uz'\n          }\n        </title>\n      </Helmet>\n\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Megaphone className=\"h-8 w-8 text-purple-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              {language === 'uz' ? 'Marketing Dashboard' : '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ü–∞–Ω–µ–ª—å'}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {language === 'uz' \n                ? 'Reklama kampaniyalari va konversiyalarni boshqarish'\n                : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º–∏'\n              }\n            </p>\n          </div>\n        </div>\n\n        {/* Marketing Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Reklama xarajatlari' : '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É'}\n              </CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(marketingMetrics as any)?.adSpend?.toLocaleString() || 0} UZS</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {language === 'uz' ? 'Bu oy' : '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">ROAS</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(marketingMetrics as any)?.roas || '3.2'}x</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Return on Ad Spend\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Konversiya darajasi' : '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'}\n              </CardTitle>\n              <Target className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(marketingMetrics as any)?.conversionRate || 2.8}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                +0.3% {language === 'uz' ? 'o\\'tgan hafta' : '—Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Yangi mijozlar' : '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'}\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{(marketingMetrics as any)?.newCustomers || 147}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {language === 'uz' ? 'Bu hafta' : '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ'}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Campaign Performance */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              {language === 'uz' ? 'Kampaniya ko\\'rsatkichlari' : '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞–º–ø–∞–Ω–∏–π'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                {\n                  name: 'Google Ads - Optom mahsulotlar',\n                  impressions: 12560,\n                  clicks: 834,\n                  ctr: 6.6,\n                  conversions: 23,\n                  cost: 2850000\n                },\n                {\n                  name: 'Facebook - Ulgurji savdo',\n                  impressions: 8945,\n                  clicks: 567,\n                  ctr: 6.3,\n                  conversions: 18,\n                  cost: 1950000\n                },\n                {\n                  name: 'Instagram - Biznes mahsulotlar',\n                  impressions: 5670,\n                  clicks: 289,\n                  ctr: 5.1,\n                  conversions: 8,\n                  cost: 890000\n                }\n              ].map((campaign, index) => (\n                <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">{campaign.name}</h4>\n                    <div className=\"flex gap-4 text-sm text-muted-foreground mt-1\">\n                      <span>CTR: {campaign.ctr}%</span>\n                      <span>{campaign.conversions} konversiya</span>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{campaign.cost.toLocaleString()} UZS</p>\n                    <p className=\"text-sm text-muted-foreground\">{campaign.clicks} bosish</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Setup Codes */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Google Tag Manager */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Google Tag Manager\n              </CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Barcha marketing kodlarini boshqarish uchun GTM kodi'\n                  : 'GTM –∫–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>{language === 'uz' ? 'Container ID' : 'ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'}</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input \n                    value=\"GTM-CONTAINER-ID\" \n                    readOnly \n                    className=\"font-mono text-sm\"\n                  />\n                  <Button size=\"sm\" variant=\"outline\">\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label>{language === 'uz' ? 'Head kodi' : '–ö–æ–¥ –¥–ª—è Head'}</Label>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => copyToClipboard(gtmCode, 'gtm')}\n                  >\n                    {copiedCode === 'gtm' ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-x-auto\">\n                  {gtmCode}\n                </pre>\n              </div>\n              <Badge variant=\"secondary\" className=\"w-full justify-center\">\n                {language === 'uz' ? 'O\\'rnatilgan' : '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'} ‚úì\n              </Badge>\n            </CardContent>\n          </Card>\n\n          {/* Facebook Pixel */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Eye className=\"h-5 w-5\" />\n                Facebook Pixel\n              </CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Facebook va Instagram reklamalarini kuzatish'\n                  : '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã Facebook –∏ Instagram'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Pixel ID</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input \n                    placeholder=\"YOUR_PIXEL_ID\" \n                    className=\"font-mono text-sm\"\n                  />\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Settings className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label>{language === 'uz' ? 'Pixel kodi' : '–ö–æ–¥ –ø–∏–∫—Å–µ–ª—è'}</Label>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => copyToClipboard(fbPixelCode, 'fb')}\n                  >\n                    {copiedCode === 'fb' ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n                <pre className=\"bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-x-auto\">\n                  {fbPixelCode}\n                </pre>\n              </div>\n              <Badge variant=\"outline\" className=\"w-full justify-center\">\n                {language === 'uz' ? 'Sozlanmagan' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n              </Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Conversion Goals */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              {language === 'uz' ? 'Konversiya maqsadlari' : '–¶–µ–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {[\n                {\n                  name: language === 'uz' ? 'Xarid' : '–ü–æ–∫—É–ø–∫–∞',\n                  description: language === 'uz' ? 'Buyurtma yakunlandi' : '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',\n                  value: 'purchase',\n                  conversions: 45,\n                  rate: 2.8\n                },\n                {\n                  name: language === 'uz' ? 'Ro\\'yxatdan o\\'tish' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',\n                  description: language === 'uz' ? 'Yangi foydalanuvchi' : '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',\n                  value: 'sign_up',\n                  conversions: 127,\n                  rate: 8.4\n                },\n                {\n                  name: language === 'uz' ? 'Aloqa' : '–ö–æ–Ω—Ç–∞–∫—Ç',\n                  description: language === 'uz' ? 'Aloqa formasi yuborildi' : '–§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',\n                  value: 'contact',\n                  conversions: 89,\n                  rate: 5.6\n                }\n              ].map((goal, index) => (\n                <div key={index} className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium\">{goal.name}</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">{goal.description}</p>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-bold\">{goal.conversions}</span>\n                    <Badge variant=\"secondary\">{goal.rate}%</Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}","size_bytes":14508},"client/src/pages/admin/AdminOrdersPage.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\nimport { Badge } from '../../components/ui/badge';\nimport { Header } from '../../components/header';\nimport { Footer } from '../../components/footer';\nimport { ArrowLeft, Package, User, Phone, MapPin } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useToast } from '../../hooks/use-toast';\n\ninterface OrderItem {\n  id: string;\n  productId: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  product?: {\n    nameUz: string;\n    nameRu: string;\n  };\n}\n\ninterface Order {\n  id: string;\n  userId: string;\n  totalAmount: string;\n  status: string;\n  customerName: string;\n  customerPhone: string;\n  customerEmail?: string;\n  shippingAddress: string;\n  notes?: string;\n  createdAt: string;\n  items: OrderItem[];\n}\n\nconst statusColors = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  confirmed: 'bg-blue-100 text-blue-800',\n  shipped: 'bg-purple-100 text-purple-800',\n  delivered: 'bg-green-100 text-green-800',\n  cancelled: 'bg-red-100 text-red-800',\n};\n\nconst statusLabels = {\n  pending: 'Kutilmoqda',\n  confirmed: 'Tasdiqlangan',\n  shipped: 'Jo\\'natildi',\n  delivered: 'Yetkazildi',\n  cancelled: 'Bekor qilindi',\n};\n\nconst statusOptions = [\n  { value: 'pending', label: 'Kutilmoqda' },\n  { value: 'confirmed', label: 'Tasdiqlangan' },\n  { value: 'shipped', label: 'Jo\\'natildi' },\n  { value: 'delivered', label: 'Yetkazildi' },\n  { value: 'cancelled', label: 'Bekor qilindi' },\n];\n\nexport default function AdminOrdersPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all orders\n  const { data: orders = [], isLoading } = useQuery<Order[]>({\n    queryKey: ['admin-orders'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/orders');\n      if (!response.ok) {\n        throw new Error('Buyurtmalarni yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Update order status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      const response = await fetch(`/api/admin/orders/${orderId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) {\n        throw new Error('Buyurtma statusini yangilab bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-orders'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Buyurtma statusi yangilandi' });\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Status yangilashda xatolik', variant: 'destructive' });\n    },\n  });\n\n  const handleStatusChange = (orderId: string, newStatus: string) => {\n    updateStatusMutation.mutate({ orderId, status: newStatus });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Admin Panel\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Buyurtmalarni boshqarish</h1>\n          </div>\n        </div>\n\n        {/* Orders Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Barcha buyurtmalar ({orders.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Yuklanmoqda...</div>\n            ) : orders.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <p className=\"text-gray-600\">Hali buyurtmalar yo'q</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {orders.map((order) => (\n                  <div key={order.id} className=\"border rounded-lg p-6\">\n                    {/* Order Header */}\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">#{order.id.slice(0, 8)}</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {new Date(order.createdAt).toLocaleDateString('uz-UZ', {\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-right\">\n                          <p className=\"text-lg font-semibold\">\n                            {parseFloat(order.totalAmount).toLocaleString('uz-UZ')} so'm\n                          </p>\n                        </div>\n                        <Select\n                          value={order.status}\n                          onValueChange={(value) => handleStatusChange(order.id, value)}\n                          disabled={updateStatusMutation.isPending}\n                        >\n                          <SelectTrigger className=\"w-40\">\n                            <SelectValue>\n                              <Badge className={statusColors[order.status as keyof typeof statusColors] || 'bg-gray-100 text-gray-800'}>\n                                {statusLabels[order.status as keyof typeof statusLabels] || order.status}\n                              </Badge>\n                            </SelectValue>\n                          </SelectTrigger>\n                          <SelectContent>\n                            {statusOptions.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    {/* Customer Info */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 p-4 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-500\" />\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Mijoz</p>\n                          <p className=\"font-medium\">{order.customerName}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4 text-gray-500\" />\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Telefon</p>\n                          <p className=\"font-medium\">{order.customerPhone}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4 text-gray-500\" />\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Manzil</p>\n                          <p className=\"font-medium\">{order.shippingAddress}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Order Items */}\n                    {order.items && order.items.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Mahsulotlar</h4>\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Mahsulot</TableHead>\n                              <TableHead>Miqdor</TableHead>\n                              <TableHead>Narxi</TableHead>\n                              <TableHead>Jami</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {order.items.map((item) => (\n                              <TableRow key={item.id}>\n                                <TableCell>\n                                  {item.product?.nameUz || 'Mahsulot nomi topilmadi'}\n                                </TableCell>\n                                <TableCell>{item.quantity}</TableCell>\n                                <TableCell>\n                                  {parseFloat(item.unitPrice).toLocaleString('uz-UZ')} so'm\n                                </TableCell>\n                                <TableCell>\n                                  {parseFloat(item.totalPrice).toLocaleString('uz-UZ')} so'm\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </div>\n                    )}\n\n                    {/* Notes */}\n                    {order.notes && (\n                      <div className=\"mt-4 p-3 bg-blue-50 rounded\">\n                        <p className=\"text-sm text-gray-600\">Izoh:</p>\n                        <p className=\"text-gray-900\">{order.notes}</p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10107},"client/src/pages/admin/AdminProductsPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../components/ui/dialog';\nimport { Input } from '../../components/ui/input';\nimport { Label } from '../../components/ui/label';\nimport { Textarea } from '../../components/ui/textarea';\nimport { Switch } from '../../components/ui/switch';\nimport { Badge } from '../../components/ui/badge';\nimport { Header } from '../../components/header';\nimport { Footer } from '../../components/footer';\nimport { Plus, Edit, Trash2, ArrowLeft, X, Image, Video } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useToast } from '../../hooks/use-toast';\nimport { Product, InsertProduct } from '@shared/schema';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\n\ninterface ProductFormData {\n  nameUz: string;\n  nameRu: string;\n  descriptionUz: string;\n  descriptionRu: string;\n  categoryId: string;\n  sellerId: string;\n  price: string;\n  wholesalePrice: string;\n  minQuantity: number;\n  wholesaleMinQuantity: number;\n  stockQuantity: number;\n  unit: string;\n  specifications: string;\n  image1: string;\n  image2: string;\n  image3: string;\n  videoUrl: string;\n  slug: string;\n  isActive: boolean;\n  isFeatured: boolean;\n}\n\nconst defaultFormData: ProductFormData = {\n  nameUz: '',\n  nameRu: '',\n  descriptionUz: '',\n  descriptionRu: '',\n  categoryId: 'polietilen-paketlar', // Real category ID\n  sellerId: 'admin-user-1', // Real seller ID\n  price: '10000',\n  wholesalePrice: '9000',\n  minQuantity: 1,\n  wholesaleMinQuantity: 10,\n  stockQuantity: 100,\n  unit: 'dona',\n  specifications: '{}',\n  image1: '',\n  image2: '',\n  image3: '',\n  videoUrl: '',\n  slug: '',\n  isActive: true,\n  isFeatured: false,\n};\n\nexport default function AdminProductsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [formData, setFormData] = useState<ProductFormData>(defaultFormData);\n\n  // Fetch categories for dropdown\n  const { data: categories = [] } = useQuery({\n    queryKey: ['admin-categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/categories');\n      if (!response.ok) {\n        throw new Error('Kategoriyalarni yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Fetch products\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['admin-products'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/products');\n      if (!response.ok) {\n        throw new Error('Mahsulotlarni yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Create product mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      const response = await fetch('/api/admin/products', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Mahsulot yaratib bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Admin paneldagi cache'ni yangilash\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\n      // Asosiy saytdagi cache'ni ham yangilash\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products/featured'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      \n      toast({ title: 'Muvaffaqiyat', description: 'Mahsulot yaratildi va saytda ko\\'rsatildi' });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Mahsulot yaratishda xatolik', variant: 'destructive' });\n    },\n  });\n\n  // Update product mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertProduct> }) => {\n      const response = await fetch(`/api/admin/products/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Mahsulotni yangilab bo\\'lmadi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Mahsulot yangilandi' });\n      handleCloseDialog();\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Mahsulotni yangilashda xatolik', variant: 'destructive' });\n    },\n  });\n\n  // Delete product mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/products/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Mahsulotni o\\'chirib bo\\'lmadi');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\n      toast({ title: 'Muvaffaqiyat', description: 'Mahsulot o\\'chirildi' });\n    },\n    onError: () => {\n      toast({ title: 'Xatolik', description: 'Mahsulotni o\\'chirishda xatolik', variant: 'destructive' });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    let specifications = {};\n    try {\n      specifications = JSON.parse(formData.specifications || '{}');\n    } catch {\n      toast({ title: 'Xatolik', description: 'Xususiyatlari maydoni noto\\'g\\'ri JSON formatida', variant: 'destructive' });\n      return;\n    }\n    \n    // Prepare images array\n    const images: string[] = [];\n    if (formData.image1.trim()) images.push(formData.image1.trim());\n    if (formData.image2.trim()) images.push(formData.image2.trim());\n    if (formData.image3.trim()) images.push(formData.image3.trim());\n    \n    const productData: InsertProduct = {\n      ...formData,\n      price: formData.price,\n      wholesalePrice: formData.wholesalePrice,\n      specifications: specifications,\n      images: images.length > 0 ? images : null,\n      videoUrl: formData.videoUrl.trim() || null,\n    };\n\n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, data: productData });\n    } else {\n      createMutation.mutate(productData);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    const images = (product as any).images || [];\n    setFormData({\n      nameUz: product.nameUz,\n      nameRu: product.nameRu,\n      descriptionUz: product.descriptionUz || '',\n      descriptionRu: product.descriptionRu || '',\n      categoryId: product.categoryId,\n      sellerId: product.sellerId,\n      price: product.price,\n      wholesalePrice: product.wholesalePrice,\n      minQuantity: product.minQuantity || 1,\n      wholesaleMinQuantity: (product as any).wholesaleMinQuantity || 1,\n      stockQuantity: product.stockQuantity || 0,\n      unit: product.unit,\n      specifications: JSON.stringify((product as any).specifications || {}),\n      image1: images[0] || '',\n      image2: images[1] || '',\n      image3: images[2] || '',\n      videoUrl: (product as any).videoUrl || '',\n      slug: product.slug,\n      isActive: product.isActive ?? true,\n      isFeatured: product.isFeatured ?? false,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingProduct(null);\n    setFormData(defaultFormData);\n  };\n\n  // Slug yaratish funksiyasi\n  const generateSlug = (text: string) => {\n    return text\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '') // Faqat harflar, raqamlar, bo'sh joy va tire\n      .replace(/\\s+/g, '-') // Bo'sh joylarni tire bilan almashtirish\n      .replace(/-+/g, '-') // Bir nechta tireni bitta tire bilan almashtirish\n      .trim()\n      .replace(/^-|-$/g, ''); // Boshi va oxiridagi tireni olib tashlash\n  };\n\n  // Nom o'zgarganda slug'ni avtomatik yangilash\n  const handleNameChange = (field: 'nameUz' | 'nameRu', value: string) => {\n    const newFormData = { ...formData, [field]: value };\n    \n    // Agar slug bo'sh bo'lsa yoki avvalgi nomdan yaratilgan bo'lsa, yangi slug yaratish\n    if (!formData.slug || formData.slug === generateSlug(formData.nameUz)) {\n      newFormData.slug = generateSlug(value);\n    }\n    \n    setFormData(newFormData);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Mahsulotni o\\'chirishni tasdiqlaysizmi?')) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground py-8\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Admin Panel\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold text-foreground\">Mahsulotlarni boshqarish</h1>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Yangi Mahsulot Qo'shish\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-card text-card-foreground\">\n              <DialogHeader>\n                <DialogTitle className=\"text-foreground\">\n                  {editingProduct ? 'Mahsulotni tahrirlash' : 'Yangi mahsulot qo\\'shish'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Basic Information */}\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"nameUz\" className=\"text-foreground\">Nomi (O'zbek)</Label>\n                      <Input\n                        id=\"nameUz\"\n                        value={formData.nameUz}\n                        onChange={(e) => handleNameChange('nameUz', e.target.value)}\n                        required\n                        className=\"bg-background text-foreground\"\n                        placeholder=\"Mahsulot nomini kiriting\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"nameRu\" className=\"text-foreground\">Nomi (Rus)</Label>\n                      <Input\n                        id=\"nameRu\"\n                        value={formData.nameRu}\n                        onChange={(e) => setFormData({ ...formData, nameRu: e.target.value })}\n                        required\n                        className=\"bg-background text-foreground\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"descriptionUz\" className=\"text-foreground\">Tavsifi (O'zbek)</Label>\n                      <Textarea\n                        id=\"descriptionUz\"\n                        value={formData.descriptionUz}\n                        onChange={(e) => setFormData({ ...formData, descriptionUz: e.target.value })}\n                        rows={3}\n                        className=\"bg-background text-foreground\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"descriptionRu\" className=\"text-foreground\">Tavsifi (Rus)</Label>\n                      <Textarea\n                        id=\"descriptionRu\"\n                        value={formData.descriptionRu}\n                        onChange={(e) => setFormData({ ...formData, descriptionRu: e.target.value })}\n                        rows={3}\n                        className=\"bg-background text-foreground\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Pricing and Details */}\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"categoryId\" className=\"text-foreground\">Kategoriya</Label>\n                      <Select value={formData.categoryId} onValueChange={(value) => setFormData({ ...formData, categoryId: value })}>\n                        <SelectTrigger className=\"bg-background text-foreground\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-card text-card-foreground\">\n                          {categories.map((category: any) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.nameUz}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"price\" className=\"text-foreground\">Narx (so'm)</Label>\n                        <Input\n                          id=\"price\"\n                          value={formData.price}\n                          onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                          required\n                          className=\"bg-background text-foreground\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"wholesalePrice\" className=\"text-foreground\">Optom narx (so'm)</Label>\n                        <Input\n                          id=\"wholesalePrice\"\n                          value={formData.wholesalePrice}\n                          onChange={(e) => setFormData({ ...formData, wholesalePrice: e.target.value })}\n                          required\n                          className=\"bg-background text-foreground\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"minQuantity\" className=\"text-foreground\">Min miqdor (chakana)</Label>\n                        <Input\n                          id=\"minQuantity\"\n                          type=\"number\"\n                          value={formData.minQuantity}\n                          onChange={(e) => setFormData({ ...formData, minQuantity: parseInt(e.target.value) || 1 })}\n                          className=\"bg-background text-foreground\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"wholesaleMinQuantity\" className=\"text-foreground\">Min miqdor (optom)</Label>\n                        <Input\n                          id=\"wholesaleMinQuantity\"\n                          type=\"number\"\n                          value={formData.wholesaleMinQuantity}\n                          onChange={(e) => setFormData({ ...formData, wholesaleMinQuantity: parseInt(e.target.value) || 1 })}\n                          className=\"bg-background text-foreground\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"stockQuantity\" className=\"text-foreground\">Sklad miqdori</Label>\n                        <Input\n                          id=\"stockQuantity\"\n                          type=\"number\"\n                          value={formData.stockQuantity}\n                          onChange={(e) => setFormData({ ...formData, stockQuantity: parseInt(e.target.value) || 0 })}\n                          className=\"bg-background text-foreground\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"unit\" className=\"text-foreground\">O'lchov birligi</Label>\n                        <Input\n                          id=\"unit\"\n                          value={formData.unit}\n                          onChange={(e) => setFormData({ ...formData, unit: e.target.value })}\n                          required\n                          className=\"bg-background text-foreground\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Images Section */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                    <Image className=\"h-5 w-5\" />\n                    Mahsulot rasmlari (maksimal 3 ta)\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"image1\" className=\"text-foreground\">1-rasm URL</Label>\n                      <Input\n                        id=\"image1\"\n                        value={formData.image1}\n                        onChange={(e) => setFormData({ ...formData, image1: e.target.value })}\n                        placeholder=\"https://example.com/image1.jpg\"\n                        className=\"bg-background text-foreground\"\n                      />\n                      {formData.image1 && (\n                        <img src={formData.image1} alt=\"Rasm 1\" className=\"mt-2 w-full h-20 object-cover rounded border\" />\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"image2\" className=\"text-foreground\">2-rasm URL</Label>\n                      <Input\n                        id=\"image2\"\n                        value={formData.image2}\n                        onChange={(e) => setFormData({ ...formData, image2: e.target.value })}\n                        placeholder=\"https://example.com/image2.jpg\"\n                        className=\"bg-background text-foreground\"\n                      />\n                      {formData.image2 && (\n                        <img src={formData.image2} alt=\"Rasm 2\" className=\"mt-2 w-full h-20 object-cover rounded border\" />\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"image3\" className=\"text-foreground\">3-rasm URL</Label>\n                      <Input\n                        id=\"image3\"\n                        value={formData.image3}\n                        onChange={(e) => setFormData({ ...formData, image3: e.target.value })}\n                        placeholder=\"https://example.com/image3.jpg\"\n                        className=\"bg-background text-foreground\"\n                      />\n                      {formData.image3 && (\n                        <img src={formData.image3} alt=\"Rasm 3\" className=\"mt-2 w-full h-20 object-cover rounded border\" />\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Video Section */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n                    <Video className=\"h-5 w-5\" />\n                    Mahsulot videosi (ixtiyoriy)\n                  </h3>\n                  <div>\n                    <Label htmlFor=\"videoUrl\" className=\"text-foreground\">Video URL</Label>\n                    <Input\n                      id=\"videoUrl\"\n                      value={formData.videoUrl}\n                      onChange={(e) => setFormData({ ...formData, videoUrl: e.target.value })}\n                      placeholder=\"https://example.com/video.mp4\"\n                      className=\"bg-background text-foreground\"\n                    />\n                    {formData.videoUrl && (\n                      <video src={formData.videoUrl} className=\"mt-2 w-full max-w-md h-40 object-cover rounded border\" controls />\n                    )}\n                  </div>\n                </div>\n\n                {/* Advanced Options */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"specifications\" className=\"text-foreground\">Xususiyatlari (JSON format)</Label>\n                    <Textarea\n                      id=\"specifications\"\n                      value={formData.specifications}\n                      onChange={(e) => setFormData({ ...formData, specifications: e.target.value })}\n                      placeholder='{\"material\": \"plastik\", \"rang\": \"oq\"}'\n                      rows={3}\n                      className=\"bg-background text-foreground\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"slug\" className=\"text-foreground\">URL slug</Label>\n                    <Input\n                      id=\"slug\"\n                      value={formData.slug}\n                      onChange={(e) => setFormData({ ...formData, slug: e.target.value })}\n                      required\n                      className=\"bg-background text-foreground\"\n                      placeholder=\"avtomatin-yaratiladi\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Mahsulot nomini yozsangiz, avtomatin yaratiladi\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"isActive\"\n                        onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                      />\n                      <Label htmlFor=\"isActive\" className=\"text-foreground\">Faol</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"isFeatured\"\n                        checked={formData.isFeatured}\n                        onCheckedChange={(checked) => setFormData({ ...formData, isFeatured: checked })}\n                      />\n                      <Label htmlFor=\"isFeatured\" className=\"text-foreground\">Bosh sahifada ko'rsatish</Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                    Bekor qilish\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    className=\"bg-primary text-primary-foreground\"\n                  >\n                    {editingProduct ? 'Saqlash' : 'Qo\\'shish'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Products Table */}\n        <Card className=\"bg-card text-card-foreground\">\n          <CardHeader>\n            <CardTitle className=\"text-foreground\">Mahsulotlar ro'yxati</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Yuklanmoqda...</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-foreground\">Rasm</TableHead>\n                    <TableHead className=\"text-foreground\">Nomi</TableHead>\n                    <TableHead className=\"text-foreground\">Kategoriya</TableHead>\n                    <TableHead className=\"text-foreground\">Narx</TableHead>\n                    <TableHead className=\"text-foreground\">Sklad</TableHead>\n                    <TableHead className=\"text-foreground\">Holat</TableHead>\n                    <TableHead className=\"text-foreground\">Amallar</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {products.map((product) => (\n                    <TableRow key={product.id}>\n                      <TableCell>\n                        {((product as any).images && (product as any).images[0]) ? (\n                          <img \n                            src={(product as any).images[0]} \n                            alt={product.nameUz} \n                            className=\"w-10 h-10 object-cover rounded border\"\n                          />\n                        ) : (\n                          <div className=\"w-10 h-10 bg-muted rounded border flex items-center justify-center\">\n                            <Image className=\"w-4 h-4 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"text-foreground\">{product.nameUz}</TableCell>\n                      <TableCell className=\"text-foreground\">{product.categoryId}</TableCell>\n                      <TableCell className=\"text-foreground\">{parseFloat(product.price).toLocaleString()} so'm</TableCell>\n                      <TableCell className=\"text-foreground\">{product.stockQuantity}</TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          {product.isActive ? (\n                            <Badge variant=\"default\">Faol</Badge>\n                          ) : (\n                            <Badge variant=\"secondary\">Nofaol</Badge>\n                          )}\n                          {product.isFeatured && (\n                            <Badge variant=\"outline\">Tavsiya</Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(product)}\n                            data-testid={`edit-product-${product.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(product.id)}\n                            data-testid={`delete-product-${product.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":27375},"client/src/pages/admin/AdminPushNotificationsPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useLanguage } from '@/components/language-provider';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Loader2, Send, Users, Bell, BellRing } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Helmet } from 'react-helmet-async';\n\ninterface PushNotificationData {\n  title: string;\n  body: string;\n  url?: string;\n}\n\nexport default function AdminPushNotificationsPage() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const [notificationData, setNotificationData] = useState<PushNotificationData>({\n    title: '',\n    body: '',\n    url: '/',\n  });\n\n  // Obunchilar sonini olish\n  const { data: subscribersCount, isLoading: isLoadingCount } = useQuery({\n    queryKey: ['/api/push/subscribers-count'],\n  });\n\n  // Push notification yuborish\n  const sendNotificationMutation = useMutation({\n    mutationFn: async (data: PushNotificationData) => {\n      const response = await apiRequest('POST', '/api/push/send', data);\n      return response.json();\n    },\n    onSuccess: (response: any) => {\n      toast({\n        title: language === 'uz' ? 'Muvaffaqiyat!' : '–£—Å–ø–µ—Ö!',\n        description: language === 'uz' \n          ? `${response.successCount || 0} ta foydalanuvchiga bildirishnoma yuborildi`\n          : `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${response.successCount || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,\n      });\n      \n      // Formani tozalash\n      setNotificationData({\n        title: '',\n        body: '',\n        url: '/',\n      });\n      \n      // Cache yangilash\n      queryClient.invalidateQueries({ queryKey: ['/api/push/subscribers-count'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: language === 'uz' ? 'Xatolik' : '–û—à–∏–±–∫–∞',\n        description: error.message || 'Bildirishnoma yuborishda xatolik yuz berdi',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleInputChange = (field: keyof PushNotificationData, value: string) => {\n    setNotificationData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleSendNotification = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!notificationData.title.trim() || !notificationData.body.trim()) {\n      toast({\n        title: language === 'uz' ? 'Xatolik' : '–û—à–∏–±–∫–∞',\n        description: language === 'uz' \n          ? 'Sarlavha va matn maydonlari to\\'ldirilishi shart'\n          : '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    sendNotificationMutation.mutate(notificationData);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {language === 'uz' \n            ? 'Push Bildirishnomalar - Admin Panel | OptomBazar.uz'\n            : 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å | OptomBazar.uz'\n          }\n        </title>\n      </Helmet>\n\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <BellRing className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              {language === 'uz' ? 'Push Bildirishnomalar' : 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {language === 'uz' \n                ? 'Foydalanuvchilarga bildirishnomalar yuborish'\n                : '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'\n              }\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* Obunchilar statistikasi */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Jami obunchilar' : '–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'}\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {isLoadingCount ? (\n                  <Loader2 className=\"h-6 w-6 animate-spin\" />\n                ) : (\n                  (subscribersCount as any)?.count || 0\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {language === 'uz' \n                  ? 'Faol push notification obunachilari'\n                  : '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'\n                }\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Bildirishnoma yuborish formi */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Send className=\"h-5 w-5\" />\n                {language === 'uz' ? 'Yangi bildirishnoma yuborish' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}\n              </CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Barcha obunachilarga bildirishnoma yuborish uchun quyidagi formani to\\'ldiring'\n                  : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSendNotification} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notification-title\">\n                    {language === 'uz' ? 'Sarlavha' : '–ó–∞–≥–æ–ª–æ–≤–æ–∫'} *\n                  </Label>\n                  <Input\n                    id=\"notification-title\"\n                    value={notificationData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder={language === 'uz' ? 'Bildirishnoma sarlavhasi' : '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}\n                    maxLength={100}\n                    data-testid=\"input-notification-title\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    {notificationData.title.length}/100\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notification-body\">\n                    {language === 'uz' ? 'Matn' : '–¢–µ–∫—Å—Ç'} *\n                  </Label>\n                  <Textarea\n                    id=\"notification-body\"\n                    value={notificationData.body}\n                    onChange={(e) => handleInputChange('body', e.target.value)}\n                    placeholder={language === 'uz' ? 'Bildirishnoma matni' : '–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}\n                    rows={4}\n                    maxLength={300}\n                    data-testid=\"textarea-notification-body\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    {notificationData.body.length}/300\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notification-url\">\n                    {language === 'uz' ? 'Havola (ixtiyoriy)' : '–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'}\n                  </Label>\n                  <Input\n                    id=\"notification-url\"\n                    value={notificationData.url}\n                    onChange={(e) => handleInputChange('url', e.target.value)}\n                    placeholder={language === 'uz' ? 'Masalan: /products/yangi-mahsulot' : '–ù–∞–ø—Ä–∏–º–µ—Ä: /products/novyy-tovar'}\n                    data-testid=\"input-notification-url\"\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    {language === 'uz' \n                      ? 'Foydalanuvchi bildirishnomani bosganda ochilishi kerak bo\\'lgan sahifa'\n                      : '–°—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'\n                    }\n                  </p>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={sendNotificationMutation.isPending || ((subscribersCount as any)?.count || 0) === 0}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-send-notification\"\n                  >\n                    {sendNotificationMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      <Bell className=\"h-4 w-4\" />\n                    )}\n                    {language === 'uz' ? 'Yuborish' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}\n                    {(subscribersCount as any)?.count && (\n                      <span className=\"bg-white/20 px-2 py-1 rounded text-xs\">\n                        {(subscribersCount as any).count}\n                      </span>\n                    )}\n                  </Button>\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setNotificationData({ title: '', body: '', url: '/' })}\n                    disabled={sendNotificationMutation.isPending}\n                    data-testid=\"button-clear-form\"\n                  >\n                    {language === 'uz' ? 'Tozalash' : '–û—á–∏—Å—Ç–∏—Ç—å'}\n                  </Button>\n                </div>\n\n                {((subscribersCount as any)?.count || 0) === 0 && (\n                  <div className=\"text-sm text-amber-600 bg-amber-50 dark:bg-amber-950/20 p-3 rounded\">\n                    {language === 'uz' \n                      ? 'Hozircha hech kim push notification\\'larga obuna bo\\'lmagan'\n                      : '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'\n                    }\n                  </div>\n                )}\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bildirishnoma tavsiyalari */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {language === 'uz' ? 'Bildirishnoma yozish bo\\'yicha tavsiyalar' : '–°–æ–≤–µ—Ç—ã –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">\n                  {language === 'uz' ? 'Yaxshi misollar:' : '–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã:'}\n                </h4>\n                <ul className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                  <li>‚Ä¢ {language === 'uz' ? 'Yangi mahsulot: Premium paketlar 20% chegirma!' : '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä: –ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç—ã —Å–∫–∏–¥–∫–∞ 20%!'}</li>\n                  <li>‚Ä¢ {language === 'uz' ? 'Buyurtmangiz tayyor! #12345' : '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! #12345'}</li>\n                  <li>‚Ä¢ {language === 'uz' ? 'Blog: Qishloq xo\\'jaligi mahsulotlari haqida yangi maqola' : '–ë–ª–æ–≥: –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –æ —Å–µ–ª—å—Ö–æ–∑–ø—Ä–æ–¥—É–∫—Ü–∏–∏'}</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-medium mb-2\">\n                  {language === 'uz' ? 'Qoidalar:' : '–ü—Ä–∞–≤–∏–ª–∞:'}\n                </h4>\n                <ul className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                  <li>‚Ä¢ {language === 'uz' ? 'Qisqa va aniq yozing' : '–ü–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ'}</li>\n                  <li>‚Ä¢ {language === 'uz' ? 'Foydali ma\\'lumot bering' : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'}</li>\n                  <li>‚Ä¢ {language === 'uz' ? 'Spam qilmang' : '–ù–µ —Å–ø–∞–º—å—Ç–µ'}</li>\n                  <li>‚Ä¢ {language === 'uz' ? 'Harakatga chaqirish qo\\'shing' : '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é'}</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}","size_bytes":12574},"client/src/pages/admin/AdminSEOPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Search, \n  CheckCircle, \n  AlertTriangle, \n  XCircle, \n  ExternalLink,\n  FileText,\n  Link as LinkIcon,\n  Image,\n  Clock,\n  BarChart3\n} from 'lucide-react';\n\ninterface SEOCheck {\n  id: string;\n  title: string;\n  status: 'pass' | 'warning' | 'fail';\n  description: string;\n  recommendation?: string;\n  value?: string;\n}\n\ninterface PageSEOAnalysis {\n  url: string;\n  title: string;\n  score: number;\n  checks: SEOCheck[];\n  lastChecked: Date;\n}\n\nexport default function AdminSEOPage() {\n  const [analysisUrl, setAnalysisUrl] = useState('');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<PageSEOAnalysis | null>(null);\n\n  // Sayt SEO hisobotlarini olish\n  const { data: seoReport, isLoading } = useQuery({\n    queryKey: ['admin-seo-report'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/seo/report');\n      if (!response.ok) {\n        throw new Error('SEO hisobotni yuklab bo\\'lmadi');\n      }\n      return response.json();\n    },\n  });\n\n  // Sahifani SEO jihatdan tahlil qilish\n  const analyzePage = async () => {\n    if (!analysisUrl) return;\n    \n    setIsAnalyzing(true);\n    try {\n      const response = await fetch('/api/admin/seo/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ url: analysisUrl })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Tahlil amalga oshirilmadi');\n      }\n      \n      const result = await response.json();\n      setAnalysisResult(result);\n    } catch (error) {\n      console.error('SEO tahlil xatoligi:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'fail':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            SEO Monitoring va Tahlil\n          </h1>\n          <p className=\"text-gray-600\">\n            Sayt sahifalarining SEO holatini kuzatib boring va optimallashtiring\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Umumiy Ko'rinish</TabsTrigger>\n            <TabsTrigger value=\"analyzer\">Sahifa Tahlili</TabsTrigger>\n            <TabsTrigger value=\"sitemap\">Sitemap Monitor</TabsTrigger>\n            <TabsTrigger value=\"reports\">Hisobotlar</TabsTrigger>\n          </TabsList>\n\n          {/* Umumiy ko'rinish */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"animate-pulse space-y-3\">\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                        <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <>\n                {/* SEO metrikalar */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Umumiy SEO Ball</p>\n                          <p className=\"text-2xl font-bold text-green-600\">85/100</p>\n                        </div>\n                        <BarChart3 className=\"h-8 w-8 text-green-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Indexlangan Sahifalar</p>\n                          <p className=\"text-2xl font-bold text-blue-600\">247</p>\n                        </div>\n                        <FileText className=\"h-8 w-8 text-blue-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Ichki Linklar</p>\n                          <p className=\"text-2xl font-bold text-purple-600\">1,523</p>\n                        </div>\n                        <LinkIcon className=\"h-8 w-8 text-purple-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Optimallashgan Rasmlar</p>\n                          <p className=\"text-2xl font-bold text-orange-600\">92%</p>\n                        </div>\n                        <Image className=\"h-8 w-8 text-orange-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* So'nggi SEO tekshiruvlari */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>So'nggi SEO Tekshiruvlari</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {[\n                        { page: '/catalog', score: 88, issues: 2, lastCheck: '5 daqiqa oldin' },\n                        { page: '/products/polietilen-paketlar', score: 92, issues: 1, lastCheck: '15 daqiqa oldin' },\n                        { page: '/blog/optom-savdo-maslahatlari', score: 95, issues: 0, lastCheck: '1 soat oldin' },\n                        { page: '/category/plastik-idishlar', score: 76, issues: 3, lastCheck: '2 soat oldin' }\n                      ].map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className={`text-2xl font-bold ${getScoreColor(item.score)}`}>\n                              {item.score}\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{item.page}</p>\n                              <p className=\"text-sm text-gray-500\">\n                                {item.issues > 0 ? `${item.issues} ta muammo` : 'Muammolar yo\\'q'}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm text-gray-500\">\n                              <Clock className=\"h-4 w-4 inline mr-1\" />\n                              {item.lastCheck}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n          </TabsContent>\n\n          {/* Sahifa tahlili */}\n          <TabsContent value=\"analyzer\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Sahifa SEO Tahlili</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-4\">\n                  <Input\n                    placeholder=\"Tahlil qilinadigan sahifa URL manzili...\"\n                    value={analysisUrl}\n                    onChange={(e) => setAnalysisUrl(e.target.value)}\n                    className=\"flex-1\"\n                  />\n                  <Button \n                    onClick={analyzePage}\n                    disabled={isAnalyzing || !analysisUrl}\n                    className=\"min-w-[120px]\"\n                  >\n                    {isAnalyzing ? 'Tahlil...' : 'Tahlil Qilish'}\n                  </Button>\n                </div>\n\n                {analysisResult && (\n                  <div className=\"mt-6 space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold\">Tahlil Natijasi</h3>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`text-3xl font-bold ${getScoreColor(analysisResult.score)}`}>\n                          {analysisResult.score}/100\n                        </div>\n                        <Progress value={analysisResult.score} className=\"w-32\" />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      {analysisResult.checks.map((check) => (\n                        <div key={check.id} className=\"flex items-start space-x-3 p-4 border rounded-lg\">\n                          {getStatusIcon(check.status)}\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <h4 className=\"font-medium\">{check.title}</h4>\n                              <Badge variant={\n                                check.status === 'pass' ? 'default' : \n                                check.status === 'warning' ? 'secondary' : 'destructive'\n                              }>\n                                {check.status === 'pass' ? 'O\\'tdi' : \n                                 check.status === 'warning' ? 'Ogohlantirish' : 'Xatolik'}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mt-1\">{check.description}</p>\n                            {check.value && (\n                              <p className=\"text-sm text-blue-600 mt-1\">Qiymat: {check.value}</p>\n                            )}\n                            {check.recommendation && (\n                              <div className=\"mt-2 p-3 bg-blue-50 rounded\">\n                                <p className=\"text-sm text-blue-800\">\n                                  <strong>Tavsiya:</strong> {check.recommendation}\n                                </p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sitemap monitor */}\n          <TabsContent value=\"sitemap\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Sitemap Holati</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">sitemap.xml</h4>\n                      <p className=\"text-sm text-gray-500\">Oxirgi yangilanish: Bugun 14:30</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"default\">Faol</Badge>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <ExternalLink className=\"h-4 w-4 mr-2\" />\n                        Ko'rish\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">robots.txt</h4>\n                      <p className=\"text-sm text-gray-500\">Oxirgi tekshiruv: Bugun 12:15</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"default\">Faol</Badge>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <ExternalLink className=\"h-4 w-4 mr-2\" />\n                        Ko'rish\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm text-gray-600\">Jami sahifalar</p>\n                        <p className=\"text-2xl font-bold\">247</p>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm text-gray-600\">Mahsulotlar</p>\n                        <p className=\"text-2xl font-bold\">156</p>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm text-gray-600\">Blog postlar</p>\n                        <p className=\"text-2xl font-bold\">43</p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Hisobotlar */}\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>SEO Hisobotlar</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    SEO hisobotlari avtomatik ravishda har hafta yaratiladi va sizga email orqali yuboriladi.\n                  </p>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {[\n                      { title: 'Haftalik SEO Hisobot', date: '18 Yanvar 2025', score: 87 },\n                      { title: 'Haftalik SEO Hisobot', date: '11 Yanvar 2025', score: 84 },\n                      { title: 'Haftalik SEO Hisobot', date: '4 Yanvar 2025', score: 82 },\n                      { title: 'Haftalik SEO Hisobot', date: '28 Dekabr 2024', score: 79 }\n                    ].map((report, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">{report.title}</h4>\n                          <p className=\"text-sm text-gray-500\">{report.date}</p>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <span className={`text-lg font-bold ${getScoreColor(report.score)}`}>\n                            {report.score}/100\n                          </span>\n                          <Button variant=\"outline\" size=\"sm\">\n                            Yuklab olish\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16753},"client/src/pages/admin/ReportsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\nimport { Activity, TrendingUp, Users, ShoppingCart, Eye, Search, DollarSign, Package } from \"lucide-react\";\n\ninterface ReportsSummary {\n  totalUsers: number;\n  totalOrders: number;\n  totalRevenue: number;\n  popularProducts: Array<{\n    id: string;\n    name: string;\n    views: number;\n    orders: number;\n    revenue: number;\n  }>;\n  recentActivity: number;\n}\n\ninterface UserActivityReport {\n  dailyVisits: Array<{ date: string; visits: number; uniqueUsers: number }>;\n  weeklyStats: Array<{ week: string; visits: number; registrations: number }>;\n  monthlyStats: Array<{ month: string; visits: number; registrations: number }>;\n}\n\ninterface SalesReport {\n  dailySales: Array<{ date: string; orders: number; revenue: number }>;\n  topProducts: Array<{\n    id: string;\n    name: string;\n    orders: number;\n    revenue: number;\n    category: string;\n  }>;\n  topCategories: Array<{\n    id: string;\n    name: string;\n    orders: number;\n    revenue: number;\n  }>;\n}\n\ninterface PopularProductsReport {\n  mostViewed: Array<{\n    id: string;\n    name: string;\n    views: number;\n    category: string;\n  }>;\n  mostAddedToCart: Array<{\n    id: string;\n    name: string;\n    cartAdds: number;\n    category: string;\n  }>;\n  mostOrdered: Array<{\n    id: string;\n    name: string;\n    orders: number;\n    revenue: number;\n    category: string;\n  }>;\n}\n\ninterface SearchTermsReport {\n  topSearches: Array<{\n    term: string;\n    count: number;\n    resultsAvg: number;\n  }>;\n  noResultSearches: Array<{\n    term: string;\n    count: number;\n  }>;\n  recentSearches: Array<{\n    term: string;\n    timestamp: string;\n    results: number;\n  }>;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];\n\nexport default function ReportsPage() {\n  const [dateRange, setDateRange] = useState<string>(\"30\");\n\n  // API queries\n  const { data: summary, isLoading: summaryLoading } = useQuery<ReportsSummary>({\n    queryKey: ['/api/admin/reports/summary'],\n  });\n\n  const { data: userActivity, isLoading: userActivityLoading } = useQuery<UserActivityReport>({\n    queryKey: ['/api/admin/reports/user-activity'],\n  });\n\n  const { data: salesReport, isLoading: salesLoading } = useQuery<SalesReport>({\n    queryKey: ['/api/admin/reports/sales'],\n  });\n\n  const { data: popularProducts, isLoading: popularProductsLoading } = useQuery<PopularProductsReport>({\n    queryKey: ['/api/admin/reports/popular-products'],\n  });\n\n  const { data: searchTerms, isLoading: searchTermsLoading } = useQuery<SearchTermsReport>({\n    queryKey: ['/api/admin/reports/search-terms'],\n  });\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('uz-UZ', {\n      style: 'currency',\n      currency: 'UZS',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  // Summary cards data\n  const summaryCards = [\n    {\n      title: \"Jami foydalanuvchilar\",\n      value: summary?.totalUsers || 0,\n      icon: Users,\n      color: \"bg-blue-500\",\n    },\n    {\n      title: \"Jami buyurtmalar\",\n      value: summary?.totalOrders || 0,\n      icon: ShoppingCart,\n      color: \"bg-green-500\",\n    },\n    {\n      title: \"Jami daromad\",\n      value: formatCurrency(summary?.totalRevenue || 0),\n      icon: DollarSign,\n      color: \"bg-yellow-500\",\n    },\n    {\n      title: \"So'nggi faollik\",\n      value: summary?.recentActivity || 0,\n      icon: Activity,\n      color: \"bg-purple-500\",\n    },\n  ];\n\n  if (summaryLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          <p className=\"mt-4\">Hisobotlar yuklanmoqda...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold\">Hisobotlar va Analitika</h1>\n        <select\n          value={dateRange}\n          onChange={(e) => setDateRange(e.target.value)}\n          className=\"px-4 py-2 border rounded-md\"\n        >\n          <option value=\"7\">So'nggi 7 kun</option>\n          <option value=\"30\">So'nggi 30 kun</option>\n          <option value=\"90\">So'nggi 90 kun</option>\n        </select>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n        {summaryCards.map((card, index) => {\n          const Icon = card.icon;\n          return (\n            <Card key={index}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">{card.title}</CardTitle>\n                <Icon className={`h-4 w-4 text-white p-1 rounded ${card.color}`} />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{card.value}</div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Umumiy ko'rinish</TabsTrigger>\n          <TabsTrigger value=\"activity\">Foydalanuvchi faolligi</TabsTrigger>\n          <TabsTrigger value=\"sales\">Sotishlar</TabsTrigger>\n          <TabsTrigger value=\"products\">Ommabop mahsulotlar</TabsTrigger>\n          <TabsTrigger value=\"search\">Qidiruv so'zlari</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Kunlik tashriflar</CardTitle>\n                <CardDescription>So'nggi 30 kundagi tashriflar</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {userActivityLoading ? (\n                  <div className=\"h-64 flex items-center justify-center\">Yuklanmoqda...</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={userActivity?.dailyVisits}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"visits\" stroke=\"#8884d8\" />\n                      <Line type=\"monotone\" dataKey=\"uniqueUsers\" stroke=\"#82ca9d\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Eng ommabop mahsulotlar</CardTitle>\n                <CardDescription>Ko'rinish va buyurtmalar bo'yicha</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {summary?.popularProducts.slice(0, 5).map((product, index) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">{product.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {product.views} ko'rinish ‚Ä¢ {product.orders} buyurtma\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\">\n                        {formatCurrency(product.revenue)}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* User Activity Tab */}\n        <TabsContent value=\"activity\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Haftalik statistika</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {userActivityLoading ? (\n                  <div className=\"h-64 flex items-center justify-center\">Yuklanmoqda...</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={userActivity?.weeklyStats}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"week\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"visits\" fill=\"#8884d8\" />\n                      <Bar dataKey=\"registrations\" fill=\"#82ca9d\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Oylik statistika</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {userActivityLoading ? (\n                  <div className=\"h-64 flex items-center justify-center\">Yuklanmoqda...</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={userActivity?.monthlyStats}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"visits\" fill=\"#8884d8\" />\n                      <Bar dataKey=\"registrations\" fill=\"#82ca9d\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Sales Tab */}\n        <TabsContent value=\"sales\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Kunlik sotishlar</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {salesLoading ? (\n                  <div className=\"h-64 flex items-center justify-center\">Yuklanmoqda...</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={salesReport?.dailySales}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#8884d8\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Eng ko'p sotilgan mahsulotlar</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Mahsulot</TableHead>\n                        <TableHead>Buyurtmalar</TableHead>\n                        <TableHead>Daromad</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {salesReport?.topProducts.slice(0, 5).map((product) => (\n                        <TableRow key={product.id}>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{product.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{product.category}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>{product.orders}</TableCell>\n                          <TableCell>{formatCurrency(product.revenue)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Kategoriyalar bo'yicha sotish</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {salesLoading ? (\n                    <div className=\"h-64 flex items-center justify-center\">Yuklanmoqda...</div>\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={salesReport?.topCategories}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={(entry) => entry.name}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"revenue\"\n                        >\n                          {salesReport?.topCategories.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Popular Products Tab */}\n        <TabsContent value=\"products\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Eye className=\"h-5 w-5\" />\n                  Eng ko'p ko'rilgan\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {popularProducts?.mostViewed.slice(0, 10).map((product, index) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{product.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{product.category}</p>\n                      </div>\n                      <Badge variant=\"secondary\">{product.views}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingCart className=\"h-5 w-5\" />\n                  Eng ko'p savatga qo'shilgan\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {popularProducts?.mostAddedToCart.slice(0, 10).map((product, index) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{product.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{product.category}</p>\n                      </div>\n                      <Badge variant=\"secondary\">{product.cartAdds}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  Eng ko'p buyurtma qilingan\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {popularProducts?.mostOrdered.slice(0, 10).map((product, index) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{product.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{product.category}</p>\n                        <p className=\"text-xs text-green-600\">{formatCurrency(product.revenue)}</p>\n                      </div>\n                      <Badge variant=\"secondary\">{product.orders}</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Search Terms Tab */}\n        <TabsContent value=\"search\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Search className=\"h-5 w-5\" />\n                  Eng ko'p qidirilgan so'zlar\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Qidiruv so'zi</TableHead>\n                      <TableHead>Miqdor</TableHead>\n                      <TableHead>O'rtacha natija</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {searchTerms?.topSearches.slice(0, 10).map((term, index) => (\n                      <TableRow key={index}>\n                        <TableCell className=\"font-medium\">{term.term}</TableCell>\n                        <TableCell>{term.count}</TableCell>\n                        <TableCell>{term.resultsAvg}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Natija bermagan qidiruvlar</CardTitle>\n                <CardDescription>Bu so'zlar uchun mahsulot qo'shish kerak</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {searchTerms?.noResultSearches.slice(0, 10).map((term, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <p className=\"font-medium\">{term.term}</p>\n                      <Badge variant=\"destructive\">{term.count} marta</Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":19120},"client/src/components/AppInstallPrompt.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Download, X, Smartphone, Monitor } from 'lucide-react';\nimport { useLanguage } from './language-provider';\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\ndeclare global {\n  interface WindowEventMap {\n    beforeinstallprompt: BeforeInstallPromptEvent;\n  }\n}\n\nexport function AppInstallPrompt() {\n  const { language, t } = useLanguage();\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showDialog, setShowDialog] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  const translations = {\n    uz: {\n      installApp: 'Ilovani o\\'rnatish',\n      appTitle: 'OptomBazar.uz ilovasini o\\'rnating',\n      appDescription: 'Tez va qulay foydalanish uchun ilovamizni telefoningizga yoki kompyuteringizga o\\'rnating. Offline rejimda ham ishlay olasiz!',\n      installButton: 'O\\'rnatish',\n      laterButton: 'Keyinroq',\n      benefits: [\n        'Tez ochiladi va ishlay boshlaydi',\n        'Internetga bog\\'lanmasdan ham ishlaydi',\n        'Push bildirishnomalar olasiz',\n        'Telefon menyusida o\\'z o\\'rni bo\\'ladi'\n      ],\n      installInstructions: {\n        android: 'Chrome: Menyuga boring ‚Üí \"Bosh sahifaga qo\\'shish\"',\n        ios: 'Safari: Baham berish tugmasini bosing ‚Üí \"Bosh sahifaga qo\\'shish\"',\n        desktop: 'Brauzer manzil qatorida o\\'rnatish tugmasini bosing'\n      }\n    },\n    ru: {\n      installApp: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',\n      appTitle: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OptomBazar.uz',\n      appDescription: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!',\n      installButton: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',\n      laterButton: '–ü–æ–∑–∂–µ',\n      benefits: [\n        '–ë—ã—Å—Ç—Ä–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç',\n        '–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',\n        '–ü–æ–ª—É—á–∞–π—Ç–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',\n        '–ò–º–µ–µ—Ç —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ –º–µ–Ω—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞'\n      ],\n      installInstructions: {\n        android: 'Chrome: –í–æ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ‚Üí \"–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω\"',\n        ios: 'Safari: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí \"–ù–∞ —ç–∫—Ä–∞–Ω –î–æ–º–æ–π\"',\n        desktop: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞'\n      }\n    }\n  };\n\n  const currentTranslations = translations[language];\n\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: BeforeInstallPromptEvent) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      \n      // Faqat mobil qurilmalarda avtomatik ko'rsatish\n      const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      if (isMobile && !localStorage.getItem('app-install-dismissed')) {\n        setTimeout(() => setShowDialog(true), 3000); // 3 soniyadan keyin ko'rsatish\n      }\n    };\n\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setDeferredPrompt(null);\n      setShowDialog(false);\n    };\n\n    // PWA allaqachon o'rnatilganligini tekshirish\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      setIsInstalled(true);\n    }\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (deferredPrompt) {\n      try {\n        await deferredPrompt.prompt();\n        const { outcome } = await deferredPrompt.userChoice;\n        \n        if (outcome === 'accepted') {\n          console.log('Foydalanuvchi ilovani o\\'rnatdi');\n        } else {\n          console.log('Foydalanuvchi o\\'rnatishni rad etdi');\n          localStorage.setItem('app-install-dismissed', 'true');\n        }\n        \n        setDeferredPrompt(null);\n        setShowDialog(false);\n      } catch (error) {\n        console.error('O\\'rnatishda xatolik:', error);\n      }\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowDialog(false);\n    localStorage.setItem('app-install-dismissed', 'true');\n  };\n\n  const getUserAgent = () => {\n    const ua = navigator.userAgent;\n    if (ua.includes('iPhone') || ua.includes('iPad')) return 'ios';\n    if (ua.includes('Android')) return 'android';\n    return 'desktop';\n  };\n\n  if (isInstalled) return null;\n\n  return (\n    <Dialog open={showDialog} onOpenChange={setShowDialog}>\n      <DialogContent className=\"max-w-md mx-4\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-lg\">\n            <div className=\"p-2 rounded-lg bg-blue-500 text-white\">\n              <Download className=\"h-5 w-5\" />\n            </div>\n            {currentTranslations.appTitle}\n          </DialogTitle>\n          <DialogDescription className=\"text-base\">\n            {currentTranslations.appDescription}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Afzalliklar */}\n          <div className=\"space-y-2\">\n            {currentTranslations.benefits.map((benefit, index) => (\n              <div key={index} className=\"flex items-start gap-2 text-sm\">\n                <div className=\"h-1.5 w-1.5 rounded-full bg-green-500 mt-2 flex-shrink-0\" />\n                <span>{benefit}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* O'rnatish yo'riqnomasi */}\n          <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              {getUserAgent() === 'desktop' ? (\n                <Monitor className=\"h-4 w-4\" />\n              ) : (\n                <Smartphone className=\"h-4 w-4\" />\n              )}\n              <span className=\"text-sm font-medium\">\n                {language === 'uz' ? 'Qanday o\\'rnatish kerak:' : '–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:'}\n              </span>\n            </div>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n              {currentTranslations.installInstructions[getUserAgent()]}\n            </p>\n          </div>\n\n          {/* Tugmalar */}\n          <div className=\"flex gap-2\">\n            {deferredPrompt && (\n              <Button \n                onClick={handleInstallClick} \n                className=\"flex-1\"\n                data-testid=\"button-install-app\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {currentTranslations.installButton}\n              </Button>\n            )}\n            \n            <Button \n              variant=\"outline\" \n              onClick={handleDismiss}\n              className=\"flex-1\"\n              data-testid=\"button-dismiss-install\"\n            >\n              {currentTranslations.laterButton}\n            </Button>\n          </div>\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute right-4 top-4\"\n          onClick={handleDismiss}\n          data-testid=\"button-close-install\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Header va boshqa joylarda foydalanish uchun mini tugma\nexport function AppInstallButton({ variant = \"outline\" }: { variant?: \"outline\" | \"ghost\" | \"default\" }) {\n  const { language } = useLanguage();\n  const [canInstall, setCanInstall] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  const buttonText = language === 'uz' ? 'Ilovani o\\'rnatish' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';\n\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: BeforeInstallPromptEvent) => {\n      e.preventDefault();\n      setCanInstall(true);\n      (window as any).deferredPrompt = e;\n    };\n\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setCanInstall(false);\n    };\n\n    // PWA allaqachon o'rnatilganligini tekshirish\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      setIsInstalled(true);\n    }\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleClick = async () => {\n    const deferredPrompt = (window as any).deferredPrompt;\n    if (deferredPrompt) {\n      try {\n        await deferredPrompt.prompt();\n        const { outcome } = await deferredPrompt.userChoice;\n        \n        if (outcome === 'accepted') {\n          setCanInstall(false);\n        }\n        \n        (window as any).deferredPrompt = null;\n      } catch (error) {\n        console.error('O\\'rnatishda xatolik:', error);\n      }\n    }\n  };\n\n  if (isInstalled || !canInstall) return null;\n\n  return (\n    <Button \n      variant={variant} \n      size=\"sm\" \n      onClick={handleClick}\n      className=\"flex items-center gap-2\"\n      data-testid=\"button-install-app-mini\"\n    >\n      <Download className=\"h-4 w-4\" />\n      <span className=\"hidden sm:inline\">{buttonText}</span>\n    </Button>\n  );\n}","size_bytes":9807},"ENVIRONMENT_VARIABLES.md":{"content":"# Environment Variables - OptomBazar.uz Deploy qilish\n\n## Majburiy o'zgaruvchilar (Required)\n\n### 1. DATABASE_URL\n```\npostgres://username:password@host:port/database\n```\n**Izoh:** PostgreSQL database connection string. Render.com avtomatik yaratadi.\n\n### 2. NODE_ENV\n```\nproduction\n```\n**Izoh:** Production muhitini belgilash\n\n### 3. SESSION_SECRET\n```\nstrong-random-secret-key-here\n```\n**Izoh:** Session xavfsizligi uchun. Render.com avtomatik yaratishi mumkin.\n\n### 4. PORT\n```\n10000\n```\n**Izoh:** Render.com standart porti\n\n## Ixtiyoriy o'zgaruvchilar (Optional)\n\n### AI Chat Functionality\n```\nGOOGLE_AI_API_KEY=your_google_gemini_api_key\n```\n**Funktsiya:** AI chat yordamchisi ishlashi uchun\n\n### Telegram Bot Integration\n```\nTELEGRAM_BOT_TOKEN=your_telegram_bot_token\nTELEGRAM_CHAT_ID=your_telegram_chat_id\n```\n**Funktsiya:** Yangi xabarlar haqida Telegram orqali xabar olish\n\n### Push Notifications\n```\nVAPID_PUBLIC_KEY=your_vapid_public_key\nVAPID_PRIVATE_KEY=your_vapid_private_key\n```\n**Funktsiya:** Web push xabarlari yuborish\n\n### Analytics va Marketing\n```\nGOOGLE_ANALYTICS_ID=GA4-MEASUREMENT-ID\nFACEBOOK_PIXEL_ID=your_facebook_pixel_id\nGOOGLE_TAG_MANAGER_ID=GTM-XXXXXXX\n```\n**Funktsiya:** Statistika va marketing tracking\n\n## Render.com da qo'yish tartibi\n\n1. **Dashboard** -> **Environment** bo'limiga kirina\n2. **Key** va **Value** maydonlarini to'ldirina\n3. **Add** tugmasini bosina\n4. Service ni qayta deploy qilina\n\n## Xavfsizlik eslatmalari\n\n- Hech qachon API kalitlarni kod ichida yozmang\n- Barcha muhim ma'lumotlarni environment variables orqali saqlang\n- Production da faqat kerakli API kalitlarni qo'shing\n\n## Test qilish\n\nEnvironment variables to'g'ri o'rnatilganligini tekshirish uchun:\n```bash\ncurl https://your-render-url.com/health\n```\n\nJavob:\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\",\n  \"uptime\": 123.456,\n  \"environment\": \"production\"\n}\n```","size_bytes":1903},"IMPROVEMENTS_SUMMARY.md":{"content":"# Optombazar.uz - Loyiha Tahlili va Yaxshilanishlar\n\n## üìã Bajarilgan Ishlar\n\n### 1. üîß Xatoliklarni Tuzatish\n\n#### TypeScript Xatoliklari\n- ‚úÖ `useAnalytics.ts` da global Window interface xatoligini tuzatdim\n- ‚úÖ Server fayllarida type annotation xatoliklarini tuzatdim\n- ‚úÖ Product va Category type'larini to'g'ri import qildim\n- ‚úÖ Barcha implicit 'any' type xatoliklarini tuzatdim\n\n#### Server Konfiguratsiyasi\n- ‚úÖ IPv6 muammosini hal qildim - IPv4 (127.0.0.1) ga o'tkazdim\n- ‚úÖ Windows uchun cross-env dependency qo'shdim\n- ‚úÖ Port binding muammolarini hal qildim\n\n### 2. üé® Dizayn Yaxshilanishlari\n\n#### CSS va Styling\n- ‚úÖ Modern gradient ranglarni qo'shdim\n- ‚úÖ Glass morphism effektlarini qo'shdim\n- ‚úÖ Yangi animatsiyalar qo'shdim (float, pulse-slow, bounce-slow)\n- ‚úÖ Modern shadow effektlari (shadow-modern, shadow-glow)\n- ‚úÖ Custom scrollbar dizayni\n- ‚úÖ Smooth scroll behavior\n\n#### Home Page Yaxshilanishlari\n- ‚úÖ Hero section'da ko'proq animatsiya elementlari\n- ‚úÖ Statistika kartalarida glass morphism va hover effektlari\n- ‚úÖ Kategoriya kartalarida modern hover animatsiyalari\n- ‚úÖ Features section'da yaxshilangan dizayn\n- ‚úÖ Gradient text effektlari\n\n#### Header Yaxshilanishlari\n- ‚úÖ Backdrop blur effekti qo'shdim\n- ‚úÖ Top bar'da gradient background\n- ‚úÖ Yaxshilangan border va shadow effektlari\n\n### 3. üöÄ Texnik Yaxshilanishlar\n\n#### Performance\n- ‚úÖ Backdrop-blur va glass morphism effektlari\n- ‚úÖ CSS animatsiyalarni optimizatsiya qildim\n- ‚úÖ Hover effektlarini smooth qildim\n\n#### User Experience\n- ‚úÖ Yaxshilangan hover animatsiyalari\n- ‚úÖ Ko'proq interaktiv elementlar\n- ‚úÖ Modern visual feedback\n\n## üéØ Asosiy Yaxshilanishlar\n\n### 1. Modern Visual Design\n- **Glass Morphism**: Zamonaviy shaffof effektlar\n- **Gradient Backgrounds**: Chiroyli rang o'tishlari\n- **Advanced Animations**: Smooth va professional animatsiyalar\n- **Interactive Elements**: Hover va focus effektlari\n\n### 2. Better Performance\n- **Optimized CSS**: Efficient styling\n- **Smooth Transitions**: 60fps animatsiyalar\n- **Responsive Design**: Barcha qurilmalarda yaxshi ko'rinish\n\n### 3. Enhanced User Experience\n- **Visual Feedback**: Foydalanuvchi harakatlari uchun javob\n- **Modern Interactions**: Zamonaviy UI/UX patterns\n- **Accessibility**: Yaxshilangan foydalanish qulayligi\n\n## üõ†Ô∏è Texnik Stack\n\n- **Frontend**: React + TypeScript + Tailwind CSS\n- **Backend**: Node.js + Express + TypeScript\n- **Database**: PostgreSQL (production) / Memory (development)\n- **Styling**: Tailwind CSS + Custom CSS\n- **Build Tool**: Vite\n- **Package Manager**: npm\n\n## üåê Ishga Tushirish\n\nLoyiha muvaffaqiyatli ishga tushirildi:\n- **Development Server**: http://127.0.0.1:3000\n- **Status**: ‚úÖ Ishlamoqda\n- **Environment**: Development mode\n\n## üìà Natijalar\n\n1. **Xatoliklar**: Barcha TypeScript va runtime xatoliklari tuzatildi\n2. **Dizayn**: Zamonaviy va professional ko'rinish\n3. **Performance**: Yaxshilangan animatsiyalar va effektlar\n4. **Compatibility**: Windows muhitida to'liq ishlaydi\n\n## üéâ Xulosa\n\nOptombazar.uz loyihasi to'liq tahlil qilindi va quyidagi yaxshilanishlar amalga oshirildi:\n\n- ‚úÖ Barcha xatoliklar tuzatildi\n- ‚úÖ Zamonaviy dizayn qo'llandi\n- ‚úÖ Performance yaxshilandi\n- ‚úÖ User experience yaxshilandi\n- ‚úÖ Loyiha muvaffaqiyatli ishga tushirildi\n\nLoyiha endi production uchun tayyor va foydalanuvchilar uchun yaxshi tajriba taqdim etadi.\n","size_bytes":3408},"README-LOCAL.md":{"content":"# OptomBazar.uz - Lokal Kompyuterda Ishlatish\n\n## Talablar\n- Node.js (18+ versiya)\n- npm yoki yarn\n- Git\n\n## O'rnatish\n\n### 1. Loyihani yuklab olish\n```bash\ngit clone https://github.com/your-username/optombazar-uz\ncd optombazar-uz\n```\n\n### 2. Dependencies o'rnatish\n```bash\nnpm install\n```\n\n### 3. Environment variables sozlash\n`.env` fayl yarating va quyidagi ma'lumotlarni kiriting:\n\n```bash\n# Database\nDATABASE_URL=\"your_postgresql_connection_string\"\n\n# Optional: AI va Telegram (ixtiyoriy)\nGOOGLE_AI_API_KEY=\"your_google_ai_api_key\"\nTELEGRAM_BOT_TOKEN=\"your_telegram_bot_token\"\n\n# Session secret\nSESSION_SECRET=\"your_secret_key\"\n```\n\n### 4. Database migration\n```bash\nnpm run db:push\n```\n\n## Ishga tushirish\n\n### Windows uchun:\n```bash\nstart-local.bat\n```\n\n### MacOS/Linux uchun:\n```bash\n./start-local.sh\n```\n\n### Yoki qo'lda:\n```bash\nexport NODE_ENV=development\nexport PORT=3000\nnpm run dev\n```\n\n## Brauzerda ochish\n\nServer ishga tushgandan keyin, quyidagi manzilni oching:\n- **Lokal:** http://localhost:3000\n- **Tarmoqda:** http://your-ip:3000\n\n## Muammolarni hal qilish\n\n### Server ko'rinmayapti\n1. Port 3000 band bo'lmagan ekanligini tekshiring\n2. Firewall sozlamalarini tekshiring\n3. NODE_ENV=development o'rnatilganligini tekshiring\n\n### Database xatoligi\n1. PostgreSQL o'rnatilganligini tekshiring\n2. DATABASE_URL to'g'ri ekanligini tekshiring\n3. `npm run db:push` buyrug'ini qaytadan ishga tushiring\n\n### Packages xatoligi\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## Production uchun build\n```bash\nnpm run build\nnpm start\n```\n\n## Qo'shimcha ma'lumot\n- Development rejimi: Hot reload bilan ishlaydi\n- Production rejimi: Static fayllar bilan ishlaydi\n- PWA: Brauzerda \"Ilovani o'rnatish\" taklifi chiqadi . ","size_bytes":1738},"start-local.sh":{"content":"#!/bin/bash\n\n# Lokal kompyuter uchun server ishga tushirish\necho \"üöÄ Loyihani lokal kompyuterda ishga tushirish...\"\n\n# Environment variables\nexport NODE_ENV=development\nexport PORT=3000\n\n# Dependencies o'rnatish\necho \"üì¶ Dependencies o'rnatilmoqda...\"\nnpm install\n\n# Database migration\necho \"üóÑÔ∏è Database migration...\"\nnpm run db:push\n\n# Server ishga tushirish\necho \"üåê Server localhost:3000 da ishga tushirilmoqda...\"\nnpm run dev\n\necho \"‚úÖ Server tayyor! Brauzeringizda http://localhost:3000 ni oching\"","size_bytes":514},"client/src/types/global.d.ts":{"content":"export {};\n\ndeclare global {\n  interface Window {\n    gtag?: (...args: any[]) => void;\n    dataLayer?: any[];\n    fbq?: (...args: any[]) => void;\n  }\n\n  interface WindowEventMap {\n    beforeinstallprompt: BeforeInstallPromptEvent;\n  }\n}\n","size_bytes":237},"server/routes/admin/automation.ts":{"content":"import { Router } from 'express';\nimport { adminAuth } from '../../middleware/adminAuth';\nimport { createTestBlogPost, sendTestMarketingMessage, isSchedulerRunning } from '../../cron/blog-scheduler';\nimport { sendWeeklyReport, sendTestMessage } from '../../services/telegram-bot';\nimport type { IStorage } from '../../storage';\n\nexport function registerAutomationRoutes(app: any, storage: IStorage) {\n  const router = Router();\n\n  // Scheduler status\n  router.get('/scheduler/status', adminAuth, async (req, res) => {\n    try {\n      const isRunning = isSchedulerRunning();\n      const lastActivity = new Date().toISOString(); // Bu real holatda cache'dan olinadi\n      \n      res.json({\n        isRunning,\n        lastActivity,\n        uptime: process.uptime()\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Scheduler status olishda xatolik' });\n    }\n  });\n\n  // Blog statistics\n  router.get('/blog/stats', adminAuth, async (req, res) => {\n    try {\n      const blogPosts = await storage.getBlogPosts?.() || [];\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const todayPosts = blogPosts.filter(post => {\n        if (!post.createdAt) return false;\n        const postDate = new Date(post.createdAt);\n        postDate.setHours(0, 0, 0, 0);\n        return postDate.getTime() === today.getTime();\n      }).length;\n\n      const autoGeneratedPosts = blogPosts.filter(post => post.isAutoGenerated).length;\n      \n      res.json({\n        totalPosts: blogPosts.length,\n        todayPosts,\n        autoGeneratedPosts,\n        publishedPosts: blogPosts.filter(post => post.isPublished).length\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Blog statistikasini olishda xatolik' });\n    }\n  });\n\n  // Telegram statistics\n  router.get('/telegram/stats', adminAuth, async (req, res) => {\n    try {\n      // Bu real holatda Telegram API'dan yoki cache'dan olinadi\n      res.json({\n        todayMessages: 5,\n        weeklyMessages: 28,\n        totalMessages: 150,\n        channelSubscribers: 1250\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Telegram statistikasini olishda xatolik' });\n    }\n  });\n\n  // Test blog post yaratish\n  router.post('/blog/test', adminAuth, async (req, res) => {\n    try {\n      const { language = 'uz' } = req.body;\n      \n      if (!['uz', 'ru'].includes(language)) {\n        return res.status(400).json({ message: 'Noto\\'g\\'ri til tanlandi' });\n      }\n\n      await createTestBlogPost(storage, language as 'uz' | 'ru');\n      \n      res.json({ \n        success: true, \n        message: `${language.toUpperCase()} tilida test blog post yaratildi` \n      });\n    } catch (error) {\n      console.error('Test blog post yaratishda xatolik:', error);\n      res.status(500).json({ message: 'Test blog post yaratishda xatolik' });\n    }\n  });\n\n  // Test marketing xabari yuborish\n  router.post('/marketing/test', adminAuth, async (req, res) => {\n    try {\n      await sendTestMarketingMessage(storage);\n      \n      res.json({ \n        success: true, \n        message: 'Test marketing xabari yuborildi' \n      });\n    } catch (error) {\n      console.error('Test marketing xabarini yuborishda xatolik:', error);\n      res.status(500).json({ message: 'Test marketing xabarini yuborishda xatolik' });\n    }\n  });\n\n  // Haftalik hisobot yuborish\n  router.post('/reports/weekly', adminAuth, async (req, res) => {\n    try {\n      await sendWeeklyReport(storage);\n      \n      res.json({ \n        success: true, \n        message: 'Haftalik hisobot yuborildi' \n      });\n    } catch (error) {\n      console.error('Haftalik hisorot yuborishda xatolik:', error);\n      res.status(500).json({ message: 'Haftalik hisorot yuborishda xatolik' });\n    }\n  });\n\n  // Test Telegram xabari yuborish\n  router.post('/telegram/test', adminAuth, async (req, res) => {\n    try {\n      await sendTestMessage();\n      \n      res.json({ \n        success: true, \n        message: 'Test Telegram xabari yuborildi' \n      });\n    } catch (error) {\n      console.error('Test Telegram xabarini yuborishda xatolik:', error);\n      res.status(500).json({ message: 'Test Telegram xabarini yuborishda xatolik' });\n    }\n  });\n\n  // Scheduler boshqaruvi\n  router.post('/scheduler/start', adminAuth, async (req, res) => {\n    try {\n      // Bu real holatda scheduler'ni ishga tushiradi\n      res.json({ \n        success: true, \n        message: 'Scheduler ishga tushirildi' \n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Scheduler\\'ni ishga tushirishda xatolik' });\n    }\n  });\n\n  router.post('/scheduler/stop', adminAuth, async (req, res) => {\n    try {\n      // Bu real holatda scheduler'ni to'xtatadi\n      res.json({ \n        success: true, \n        message: 'Scheduler to\\'xtatildi' \n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Scheduler\\'ni to\\'xtatishda xatolik' });\n    }\n  });\n\n  app.use('/api/admin', router);\n}\n","size_bytes":4951},"client/src/pages/admin/AdminAutomationPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLanguage } from '@/components/language-provider';\nimport {\n  Bot,\n  Calendar,\n  MessageSquare,\n  TrendingUp,\n  Send,\n  Settings,\n  Play,\n  Pause,\n  BarChart3,\n  Megaphone,\n  FileText,\n  Clock,\n} from 'lucide-react';\n\ninterface SchedulerStatus {\n  isRunning: boolean;\n  lastActivity: string;\n  uptime: number;\n}\n\ninterface BlogStats {\n  totalPosts: number;\n  todayPosts: number;\n  autoGeneratedPosts: number;\n  publishedPosts: number;\n}\n\ninterface TelegramStats {\n  todayMessages: number;\n  weeklyMessages: number;\n  totalMessages: number;\n  channelSubscribers: number;\n}\n\nexport default function AdminAutomationPage() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Scheduler status\n  const { data: schedulerStatus } = useQuery<SchedulerStatus>({\n    queryKey: ['/api/admin/scheduler/status'],\n    refetchInterval: 30000, // Har 30 soniyada yangilash\n  });\n\n  // Blog posts statistikasi\n  const { data: blogStats } = useQuery<BlogStats>({\n    queryKey: ['/api/admin/blog/stats'],\n  });\n\n  // Telegram statistikasi\n  const { data: telegramStats } = useQuery<TelegramStats>({\n    queryKey: ['/api/admin/telegram/stats'],\n  });\n\n  // Test blog post yaratish\n  const createTestBlogPost = useMutation({\n    mutationFn: async (language: 'uz' | 'ru') => {\n      const response = await fetch('/api/admin/blog/test', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ language }),\n      });\n      if (!response.ok) throw new Error('Failed to create test blog post');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: language === 'uz' ? 'Muvaffaqiyat!' : '–£—Å–ø–µ—Ö!',\n        description: language === 'uz' ? 'Test blog post yaratildi' : '–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥ –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/blog/stats'] });\n    },\n    onError: () => {\n      toast({\n        title: language === 'uz' ? 'Xatolik!' : '–û—à–∏–±–∫–∞!',\n        description: language === 'uz' ? 'Blog post yaratishda xatolik' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–≥ –ø–æ—Å—Ç–∞',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Test marketing xabari yuborish\n  const sendTestMarketing = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/admin/marketing/test', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to send test marketing message');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: language === 'uz' ? 'Muvaffaqiyat!' : '–£—Å–ø–µ—Ö!',\n        description: language === 'uz' ? 'Test marketing xabari yuborildi' : '–¢–µ—Å—Ç–æ–≤–æ–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',\n      });\n    },\n    onError: () => {\n      toast({\n        title: language === 'uz' ? 'Xatolik!' : '–û—à–∏–±–∫–∞!',\n        description: language === 'uz' ? 'Marketing xabarini yuborishda xatolik' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Haftalik hisobot yuborish\n  const sendWeeklyReport = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/admin/reports/weekly', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to send weekly report');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: language === 'uz' ? 'Muvaffaqiyat!' : '–£—Å–ø–µ—Ö!',\n        description: language === 'uz' ? 'Haftalik hisobot yuborildi' : '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',\n      });\n    },\n  });\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          {language === 'uz' ? 'Avtomatlashtirish Paneli' : '–ü–∞–Ω–µ–ª—å –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'}\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          {language === 'uz' \n            ? 'Blog postlar, marketing va Telegram bot\\'ni boshqaring' \n            : '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–ª–æ–≥ –ø–æ—Å—Ç–∞–º–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º –∏ Telegram –±–æ—Ç–æ–º'\n          }\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            {language === 'uz' ? 'Umumiy' : '–û–±–∑–æ—Ä'}\n          </TabsTrigger>\n          <TabsTrigger value=\"blog\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            {language === 'uz' ? 'Blog' : '–ë–ª–æ–≥'}\n          </TabsTrigger>\n          <TabsTrigger value=\"telegram\" className=\"flex items-center gap-2\">\n            <Bot className=\"h-4 w-4\" />\n            Telegram\n          </TabsTrigger>\n          <TabsTrigger value=\"marketing\" className=\"flex items-center gap-2\">\n            <Megaphone className=\"h-4 w-4\" />\n            {language === 'uz' ? 'Marketing' : '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Scheduler Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                {language === 'uz' ? 'Scheduler Holati' : '–°—Ç–∞—Ç—É—Å –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞'}\n              </CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Avtomatik vazifalarning holati' \n                  : '–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={schedulerStatus?.isRunning ? 'default' : 'secondary'}>\n                    {schedulerStatus?.isRunning \n                      ? (language === 'uz' ? 'Faol' : '–ê–∫—Ç–∏–≤–µ–Ω')\n                      : (language === 'uz' ? 'To\\'xtatilgan' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')\n                    }\n                  </Badge>\n                  <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {language === 'uz' ? 'Oxirgi faollik:' : '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:'} {schedulerStatus?.lastActivity || 'N/A'}\n                  </span>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    {language === 'uz' ? 'Ishga tushirish' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Pause className=\"h-4 w-4 mr-2\" />\n                    {language === 'uz' ? 'To\\'xtatish' : '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  {language === 'uz' ? 'Bugungi Blog Postlar' : '–ë–ª–æ–≥ –ü–æ—Å—Ç—ã –°–µ–≥–æ–¥–Ω—è'}\n                </CardTitle>\n                <FileText className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{blogStats?.todayPosts || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {language === 'uz' ? 'Jami:' : '–í—Å–µ–≥–æ:'} {blogStats?.totalPosts || 0}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  {language === 'uz' ? 'Telegram Xabarlar' : 'Telegram –°–æ–æ–±—â–µ–Ω–∏—è'}\n                </CardTitle>\n                <Bot className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{telegramStats?.todayMessages || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {language === 'uz' ? 'Haftalik:' : '–ó–∞ –Ω–µ–¥–µ–ª—é:'} {telegramStats?.weeklyMessages || 0}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  {language === 'uz' ? 'Marketing Kampaniyalar' : '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ö–∞–º–ø–∞–Ω–∏–∏'}\n                </CardTitle>\n                <Megaphone className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">3</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {language === 'uz' ? 'Faol kampaniyalar' : '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏'}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"blog\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{language === 'uz' ? 'Blog Boshqaruvi' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ª–æ–≥–æ–º'}</CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Avtomatik blog postlar yaratish va boshqarish' \n                  : '–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–≥ –ø–æ—Å—Ç–∞–º–∏'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex gap-4\">\n                <Button \n                  onClick={() => createTestBlogPost.mutate('uz')}\n                  disabled={createTestBlogPost.isPending}\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'O\\'zbek tilida test post' : '–¢–µ—Å—Ç –ø–æ—Å—Ç –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º'}\n                </Button>\n                <Button \n                  onClick={() => createTestBlogPost.mutate('ru')}\n                  disabled={createTestBlogPost.isPending}\n                  variant=\"outline\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Rus tilida test post' : '–¢–µ—Å—Ç –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º'}\n                </Button>\n              </div>\n              \n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                {language === 'uz' \n                  ? 'Avtomatik rejim: Har 2 soatda yangi post yaratiladi (08:00-20:00)' \n                  : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –ù–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (08:00-20:00)'\n                }\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"telegram\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{language === 'uz' ? 'Telegram Bot Boshqaruvi' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –ë–æ—Ç–æ–º'}</CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Telegram kanaliga xabarlar yuborish va boshqarish' \n                  : '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex gap-4\">\n                <Button \n                  onClick={() => sendWeeklyReport.mutate()}\n                  disabled={sendWeeklyReport.isPending}\n                >\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Haftalik hisobot yuborish' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç'}\n                </Button>\n                <Button \n                  onClick={() => sendTestMarketing.mutate()}\n                  disabled={sendTestMarketing.isPending}\n                  variant=\"outline\"\n                >\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  {language === 'uz' ? 'Test xabari yuborish' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'}\n                </Button>\n              </div>\n              \n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                {language === 'uz' \n                  ? 'Kanal: @optombazaruzb | Avtomatik xabarlar har kuni yuboriladi' \n                  : '–ö–∞–Ω–∞–ª: @optombazaruzb | –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'\n                }\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"marketing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{language === 'uz' ? 'Marketing Kampaniyalari' : '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ö–∞–º–ø–∞–Ω–∏–∏'}</CardTitle>\n              <CardDescription>\n                {language === 'uz' \n                  ? 'Avtomatik marketing xabarlari va aksiyalar' \n                  : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏'\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">\n                    {language === 'uz' ? 'Haftalik Marketing' : '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'}\n                  </h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                    {language === 'uz' \n                      ? 'Dushanba va juma kunlari soat 14:00 da' \n                      : '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü–∞ –≤ 14:00'\n                    }\n                  </p>\n                  <Badge variant=\"default\">\n                    {language === 'uz' ? 'Faol' : '–ê–∫—Ç–∏–≤–Ω–æ'}\n                  </Badge>\n                </div>\n                \n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">\n                    {language === 'uz' ? 'Oylik Aksiya' : '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ê–∫—Ü–∏—è'}\n                  </h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                    {language === 'uz' \n                      ? 'Har oyning 1-sanasida soat 10:00 da' \n                      : '1-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 10:00'\n                    }\n                  </p>\n                  <Badge variant=\"default\">\n                    {language === 'uz' ? 'Faol' : '–ê–∫—Ç–∏–≤–Ω–æ'}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":16181}},"version":1}