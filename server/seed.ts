import { storage } from './storage.js';

// Helper function to create slug from text
function createSlug(text: string): string {
  const slugMap: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
    '—ã': 'y', '—ç': 'e', '—é': 'yu', '—è': 'ya', ' ': '-', '_': '-'
  };
  
  return text.toLowerCase()
    .split('')
    .map(char => slugMap[char] || char)
    .join('')
    .replace(/[^a-z0-9-]/g, '')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

// Parse bilingual category names (format: "Russian | Uzbek")
function parseCategoryName(fullName: string): { nameRu: string; nameUz: string } {
  const parts = fullName.split('|').map(part => part.trim());
  return {
    nameRu: parts[0] || fullName,
    nameUz: parts[1] || parts[0] || fullName
  };
}

// Real bilingual categories data
const categoriesData = [
  // Main category: Plastic bags
  {
    type: 'main',
    name: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar'
  },
  {
    type: 'sub',
    parent: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar',
    name: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç "–ú–∞–π–∫–∞" –±–µ–∑ —Ä–∏—Å—É–Ω–∫–∞ | Rasmsiz mayka paketlar'
  },
  {
    type: 'sub',
    parent: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar',
    name: '–§–∞—Å–æ–≤–æ—á–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏ —Ä—É–ª–æ–Ω–µ | Qadoqlash paketlari va rulonlari'
  },
  {
    type: 'sub',
    parent: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar',
    name: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç —Å –∑–∞–º–∫–æ–º zip-lock (—Å—Ç—Ä—É–Ω–∞) | Zip paketlar'
  },
  {
    type: 'sub',
    parent: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar',
    name: '–ú—É—Å–æ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã | Axlat uchun qoplari'
  },
  {
    type: 'sub',
    parent: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar',
    name: '–ü–∞–∫–µ—Ç—ã —Å –≤—ã—Ä—É–±–Ω–æ–π —Ä—É—á–∫–æ–π | Kesilgan tutqichli paketlar'
  },
  {
    type: 'sub',
    parent: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã | Plastik paketlar',
    name: '–ü–∞–∫–µ—Ç—ã —Å –ø–µ—Ç–ª–µ–≤–æ–π —Ä—É—á–∫–æ–π | Halqa tutqichili sumkalar'
  },

  // Main category: Disposable tableware
  {
    type: 'main',
    name: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ | Bir martali ishlatiladigan idishlar'
  },
  {
    type: 'sub',
    parent: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ | Bir martali ishlatiladigan idishlar',
    name: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ—Å—É–¥–∞ | Plastmassa idishlar'
  },
  {
    type: 'sub',
    parent: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ | Bir martali ishlatiladigan idishlar',
    name: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –±—É–º–∞–∂–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω—ã, –∫—Ä—ã—à–∫–∏ –∏ —Ç–∞—Ä–µ–ª–∫–∏ | Stakan va tarelkalar'
  },
  {
    type: 'sub',
    parent: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ | Bir martali ishlatiladigan idishlar',
    name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Ç–∞—Ä–∞ –¥–ª—è —è–≥–æ–¥, –±–ª–∏—Å—Ç–µ—Ä–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ | Oziq-ovqat va pishiriq idishlari'
  },

  // Main category: Household goods
  {
    type: 'main',
    name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–∞—Ñ–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –±–∞—Ä–æ–≤ | Uy buyumlari va do\'kon tovarlari'
  },
  {
    type: 'sub',
    parent: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–∞—Ñ–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –±–∞—Ä–æ–≤ | Uy buyumlari va do\'kon tovarlari',
    name: '–ë—ã—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ | Uy uchun maishiy buyumlar'
  },
  {
    type: 'sub',
    parent: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–∞—Ñ–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –±–∞—Ä–æ–≤ | Uy buyumlari va do\'kon tovarlari',
    name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –±–∞—Ä–æ–≤ | Kafe va restoran tovarlari'
  },

  // Main category: Household chemicals
  {
    type: 'main',
    name: '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è | Maishiy kimyo'
  },
  {
    type: 'sub',
    parent: '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è | Maishiy kimyo',
    name: '–ú–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ | Yuvish vositalari'
  },
  {
    type: 'sub',
    parent: '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è | Maishiy kimyo',
    name: '–ß–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ | Tozalash vositalari'
  },

  // Main category: Clothing
  {
    type: 'main',
    name: '–û–¥–µ–∂–¥–∞ | Kiyim-kechak'
  },
  {
    type: 'sub',
    parent: '–û–¥–µ–∂–¥–∞ | Kiyim-kechak',
    name: '–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ | Bolalar kiyimi'
  },
  {
    type: 'sub',
    parent: '–û–¥–µ–∂–¥–∞ | Kiyim-kechak',
    name: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ | Ayollar kiyimi'
  },
  {
    type: 'sub',
    parent: '–û–¥–µ–∂–¥–∞ | Kiyim-kechak',
    name: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ | Erkaklar kiyimi'
  },

  // Main category: Electronics
  {
    type: 'main',
    name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ | Elektronika'
  },
  {
    type: 'sub',
    parent: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ | Elektronika',
    name: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞ | Uy uchun maishiy texnika'
  },
  {
    type: 'sub',
    parent: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ | Elektronika',
    name: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –∫—É—Ö–Ω–∏ | Oshxona uchun texnika'
  },

  // Main category: Office supplies
  {
    type: 'main',
    name: '–ö–∞–Ω—Å—Ç–æ–≤–∞—Ä—ã –¥–ª—è —à–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å–∞ –≤—Å–µ –¥–ª—è —É—á–µ–±—ã –∏ —Ä–∞–±–æ—Ç—ã | Maktab va ofis uchun tovarlar'
  },
  {
    type: 'sub',
    parent: '–ö–∞–Ω—Å—Ç–æ–≤–∞—Ä—ã –¥–ª—è —à–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å–∞ –≤—Å–µ –¥–ª—è —É—á–µ–±—ã –∏ —Ä–∞–±–æ—Ç—ã | Maktab va ofis uchun tovarlar',
    name: '–®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ | Maktab jihozlari'
  },
  {
    type: 'sub',
    parent: '–ö–∞–Ω—Å—Ç–æ–≤–∞—Ä—ã –¥–ª—è —à–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å–∞ –≤—Å–µ –¥–ª—è —É—á–µ–±—ã –∏ —Ä–∞–±–æ—Ç—ã | Maktab va ofis uchun tovarlar',
    name: '–û—Ñ–∏—Å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ | Ofis jihozlari'
  },

  // Main category: Holiday items
  {
    type: 'main',
    name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ | Bayram tovarlari'
  },
  {
    type: 'sub',
    parent: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ | Bayram tovarlari',
    name: '–£–∫—Ä–∞—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ | Bayram bezaklari'
  },
  {
    type: 'sub',
    parent: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ | Bayram tovarlari',
    name: '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ | Sovg\'a qadoqlari'
  }
];

export async function seedDatabase() {
  console.log('üå± Starting database seeding with real bilingual data...');

  try {
    // Clear existing data
    console.log('üóëÔ∏è Clearing existing categories and products...');
    
    // Create category map to store main categories first, then subcategories
    const categoryMap = new Map<string, string>(); // key: category name, value: category id
    
    // Process main categories first
    console.log('üìÅ Creating main categories...');
    for (const categoryData of categoriesData.filter(c => c.type === 'main')) {
      const parsed = parseCategoryName(categoryData.name);
      const slug = createSlug(parsed.nameRu);
      const categoryId = `cat-${slug}`;
      
      const category = {
        id: categoryId,
        nameUz: parsed.nameUz,
        nameRu: parsed.nameRu,
        slug,
        parentId: null,
        icon: getIconForCategory(parsed.nameRu),
        isActive: true
      };

      await storage.createCategory(category);
      categoryMap.set(categoryData.name, categoryId);
      
      console.log(`‚úì Created main category: ${parsed.nameRu} | ${parsed.nameUz}`);
    }

    // Process subcategories
    console.log('üìÇ Creating subcategories...');
    for (const categoryData of categoriesData.filter(c => c.type === 'sub')) {
      const parsed = parseCategoryName(categoryData.name);
      const parentId = categoryMap.get(categoryData.parent!);
      const slug = createSlug(parsed.nameRu);
      const categoryId = `cat-${slug}`;
      
      if (!parentId) {
        console.warn(`‚ö†Ô∏è Parent category not found for: ${categoryData.name}`);
        continue;
      }

      const category = {
        id: categoryId,
        nameUz: parsed.nameUz,
        nameRu: parsed.nameRu,
        slug,
        parentId,
        icon: getIconForCategory(parsed.nameRu),
        isActive: true
      };

      await storage.createCategory(category);
      categoryMap.set(categoryData.name, categoryId);
      
      console.log(`  ‚úì Created subcategory: ${parsed.nameRu} | ${parsed.nameUz}`);
    }

    // Create sample products for some categories
    console.log('üì¶ Creating sample products...');
    await createSampleProducts(categoryMap);

    console.log('‚úÖ Database seeding completed successfully!');
    console.log(`üìä Total categories created: ${categoryMap.size}`);
    
  } catch (error) {
    console.error('‚ùå Database seeding failed:', error);
    throw error;
  }
}

// Helper function to assign icons to categories
function getIconForCategory(categoryName: string): string {
  const iconMap: Record<string, string> = {
    '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã': 'Package',
    '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞': 'Utensils',
    '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞': 'Folder',
    '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è': 'Box',
    '–û–¥–µ–∂–¥–∞': 'Shirt',
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': 'Smartphone',
    '–ö–∞–Ω—Å—Ç–æ–≤–∞—Ä—ã': 'Folder',
    '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤': 'Package'
  };
  
  // Find matching icon based on category name
  for (const [key, icon] of Object.entries(iconMap)) {
    if (categoryName.includes(key)) {
      return icon;
    }
  }
  
  return 'Folder'; // Default icon
}

// Create sample products for demonstration
async function createSampleProducts(categoryMap: Map<string, string>) {
  const sampleProducts = [
    {
      nameRu: '–ü–∞–∫–µ—Ç –º–∞–π–∫–∞ –±–µ–ª—ã–π 30x60',
      nameUz: 'Oq mayka paket 30x60',
      categoryName: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç "–ú–∞–π–∫–∞" –±–µ–∑ —Ä–∏—Å—É–Ω–∫–∞ | Rasmsiz mayka paketlar',
      price: 15.0,
      wholesalePrice: 12.0
    },
    {
      nameRu: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —Å—Ç–∞–∫–∞–Ω—ã 200–º–ª',
      nameUz: 'Bir martalik plastik stakanlar 200ml',
      categoryName: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –ø–æ—Å—É–¥–∞ | Plastmassa idishlar',
      price: 25.0,
      wholesalePrice: 20.0
    },
    {
      nameRu: '–ú–æ—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã 500–º–ª',
      nameUz: 'Idish yuvish vositasi 500ml',
      categoryName: '–ú–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ | Yuvish vositalari',
      price: 35.0,
      wholesalePrice: 28.0
    }
  ];

  for (const productData of sampleProducts) {
    const categoryId = categoryMap.get(productData.categoryName);
    if (!categoryId) {
      console.warn(`‚ö†Ô∏è Category not found for product: ${productData.nameRu}`);
      continue;
    }

    const product = {
      id: `prod-${createSlug(productData.nameRu)}`,
      nameUz: productData.nameUz,
      nameRu: productData.nameRu,
      descriptionUz: `${productData.nameUz} - sifatli mahsulot optom narxlarda`,
      descriptionRu: `${productData.nameRu} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –æ–ø—Ç–æ–≤—ã–º —Ü–µ–Ω–∞–º`,
      slug: createSlug(productData.nameRu),
      categoryId,
      price: productData.price,
      wholesalePrice: productData.wholesalePrice,
      stockQuantity: 1000,
      images: [],
      isActive: true
    };

    await storage.createProduct(product);
    console.log(`  ‚úì Created product: ${productData.nameRu} | ${productData.nameUz}`);
  }
}

// Run seeding if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  seedDatabase()
    .then(() => {
      console.log('üéâ Seeding process completed!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Seeding process failed:', error);
      process.exit(1);
    });
}