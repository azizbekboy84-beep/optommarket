import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { useLanguage } from '@/components/language-provider';
import {
  Bot,
  Calendar,
  MessageSquare,
  TrendingUp,
  Send,
  Settings,
  Play,
  Pause,
  BarChart3,
  Megaphone,
  FileText,
  Clock,
} from 'lucide-react';

interface SchedulerStatus {
  isRunning: boolean;
  lastActivity: string;
  uptime: number;
}

interface BlogStats {
  totalPosts: number;
  todayPosts: number;
  autoGeneratedPosts: number;
  publishedPosts: number;
}

interface TelegramStats {
  todayMessages: number;
  weeklyMessages: number;
  totalMessages: number;
  channelSubscribers: number;
}

export default function AdminAutomationPage() {
  const { language } = useLanguage();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isLoading, setIsLoading] = useState(false);

  // Scheduler status
  const { data: schedulerStatus = { isRunning: false, lastActivity: 'N/A', uptime: 0 } } = useQuery<SchedulerStatus>({
    queryKey: ['/api/admin/scheduler/status'],
    refetchInterval: 30000, // Har 30 soniyada yangilash
  });

  // Blog posts statistikasi
  const { data: blogStats = { totalPosts: 0, todayPosts: 0, autoGeneratedPosts: 0, publishedPosts: 0 } } = useQuery<BlogStats>({
    queryKey: ['/api/admin/blog/stats'],
  });

  // Telegram statistikasi
  const { data: telegramStats = { todayMessages: 0, weeklyMessages: 0, totalMessages: 0, channelSubscribers: 0 } } = useQuery<TelegramStats>({
    queryKey: ['/api/admin/telegram/stats'],
  });

  // Test blog post yaratish
  const createTestBlogPost = useMutation({
    mutationFn: async (language: 'uz' | 'ru') => {
      const response = await fetch('/api/admin/blog/test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ language }),
      });
      if (!response.ok) throw new Error('Failed to create test blog post');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: language === 'uz' ? 'Muvaffaqiyat!' : 'Успех!',
        description: language === 'uz' ? 'Test blog post yaratildi' : 'Тестовый блог пост создан',
      });
      queryClient.invalidateQueries({ queryKey: ['/api/admin/blog/stats'] });
    },
    onError: () => {
      toast({
        title: language === 'uz' ? 'Xatolik!' : 'Ошибка!',
        description: language === 'uz' ? 'Blog post yaratishda xatolik' : 'Ошибка при создании блог поста',
        variant: 'destructive',
      });
    },
  });

  // Test marketing xabari yuborish
  const sendTestMarketing = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/admin/marketing/test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      if (!response.ok) throw new Error('Failed to send test marketing message');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: language === 'uz' ? 'Muvaffaqiyat!' : 'Успех!',
        description: language === 'uz' ? 'Test marketing xabari yuborildi' : 'Тестовое маркетинговое сообщение отправлено',
      });
    },
    onError: () => {
      toast({
        title: language === 'uz' ? 'Xatolik!' : 'Ошибка!',
        description: language === 'uz' ? 'Marketing xabarini yuborishda xatolik' : 'Ошибка при отправке маркетингового сообщения',
        variant: 'destructive',
      });
    },
  });

  // Haftalik hisobot yuborish
  const sendWeeklyReport = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/admin/reports/weekly', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      if (!response.ok) throw new Error('Failed to send weekly report');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: language === 'uz' ? 'Muvaffaqiyat!' : 'Успех!',
        description: language === 'uz' ? 'Haftalik hisobot yuborildi' : 'Еженедельный отчет отправлен',
      });
    },
  });

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
          {language === 'uz' ? 'Avtomatlashtirish Paneli' : 'Панель Автоматизации'}
        </h1>
        <p className="text-gray-600 dark:text-gray-300">
          {language === 'uz' 
            ? 'Blog postlar, marketing va Telegram bot\'ni boshqaring' 
            : 'Управляйте блог постами, маркетингом и Telegram ботом'
          }
        </p>
      </div>

      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            {language === 'uz' ? 'Umumiy' : 'Обзор'}
          </TabsTrigger>
          <TabsTrigger value="blog" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            {language === 'uz' ? 'Blog' : 'Блог'}
          </TabsTrigger>
          <TabsTrigger value="telegram" className="flex items-center gap-2">
            <Bot className="h-4 w-4" />
            Telegram
          </TabsTrigger>
          <TabsTrigger value="marketing" className="flex items-center gap-2">
            <Megaphone className="h-4 w-4" />
            {language === 'uz' ? 'Marketing' : 'Маркетинг'}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Scheduler Status */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="h-5 w-5" />
                {language === 'uz' ? 'Scheduler Holati' : 'Статус Планировщика'}
              </CardTitle>
              <CardDescription>
                {language === 'uz' 
                  ? 'Avtomatik vazifalarning holati' 
                  : 'Статус автоматических задач'
                }
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge variant={schedulerStatus?.isRunning ? 'default' : 'secondary'}>
                    {schedulerStatus?.isRunning 
                      ? (language === 'uz' ? 'Faol' : 'Активен')
                      : (language === 'uz' ? 'To\'xtatilgan' : 'Остановлен')
                    }
                  </Badge>
                  <span className="text-sm text-gray-600 dark:text-gray-300">
                    {language === 'uz' ? 'Oxirgi faollik:' : 'Последняя активность:'} {schedulerStatus?.lastActivity || 'N/A'}
                  </span>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">
                    <Play className="h-4 w-4 mr-2" />
                    {language === 'uz' ? 'Ishga tushirish' : 'Запустить'}
                  </Button>
                  <Button variant="outline" size="sm">
                    <Pause className="h-4 w-4 mr-2" />
                    {language === 'uz' ? 'To\'xtatish' : 'Остановить'}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Quick Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  {language === 'uz' ? 'Bugungi Blog Postlar' : 'Блог Посты Сегодня'}
                </CardTitle>
                <FileText className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{blogStats?.todayPosts || 0}</div>
                <p className="text-xs text-muted-foreground">
                  {language === 'uz' ? 'Jami:' : 'Всего:'} {blogStats?.totalPosts || 0}
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  {language === 'uz' ? 'Telegram Xabarlar' : 'Telegram Сообщения'}
                </CardTitle>
                <Bot className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{telegramStats?.todayMessages || 0}</div>
                <p className="text-xs text-muted-foreground">
                  {language === 'uz' ? 'Haftalik:' : 'За неделю:'} {telegramStats?.weeklyMessages || 0}
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  {language === 'uz' ? 'Marketing Kampaniyalar' : 'Маркетинговые Кампании'}
                </CardTitle>
                <Megaphone className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">3</div>
                <p className="text-xs text-muted-foreground">
                  {language === 'uz' ? 'Faol kampaniyalar' : 'Активные кампании'}
                </p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="blog" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>{language === 'uz' ? 'Blog Boshqaruvi' : 'Управление Блогом'}</CardTitle>
              <CardDescription>
                {language === 'uz' 
                  ? 'Avtomatik blog postlar yaratish va boshqarish' 
                  : 'Создание и управление автоматическими блог постами'
                }
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-4">
                <Button 
                  onClick={() => createTestBlogPost.mutate('uz')}
                  disabled={createTestBlogPost.isPending}
                >
                  <Send className="h-4 w-4 mr-2" />
                  {language === 'uz' ? 'O\'zbek tilida test post' : 'Тест пост на узбекском'}
                </Button>
                <Button 
                  onClick={() => createTestBlogPost.mutate('ru')}
                  disabled={createTestBlogPost.isPending}
                  variant="outline"
                >
                  <Send className="h-4 w-4 mr-2" />
                  {language === 'uz' ? 'Rus tilida test post' : 'Тест пост на русском'}
                </Button>
              </div>
              
              <div className="text-sm text-gray-600 dark:text-gray-300">
                {language === 'uz' 
                  ? 'Avtomatik rejim: Har 2 soatda yangi post yaratiladi (08:00-20:00)' 
                  : 'Автоматический режим: Новый пост создается каждые 2 часа (08:00-20:00)'
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="telegram" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>{language === 'uz' ? 'Telegram Bot Boshqaruvi' : 'Управление Telegram Ботом'}</CardTitle>
              <CardDescription>
                {language === 'uz' 
                  ? 'Telegram kanaliga xabarlar yuborish va boshqarish' 
                  : 'Отправка сообщений в Telegram канал и управление'
                }
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-4">
                <Button 
                  onClick={() => sendWeeklyReport.mutate()}
                  disabled={sendWeeklyReport.isPending}
                >
                  <TrendingUp className="h-4 w-4 mr-2" />
                  {language === 'uz' ? 'Haftalik hisobot yuborish' : 'Отправить еженедельный отчет'}
                </Button>
                <Button 
                  onClick={() => sendTestMarketing.mutate()}
                  disabled={sendTestMarketing.isPending}
                  variant="outline"
                >
                  <MessageSquare className="h-4 w-4 mr-2" />
                  {language === 'uz' ? 'Test xabari yuborish' : 'Отправить тест сообщение'}
                </Button>
              </div>
              
              <div className="text-sm text-gray-600 dark:text-gray-300">
                {language === 'uz' 
                  ? 'Kanal: @optombazaruzb | Avtomatik xabarlar har kuni yuboriladi' 
                  : 'Канал: @optombazaruzb | Автоматические сообщения отправляются ежедневно'
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="marketing" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>{language === 'uz' ? 'Marketing Kampaniyalari' : 'Маркетинговые Кампании'}</CardTitle>
              <CardDescription>
                {language === 'uz' 
                  ? 'Avtomatik marketing xabarlari va aksiyalar' 
                  : 'Автоматические маркетинговые сообщения и акции'
                }
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-4 border rounded-lg">
                  <h4 className="font-semibold mb-2">
                    {language === 'uz' ? 'Haftalik Marketing' : 'Еженедельный Маркетинг'}
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
                    {language === 'uz' 
                      ? 'Dushanba va juma kunlari soat 14:00 da' 
                      : 'Понедельник и пятница в 14:00'
                    }
                  </p>
                  <Badge variant="default">
                    {language === 'uz' ? 'Faol' : 'Активно'}
                  </Badge>
                </div>
                
                <div className="p-4 border rounded-lg">
                  <h4 className="font-semibold mb-2">
                    {language === 'uz' ? 'Oylik Aksiya' : 'Ежемесячная Акция'}
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
                    {language === 'uz' 
                      ? 'Har oyning 1-sanasida soat 10:00 da' 
                      : '1-го числа каждого месяца в 10:00'
                    }
                  </p>
                  <Badge variant="default">
                    {language === 'uz' ? 'Faol' : 'Активно'}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
